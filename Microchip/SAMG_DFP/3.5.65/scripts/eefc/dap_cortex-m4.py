# This file is autogenerated
comm_speed=2000000
erase_as_needed = True  # used in prog_write
comm_iface = True
reset_delay = 0
has_reset = True
show_output = False
log_level = 0

def _begin_debug_session():
    dev.Connect(comm_iface, comm_speed)
    reset_and_halt()
    cache_onDebugStart()

def _begin_communication_session(): 
    global log_level,show_output,reset_delay, target_was_reset, has_reset, _stealth_runstate    
    log_level    = settings.getNumeric("script.log_level",log_level)
    show_output  = settings.getBool("script.show_output",show_output)
    has_reset  = settings.getBool("script.has_reset",has_reset)
    reset_delay = settings.getNumeric("script.reset_delay",reset_delay)

    target_was_reset = False
    _stealth_runstate = 2
    dev.SetApiLogging(log_level)
    log.setShowOutput(show_output)

    global comm_iface, comm_speed, erase_as_needed
    comm_iface = settings.getString("communication.interface", "swd") == "swd"
    comm_speed = settings.getNumeric("communication.frequency", comm_speed)
    erase_as_needed = True  # used in prog_write

    global mem_handlers
    mem_handlers = None
    try:
        board_file = ide.expandProjectMacros("${ProjectName}", settings.getString("loader.board_file", "${ProjectDir}/board.xboard"))
    except:
        board_file = "./board.xboard"
    if os.path.isfile(board_file):
        mem_handlers = MemHandlers(board_file)

def _end_communication_session(): 
    _end_of_operations()

def onShowPropsDFP2(t):
    ide.addBooleanProperty(t,"arm.use_vtor" , "*|programoptions|programoptions.eraseb4program","Set PC and SP to VTOR","After reset, force PC and SP to the entries defined by the VTOR", False)
    ide.addTextProperty(t,"arm.vtor_adr" , "*|programoptions|programoptions.eraseb4program","VTOR table or numerical address", "Enter address of vector table", "exception_table")
    ide.addPropCategory(t,"diagnostics" , "*|toolpack", "Diagnostics")
    ide.addBooleanProperty(t,"script.show_output" , "*|diagnostics|*","Output diagnostic logging","Show diagnostic text in the Output window", False)
    ide.addTextProperty(t,"script.log_level" , "*|diagnostics|*","Diagnostic log level","Set diagnostic level (usually 0 1 or 3)", "1")
    ide.addTextProperty(t,"script.reset_delay" , "*|diagnostics|*","Additional delay after reset","Enter additional RST settling delay in msec", "0")
    ide.addBooleanProperty(t,"script.has_reset" , "*|diagnostics|*","Uncheck if RESET line is not wired","Normally checked. Uncheck if the target does not have RST connected to the debugger", True)
    ide.addTextProperty(t, "loader.board_file", "*|programoptions|**","Board file path","Set the path of board file", "${ProjectDir}/board.xboard")

def print_dhcsr_v(t, d):
    log.info(t + arm.getDHCSRString(d))

def print_dhcsr(text):
    try:
        d = dev.Read32(arm.DHCSR)
        print_dhcsr_v(text, d)
        return d
    except:
        log.log("DHCSR is unreadable")
        return 0

def _debug_read(mt, start, length, data):
    cache_onDataRead(start,length)
    _prog_read(mt, start, length, data)

def _debug_write(mt, start, length, data):
    if str(mt) == "Pgm":
        cache_invalidateInstrCache()
        _flash_write(start, length, data, True)
        return

    cache_onDataWrite(start,length)
    dev.Write(start, data, 0, length)

def debug_write_supports_flash():
    return 1

def _get_pc():
    try:
        pc = dev.ReadReg64(15)
    except:
        log.error("get_pc returned error")
        return 0
    return pc
    
def _mem_read(start, length, data):
    dev.Read(start, data, 0, length)

def _mem_write(start, length, data):
    dev.Write(start, data, 0, length)

def _run_target():
    cache_onRun()
    dev.Write32(arm.DHCSR, 0xa05f0001)  # DBGKEY | C_DEBUGEN | C_HALT

def _halt_target():
    dev.Write32(arm.DHCSR, 0xa05f0003)  # DBGKEY | C_DEBUGEN | C_HALT

def _step_target():
    cache_onRun()
    dev.Write32(arm.DHCSR, 0xa05f000b)  # DBGKEY | C_DEBUGEN | C_HALT | C_MASKINTS
    dev.Write32(arm.DHCSR, 0xa05f000d)  # DBGKEY | C_DEBUGEN | C_STEP | C_MASKINTS
    dev.Write32(arm.DHCSR, 0xa05f0003)  # DBGKEY | C_DEBUGEN | C_HALT
    cache_onStop()

def _set_pc(pc):
    dev.WriteReg64(15, pc)

def print_byte_array(text, array, index, size):
    string = text
    for i in range(size):
        string += " %x" % array[i+index]
    log.info(string)

g_is_running = True
def _is_target_running():
    global g_is_running
    dhcsr = dev.Read32(arm.DHCSR)
    state = 0 == (dhcsr & 0x20000)
    if state != g_is_running:
        log.info("Debug: target is now running" if state else "Debug: target has halted")
        g_is_running = state 
    if not g_is_running:
        cache_onStop()
    return g_is_running

def on_after_reset(): 
    if not settings.getBool("arm.use_vtor", False):
        return
    vtor_name  = settings.getString("arm.vtor_adr", "0")

    vtor = -1
    try:
        vtor = int(vtor_name,0)
    except:
        try:
            vtor=deb.GetSymbolAddress(vtor_name)
        except:
            log.error("Debug: failed to compute location of VTOR")
            return
    load_vtor(vtor) 
    pass

def load_vtor(adr):
    try:
        dev.WriteReg64(arm.PC,dev.Read32(adr + 4))
        dev.WriteReg64(arm.SP,dev.Read32(adr))
    except:
        log.error("Debug: failed to set PC and SP to vtor[0] and vtor[4], with vtor=0x%08x" % adr)


def on_program_done():
    on_after_reset()

def _reset_target(): 
    reset_and_halt()

def _end_debug_session(): 
    run_target()
    dev.Disconnect()

def _hold_in_reset(): 
    global target_was_reset
    global has_reset
    if not has_reset:
        alt_hold_in_reset()
        return
    log.info("Prog: Hold in reset")
    try:
        dev.SetInterface(dev.SWD if comm_iface else dev.JTAG)
    except:
        dev.Connect(comm_iface, comm_speed)
    dev.Pins(0, dev.RESET, 1000)
    target_was_reset = True
    # do not dev.Disconnect() . The debugger needs to stay connected to actively keep the reset line low.

def alt_hold_in_reset(): 
    # Alternative if RESET pin is not connected to debugger
    log.info("Prog: Hold in reset , no reset line")
    dev.Connect(comm_iface, comm_speed)
    reset_and_halt()

def _release_from_reset():
    global target_was_reset,reset_delay
    global has_reset
    if target_was_reset:
        return
    if not has_reset:
        log.info("Prog: Release from reset (soft reset)")
        dev.Connect(comm_iface, comm_speed)
        reset_and_halt()
        run_target()
        return

    log.info("Prog: Release from reset (float reset line)")

    # toggle reset line
    try:
        dev.SetInterface(dev.SWD if comm_iface else dev.JTAG)
    except:
        dev.Connect(comm_iface, comm_speed)
    dev.Pins(0, dev.RESET, 1000)
    dev.Delay(reset_delay)
    dev.Pins(dev.RESET, dev.RESET, 1000)  # now float reset back
    dev.Delay(reset_delay)
    target_was_reset = True
    try:
        dev.Disconnect() #we are done with the part
    except:
        pass

def alt_release_from_reset():
    log.info("Prog: Release from reset, no reset line")
    dev.Connect(comm_iface, comm_speed)
    dev.Write32(dev.AIRCR, 0x05fa0004)  # VECTKEY | SYSRESETREQ

def set_sw_bp_gen(address, erase_size, instruction, flags):  #mplab
    global erase_as_needed
    log.debug("Debug: set/reset bp at address 0x%0x, store instructions 0x%0x, flags = 0x%0x" % (address, instruction, flags))
    if address >= 0x20000000:
        erase_size = 4 
    else:
        clear_and_report_flash_error()


    erase_page_start = address & ~(erase_size-1)
    address_in_erase_page = address & (erase_size-1)

    data = bytearray(erase_size)
    cache_invalidateInstrCache()
    dev.Read(erase_page_start, data, 0, erase_size)
    return_value = data[address_in_erase_page] | (data[address_in_erase_page+1] << 8)

    # Insert software breakpoint instruction in the data
    data[address_in_erase_page] = instruction & 0xFF
    data[address_in_erase_page+1] = (instruction >> 8) & 0xFF

    if erase_size == 4:
        dev.Write(erase_page_start, data, 0, erase_size)
    else:
        erase_as_needed = True
        prog_write("Pgm", erase_page_start, erase_size, data)
    return return_value

# device specific functions


def dap_Read8(adr):
    return dev.Read8(adr)

def dap_Write8(adr,val):
    return dev.Write8(adr,val)

def dap_Read16(adr):
    return dev.Read16(adr)

def dap_Write16(adr,val):
    return dev.Write16(adr,val)

def dap_Read32(adr):
    return dev.Read32(adr)

def dap_Write32(adr,val):
    return dev.Write32(adr,val)

def dap_Read(adr,b,o,l):
    return dev.Read(adr,b,o,l)

def cache_invalidate():
    if "G55" in device:
        dev.Write32(0x4003C020,1)
    elif "SAM4" in device:
        dev.Write32(0x4007C020,1)

def cache_onDebugStart():
    cache_invalidate()
def cache_onStop():
    cache_invalidate()
def cache_onRun():
    pass    
def cache_onDataRead(adr,size):
    pass #done in onStop
def cache_onDataWrite(adr,size):
    pass #done in onStop
def cache_invalidateInstrCache():
    pass #done in onStop
efc_cmd_wp   = 0x5a000001
efc_cmd_ewp  = 0x5a000003
efc_cmd_ea   = 0x5a000005
efc_cmd_epa  = 0x5a000007
efc_cmd_slb  = 0x5a000008
efc_cmd_clb  = 0x5a000009
efc_cmd_glb  = 0x5a00000a
efc_cmd_sgpb = 0x5a00000B
efc_cmd_cgpb = 0x5a00000C
efc_cmd_ggpb = 0x5a00000D


if "RH7" in device:
    FLASH_START = 0x10000000
    PAGE_SIZE = 256
    PAGE_PER_LOCKBIT = 1
    GPNVM_BIT_MASK = 0x0FFFFFFF0FFFFFFF0FFFFFFF00000702L   # Bit mask for user changeable GPNVM bits
    chipid = 0x40100000  # HEFC CHIPID register
    efc_fmr  = 0x40004000  # HEFC Flash Mode Register
    efc_fcr  = 0x40004004  # HEFC Flash Command Register
    efc_fsr  = 0x40004008  # HEFC Flash Status Register
    efc_frr  = 0x4000400c  # HEFC Flash Result Register
    efc_fpmr = 0x40004040  # HEFC Flash Power Management Register
    efc_wpmr = 0x400040e4  # HEFC Write Protection Mode Register
    efc_cmd_ep = 0x5a000006  # available on SAMRH7, but not available on Canopus (SAME70, S70, V70/71)
    rstc_cr = 0x40100200
    rstc_sr = 0x40100204
    rstc_mr = 0x40100208
elif "M7" in architecture:
    FLASH_START = 0x0400000
    PAGE_SIZE = 512
    PAGE_PER_LOCKBIT = 32
    GPNVM_BIT_MASK = 0x183 # Bit mask for user changeable GPNVM bits
    chipid = 0x400e0940  # EEFC CHIPID register
    efc_fmr  = 0x400e0c00  # EEFC Flash Mode Register
    efc_fcr  = 0x400e0c04  # EEFC Flash Command Register
    efc_fsr  = 0x400e0c08  # EEFC Flash Status Register
    efc_frr  = 0x400e0c0c  # EEFC Flash Result Register
    efc_wpmr = 0x400e0ce4  # EEFC Write Protection Mode Register
    efc_cmd_ewp = 0x5a000003  # available on Canopus (SAME70, S70, V70/71), but not available on SAMRH7
    efc_cmd_ewpl = 0x5a000004  # available on Canopus (SAME70, S70, V70/71), but not available on SAMRH7
    rstc_cr = 0x400e1800
    rstc_sr = 0x400e1804
    rstc_mr = 0x400e1808
else: #sam3 and sam4 devices 
    FLASH_START = 0x0400000
    PAGE_SIZE = 512
    PAGE_PER_LOCKBIT = 16
    GPNVM_BIT_MASK = 0x183 # Bit mask for user changeable GPNVM bits
    chipid = 0x400e0740  # EEFC CHIPID register
    efc_fmr  = 0x400e0a00  # EEFC Flash Mode Register
    efc_fcr  = 0x400e0a04  # EEFC Flash Command Register
    efc_fsr  = 0x400e0a08  # EEFC Flash Status Register
    efc_frr  = 0x400e0a0c  # EEFC Flash Result Register
    rstc_cr = 0x400e1400
    rstc_sr = 0x400e1404
    rstc_mr = 0x400e1408

def log_efc_fsr_error(fsr):
    err_string = ""
    if "M7" in architecture:
        if fsr & 0x00080000: # FSR_MECCEMSB
            err_string = "MECCEMSB"
        if fsr & 0x00040000: # FSR_UECCEMSB
            err_string += " UECCEMSB"
        if fsr & 0x00020000: # FSR_MECCELSB
            err_string += " MECCELSB"
        if fsr & 0x00010000: # FSR_UECCELSB
            err_string += " UECCELSB"
        if fsr & 0x10: # FSR_WREER
            err_string += " WREER"
    if fsr & 8: # FSR_FLERR
        err_string += " FLERR"
    if fsr & 4: # FSR_FLOCKE
        err_string += " FLOCKE"
    if fsr & 2: # FSR_FCMDE
        err_string += " FCMDE"
    if err_string == "":
        return
    err_string = "Flash controller error " + err_string 
    raise Exception(err_string)

def waitForFlashReady():
    n = 0
    max_retries = 100
    delay = 1000
    while n < max_retries:
        r = dev.Read32(efc_fsr)
        log_efc_fsr_error(r)
        if r & 1: # FSR_FRDY:
            break
        if n > 5:
            delay = 100000 # 100ms
        dev.Delay(delay) 
        n = n+1
    if n == max_retries:
        raise Exception("Timeout waiting for flash ready")

def bitsInByte(byteValue):
    for i in xrange(8):
        yield (byteValue >> i) & 1

def eefc_cmd(cmd):
    dev.Write32(efc_fcr, cmd)
    waitForFlashReady()

def write_config(address, length, data):
    log.info("Prog: write_config at address 0x%0X, length 0x%0X" % (address, length))
    # Converting value to indexing access, and writing one GPNVM bit at the time
    if address == 0xD0000000:
        bit_index = 0
        for val in data:
            for bit in bitsInByte(val):
                if((GPNVM_BIT_MASK >> bit_index) & 1):
                    if(bit == 1):
                        log.info("Debug: Setting GPNVM bit %d" % bit_index)
                        eefc_cmd( efc_cmd_sgpb | (bit_index << 8))
                    else:
                        log.info("Debug: Clearing GPNVM bit %d" % bit_index)
                        eefc_cmd( efc_cmd_cgpb | (bit_index << 8))
                bit_index += 1
    elif address == 0xD0000004 or "RH7" in device and address == 0xD0000010:
        bit_index = 0
        for val in data:
            for bit in bitsInByte(val):
                if (bit == 1):
                    log.info("Debug: Setting Lock bit %d" % bit_index)
                    eefc_cmd( efc_cmd_slb | (bit_index * PAGE_PER_LOCKBIT << 8))
                else:
                    log.info("Debug: Clearing Lock bit %d" % bit_index)
                    eefc_cmd( efc_cmd_clb | (bit_index * PAGE_PER_LOCKBIT << 8))
                bit_index += 1

def read_config(address, length, data):
    log.info("Prog: read_config at address 0x%0X, length 0x%0X" % (address, length))
    if address == 0xD0000000:
        eefc_cmd(efc_cmd_ggpb)
    elif address == 0xD0000004 or "RH7" in device and address == 0xD0000010:
        eefc_cmd(efc_cmd_glb)
        
    for read_index in range(data.__len__()):
        if read_index % 4 == 0:
            read_data = dev.Read32(efc_frr)
            log.info("Prog: Config bits at address 0x%0X, value: 0x%0X" % (address, read_data))
        data[read_index] = 0xFF & read_data
        read_data = read_data >> 8

def _handle_security_flags(address, length, data): 
    return False

def _begin_programming_operation():
    dev.Connect(comm_iface, comm_speed)
    reset_and_halt() 

def _read_device_id():
    return dev.Read32(chipid)

def halt_or_raise():
    halt_target()
    n = 0
    while n < 5:
        if not is_target_running():
            return
        dev.Delay(100000) # 100ms
        n = n+1
    raise Exception("Failed to halt target!")

def resetPeripheralsWithRstc():
    dev.Write32(rstc_mr, 0xa5000b00) # long(RSTC_KEY) | rstc_erstl)
    if "SAMG5" in device:
        dev.Write32(rstc_cr, 0xa5000004)  # long(RSTC_KEY) | PERRST)
    else:
        dev.Write32(rstc_cr, 0xa5000001)  # long(RSTC_KEY) | PROCRST)

    n = 0
    max_retries = 100
    while n < max_retries:
        dev.Delay(10000)  # 10ms
        r = dev.Read32(rstc_sr)
        if r & 0x00020000: # SRCMP
            continue  # Software reset in progress
        if r & 0x00010000: # NRSTL
            break
        n = n+1

    if n == max_retries:
        raise Exception("timeout in reset")

    dev.Write32(rstc_mr, 0xa5000001) # long(RSTC_KEY) | URSTEN) # Enable user reset again (URSTEN == 1)


def _erase():
    global erase_as_needed

    try:
        eefc_cmd(efc_cmd_ea)
    except Exception, e:
        r = dev.Read32(efc_fsr)
        if r & 4 :  # lock error
            if "RH7" in device:
                for i in range(32):
                    eefc_cmd(0x5a000009 | (i*256))
                eefc_cmd(efc_cmd_ea)
            else:
                raise e

    erase_as_needed = False # tell prog_write not to erase rows prior to write


def reset_and_halt():
    log.info("Prog: Reset and halt")
    # check run state and clear S_RESET_ST so that we can use it to detect end of reset later
    halt_or_raise()

    dev.Write32(arm.DEMCR, 0x01000001) # TRCENA | VC_CORERESET) 

    if "RH7" in device:
        # SAMRH7 use SYSRESETREQ to reset core + peripherals, will loose connection so need to reconnect.
        try:
            dev.Write32(arm.AIRCR, 0x05fa0004) # VECTKEY | SYSRESETREQ)  # 1=VECTRESET 4=SYSRESETREQ
        except:
            log.info("Reset with SYSRESETREQ, lost connection, try to reconnect to the device")
        dev.Disconnect()
        dev.Connect(comm_iface, comm_speed)
    else:
        # Canopus use RSTC (PROCRST) to reset peripherals and VECTRESET to reset core.
        resetPeripheralsWithRstc()
        dev.Write32(arm.AIRCR, 0x05fa0001) # VECTKEY | VECTRESET)  # 1=VECTRESET 4=SYSRESETREQ

    n = 0
    max_retries = 100
    seenReset = False
    while n < max_retries:
        dhcsr = dev.Read32(arm.DHCSR)
        #log.info("S_RESET_ST = %s / %s at PC = %X" % ("1" if dhcsr & 0x02000000 else "0", "Halted" if dhcsr & 0x20000 else "RUNNING", get_pc()))
        if (dhcsr & 0x02000000): # wait for S_RESET_ST
            seenReset = True
        hasHalted = 0 != (dhcsr & 0x20000) # S_HALT
        if seenReset:
            if hasHalted:  # wait for S_HALT
                break
        dev.Delay(100000) # 100ms
        n = n+1
    dev.Write32(dev.DEMCR, 0x01000000) # TRCENA reset VC_CORERESET bit
    if n == max_retries:
        raise Exception("Timeout in reset")

    if "RH7" in device:
        initialize_HEFC()
    
def write_flash_page(adr, ofs, data, cmd):
    log.debug("Write flash page adr=0x%0x, ofs=0x%0x" % (adr, ofs))
    dev.Write(adr, data, ofs, PAGE_SIZE)
    if "RH7" in device:
        page_number = adr & 0x3fff00 # SAMRH7 has page_size 256
    else:
        page_number = (adr & 0x3ffe00)/2 # Canopus has page_size 512
    eefc_cmd(cmd | page_number)
    log.debug("Written page %d (0x%0x) at 0x%0x" % (page_number/256, page_number*2, adr))

def _prog_write_internal(type_of_mem, address, length, data): 
    global erase_as_needed
    if str(type_of_mem) == "Cfg":
        write_config(address, length, data)
        return  # This should never be reached...
    elif str(type_of_mem) != "Pgm":
        dev.Write(address, data, 0, length)
        return

    if "RH7" not in device: # SAMRH7 don't support wait states (ref prelim data sheet)
        # Set Flash Wait States to 7 cycles (6+1)
        dev.Write32(efc_fmr, 0x00000600)

    _flash_write( address, length, data, erase_as_needed)
    erase_as_needed = True  # only the first Prg write is allowed without an erase

def _flash_write(address, length, data, doerase):
    written = 0

    if "RH7" in device:
        # note that this code expects length to be a multiple of PAGE_SIZE
        while written < length:
            page_number = address & 0x3fff00 # SAMRH7 has page_size 256
            # Erase and write page (two separate commands on SAMRH7)
            if doerase:  
                eefc_cmd(efc_cmd_ep | page_number)
            write_flash_page(address,written,data,efc_cmd_wp)
            written += PAGE_SIZE
            address += PAGE_SIZE
        return

    while written < length:
        if (address & (FLASH_START-1)) < (2 * 8 * 1024):
            buffer_size = PAGE_SIZE
            cmd = efc_cmd_ewp if doerase else efc_cmd_wp
        else:
            if doerase:
                #erase 16 pages
                addr = address & 0x003FF000 #isolate page number
                eefc_cmd(efc_cmd_epa | (addr >> 1) | 0x200)
            cmd = efc_cmd_wp
            buffer_size = PAGE_SIZE * 16

        write_len = min(length - written, buffer_size)
        while write_len > 0:
            write_flash_page(address, written, data, cmd)
            written += PAGE_SIZE
            address += PAGE_SIZE
            write_len -= PAGE_SIZE

def _prog_read_internal(type_of_mem, address, length, data):    
    if str(type_of_mem) == "Cfg":
        read_config(address, length, data)
        return
    dev.Read(address, data, 0, length)

def _end_of_operations():
    log.info("Prog: End of operations")
    run_target()
    dev.Disconnect()

def get_sp():
    return dev.ReadReg64(arm.SP)

def set_sp(sp):
    log.info("Debug: Set sp to 0x%0x" % sp)
    dev.WriteReg64(arm.SP, sp)

def clear_and_report_flash_error():
    try:
        waitForFlashReady()
    except:
        log.error("NVM controller is in an error state while setting a swbp. Clearing the error")

def set_sw_bp(address, instruction, flags):
    if (address & (FLASH_START-1)) < 16384 or "RH7" in device:
        return set_sw_bp_gen(address, PAGE_SIZE,instruction,flags)
    return set_sw_bp_gen(address, 16*PAGE_SIZE, instruction, flags)

target_was_reset = False

def begin_communication_session(): #mplab
    log.info("Begin comm session")
    _begin_communication_session()

def end_communication_session(): #mplab
    log.info("End comm session")
    _end_communication_session()

def begin_programming_operation(): #mplab
    log.info("Begin operations")
    _begin_programming_operation()

def erase(): #mplab
    log.info("Erase")
    _erase()

def prog_write(type_of_mem, address, length, data): #mplab
    log.info("Writing %08x bytes to address 0x%08x of %s memory" % (length, address, type_of_mem))
    _prog_write(type_of_mem, address, length, data)

def prog_read(type_of_mem, address, length, data): #mplab
    log.info("Reading %08x bytes from address 0x%08x of %s memory" % (length, address, type_of_mem))
    _prog_read(type_of_mem, address, length, data)

def end_of_operations():#mplab
    log.info("End of operations")
    _end_of_operations()

def begin_debug_session():  #mplab
    log.info("Debug: Init debug session")
    _begin_debug_session()

def debug_read(mt, start, length, data):  #mplab
    log.info("Debug: Reading %08x bytes at start address 0x%08x (%s)" % (length, start, mt))
    _debug_read(mt, start, length, data)

def debug_write(mt, start, length, data):  #mplab
    log.info("Debug: Writing %08x bytes at start address 0x%08x (%s)" % (length, start, mt))
    _debug_write(mt, start, length, data)

def set_pc(pc):  #mplab
    log.info("Debug: set pc to 0x%08x" % pc)
    _set_pc(pc)

def get_pc():  #mplab
    pc = _get_pc()
    log.info("Debug: get_pc PC=0x%08x" % pc)
    return pc

def run_target():#mplab
    log.info("Debug: run target")
    _run_target()

_stealth_runstate = 2
def halt_target():  #mplab
    global _stealth_runstate    
    log.info("Debug: halt target")
    _stealth_runstate = 2  # cancels stealth mode
    _halt_target()

def step_target():  #mplab
    log.info("Debug: stepping at pc 0x%08x" % get_pc())
    _step_target()

def reset_target(): #mplab
    log.info("Debug: reset")
    _reset_target()
    on_after_reset() # call autoload hook

def is_target_running():#mplab
    global _stealth_runstate
    if _stealth_runstate == 2:
        return _is_target_running()
    return _stealth_runstate != 0

def on_after_reset(): 
    if not settings.getBool("arm.use_vtor", False):
        return
    vtor_name  = settings.getString("arm.vtor_adr", "0")

    vtor = -1
    try:
        vtor = int(vtor_name,0)
    except:
        try:
            vtor=deb.GetSymbolAddress(vtor_name)
        except:
            log.error("Debug: failed to compute location of VTOR")
            return
    load_vtor(vtor) 
    pass

def load_vtor(adr):
    try:
        pc = dev.Read32(adr + 4)
        sp = dev.Read32(adr)
        set_pc(arm.PC,pc)
        dev.WriteReg64(arm.SP,sp)
        log.info("Setting pc=%08x and sp=%08x" % (pc, sp))
    except:
        log.error("Debug: failed to set PC and SP to contents of exception_table")

def on_program_done():
    on_after_reset()

def end_debug_session():  #mplab
    log.info("Debug: End debug session")
    _end_debug_session()

def verify_transfer(type_of_mem, address, data, length):  #mplab
    log.info("Verifying %08x bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    _verify_transfer(type_of_mem, address, data, length)

    

def _verify_transfer(type_of_mem, address, data, length):
    if len(data) != length:
        raise Exception("The given data and length mismatch")
    d = bytearray(length)
    prog_read(type_of_mem, address, length, d)
    if str(type_of_mem) == "Cfg":
        verify_config(address, data, d, "verify")
    else:
        for i in range(length):
            if data[i] != d[i]:
                raise Exception("Verify failed for mem type {}, at address 0x{:X}".format(str(type_of_mem), address + i))

global dev_cfg_masks_bytearray
dev_cfg_masks_bytearray = None

def init_masks_as_bytearray():
    global dev_cfg_masks_bytearray
    if dev_cfg_masks_bytearray:
        return
    dev_cfg_masks_bytearray = {}
    for address, val in dev_cfg_masks.items():
        dev_cfg_masks_bytearray[address    ] = int(val      ) & 0xFF
        dev_cfg_masks_bytearray[address + 1] = int(val >> 8 ) & 0xFF
        dev_cfg_masks_bytearray[address + 2] = int(val >> 16) & 0xFF
        dev_cfg_masks_bytearray[address + 3] = int(val >> 24) & 0xFF

def verify_config(address, expected, actual, error_string_prefix):
    try:
        # older versions of MPLAB X (<=v5.45) did not pass dev_cfg_masks
        # so very_config cannot be executed
        dev_cfg_masks 
    except Exception, e:
        raise Exception("{} config is not implemented".format(error_string_prefix))
    init_masks_as_bytearray()

    for index, actual_val in enumerate(actual):
        current_address = address + index
        if current_address in dev_cfg_masks_bytearray:
            mask = dev_cfg_masks_bytearray[current_address]
            expected_val = expected[index] & mask
            actual_val &= mask
            if actual_val != expected_val:
                error_string = "{} failed at address 0x{:0X}, expected 0x{:0X}, got 0x{:0X}".format(error_string_prefix, current_address, expected_val, actual_val)
                raise Exception(error_string)

def is_memory_blank_all_ffs(type_of_mem):
    return str(type_of_mem) == "Pgm" or str(type_of_mem) == "UserID"
        
def blank_check():  #mplab
    log.info("Blank check")

def blank_check_mem(type_of_mem, address, length):  #mplab
    msg.print("Blank checking %08x bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    _blank_check_mem(type_of_mem, address, length)

def _blank_check_mem(type_of_mem, address, length):
    data = bytearray(length)
    prog_read(type_of_mem, address, length, data)
    if str(type_of_mem) == "Cfg":
        prog_read(type_of_mem, address, length, data)
        verify_config(address, data, data, "blank check")
    elif is_memory_blank_all_ffs(type_of_mem):
        for index, x in enumerate(data):
            if x != 255:
                raise Exception("Blank failed for mem type {}, at address 0x{:X}".format(str(type_of_mem), address + index))
    else:
        log.error("Blank check, ignoring {}".format(str(type_of_mem)))

def hold_in_reset():  #mplab
    log.info("Hold in reset")
    _hold_in_reset()

def release_from_reset():  #mplab
    log.info("Release from reset")
    _release_from_reset()
    
def read_device_id():#mplab
    log.info("Read device ID")
    return _read_device_id()

import os
has_samba = os.path.isfile(os.path.join("handlers","samba.py"))
if has_samba:
    from handlers import samba
from xml.dom import minidom


class MemHandlers():
    def __init__(self, board_file):
        if has_samba:
            samba.log = log
            samba.msg = msg
            samba.dev = dev
            samba.is_target_running = is_target_running
            samba.run_target = run_target
            samba.architecture = architecture
            samba.arm = arm
        self.parse_board_file(board_file)

    def parse_board_file(self, board_file):
        self.handlers = []
        xmldoc = minidom.parse(board_file)
        rangeNodes = xmldoc.getElementsByTagName("range")
        for rangeNode in rangeNodes:
            start = int(rangeNode.getAttribute("start"), 0)
            end = int(rangeNode.getAttribute("end"), 0)
            type = rangeNode.getAttribute("type")
            config = {}
            for configNode in rangeNode.childNodes:
                if configNode.nodeType == configNode.ELEMENT_NODE:
                    try:
                        config[configNode.tagName] = int(configNode.firstChild.nodeValue, 0)
                    except:
                        config[configNode.tagName] = ide.expandProjectMacros("${ProjectName}", configNode.firstChild.nodeValue).replace("\\", os.path.sep)
            if type == "samba" and has_samba:
                self.handlers.append(samba.Samba(start, end, config))
            elif type == "user":
                self.handlers.append(UserHandler(start, end, config))

    def prog_write(self, type_of_mem, address, length, data):
        log.info("Prog: Writing %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
        remainings = [[address, address + length]]
        for handler in self.handlers:
            write_start = max(address, handler.range_start)
            write_end = min(address + length, handler.range_end)
            if write_start < write_end:
                # chop the data buffer and pass it to handler and run
                handler.write(write_start, data[write_start - address: write_end - address])
            new_remainings = []
            for remaining in remainings:
                write_start = max(remaining[0], handler.range_start)
                write_end = min(remaining[1], handler.range_end)
                if remaining[0] < write_start < remaining[1]:
                    new_remainings.append([remaining[0], write_start])
                if remaining[0] < write_end < remaining[1]:
                    new_remainings.append([write_end, remaining[1]])
                elif write_start < write_end < remaining[0] or remaining[1] < write_start < write_end or write_start > write_end:
                    new_remainings.append(remaining)
            remainings = new_remainings
        # now write to memory ranges that are not covered by handlers
        for remaining in remainings:
            _prog_write_internal(type_of_mem, remaining[0], remaining[1] - remaining[0], data[remaining[0] - address: remaining[1] - address])

    def prog_read(self, type_of_mem, address, length, data):
        log.info("Prog: Reading %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
        remainings = [[address, address + length]]
        for handler in self.handlers:
            read_start = max(address, handler.range_start)
            read_end = min(address + length, handler.range_end)
            if read_start < read_end:
                # chop the data buffer and pass it to handler and run
                buffer = bytearray(read_end - read_start)
                handler.read(read_start, buffer)
                data[read_start - address: read_end - address] = buffer
            new_remainings = []
            for remaining in remainings:
                read_start = max(remaining[0], handler.range_start)
                read_end = min(remaining[1], handler.range_end)
                if remaining[0] < read_start < remaining[1]:
                    new_remainings.append([remaining[0], read_start])
                if remaining[0] < read_end < remaining[1]:
                    new_remainings.append([read_end, remaining[1]])
                elif read_start < read_end < remaining[0] or remaining[1] < read_start < read_end or read_start > read_end:
                    new_remainings.append(remaining)
            remainings = new_remainings
        # now write to memory ranges that are not covered by handlers
        for remaining in remainings:
            _prog_read_internal(type_of_mem, remaining[0], remaining[1] - remaining[0], data[remaining[0] - address: remaining[1] - address])


class UserHandler():
    def __init__(self, range_start, range_end, config):
        self.range_start = range_start
        self.range_end = range_end
        self.config = config

    def call(self, address=0, data=None):
        if "handler_name" in self.config.keys():
            eval(self.config["handler_name"])()
        else:
            log.info("The name of handler function is missing")


def _prog_write(type_of_mem, address, length, data):
    global mem_handlers
    if mem_handlers is None:
        _prog_write_internal(type_of_mem, address, length, data)
    else:
        mem_handlers.prog_write(type_of_mem, address, length, data)


def _prog_read(type_of_mem, address, length, data):
    global mem_handlers
    if mem_handlers is None:
        _prog_read_internal(type_of_mem, address, length, data)
    else:
        mem_handlers.prog_read(type_of_mem, address, length, data)

