# This file is autogenerated
comm_speed=2000000

def reset_peripherals():
    dev.WriteReg64(8, 0xd3)              # Disable all interrupts and go to supervisor mode
    dev.Write32(0xF8048000, 0xA5000004)  # Reset peripherals (using RSTC_CR)
    dev.Write32(0x00A00100, 0x0)         # Reset L2 Cache controller
    dev.Write32(0xF8048044, 0x00008000)  # Disable Watchdog (using WDT_MR)


printDebug = False     # set to True to print diagnostic info
logLevel = 0           # set to 1 to print diagnostic info

# The l_ variables are reinitialized at every debug session. They are used locally in this script and should not be overriden in autoload.py
l_use_bootstrap = 0
l_bootstrap_entry = -1
l_app_entry = -1
l_bootstrap_bin = ""
l_bootstrap_load = -1

def mplab_chooseBootstrap(self):
    project_dir = ide.expandProjectMacros("${ProjectName}", "${ProjectDir}")
    pdl = len(project_dir)
    fileChooser = JFileChooser(project_dir)
    retval = fileChooser.showOpenDialog(None)
    if retval == JFileChooser.APPROVE_OPTION:
        f = fileChooser.getSelectedFile().getPath()
        if 0==f.find(project_dir):
            f="${ProjectDir}" + f[pdl:]
        bsOpt.binTxt.text= f
        log.info("Selected bootstrap: " + f)
        settings.setString("boot.path", f)

from javax.swing import JPanel, JLabel , JTextField, BoxLayout, JCheckBox, JButton,JFileChooser,GroupLayout
from java.awt import BorderLayout
class BootstrapPane():
    
    def __init__(self):
        self.panel = JPanel()
        self.panel.setLayout(BorderLayout())
        
        self.pane = JPanel()
        self.initUI()

    def initUI(self):
    
        layout = GroupLayout(self.pane)
        self.pane.setLayout(layout)
        layout.setAutoCreateGaps(True)
        layout.setAutoCreateContainerGaps(True)

        bc = settings.getBool("boot.use", False)
        self.useBs = JCheckBox("Use bootstrap",bc)
        binLabel = JLabel("Bootstrap file: ")
        self.binTxt = JTextField()
        self.binTxt.text = settings.getString("boot.path", "")
        self.binBtn = JButton("Load", actionPerformed=mplab_chooseBootstrap)

        entryLabel = JLabel("Bootstrap entry address (if bin): ")
        self.entryTxt = JTextField()
        self.entryTxt.text = settings.getString("boot.entry_adr", "")
        
        prjLabel = JLabel("Bootstrap project: ")
        self.prjTxt = JTextField()
        self.prjTxt.text = settings.getString("boot.prj", "")
        
        loadLabel=JLabel("Bootstrap load address (if bin): ")

        self.loadTxt = JTextField()
        self.loadTxt.text = settings.getString("boot.load_adr", "")

        layout.setHorizontalGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup()
                .addComponent(self.useBs)
                .addComponent(prjLabel)
                .addComponent(binLabel)
                .addComponent(entryLabel)
                .addComponent(loadLabel)
                )
            .addGroup(layout.createParallelGroup()
#                .addComponent(self.useBs)
                .addComponent(self.prjTxt)
                .addComponent(self.binTxt)
                .addComponent(self.entryTxt)
                .addComponent(self.loadTxt)
                )
            .addGroup(layout.createParallelGroup()
                .addComponent(self.binBtn)
            )
        )

        layout.setVerticalGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup()
                .addComponent(self.useBs)
            )
            .addGroup(layout.createParallelGroup()
                .addComponent(prjLabel)
                .addComponent(self.prjTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)
            )
            .addGroup(layout.createParallelGroup()
                .addComponent(binLabel)
                .addComponent(self.binTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)
                .addComponent(self.binBtn)
                )
            .addGroup(layout.createParallelGroup()
                .addComponent(entryLabel)
                .addComponent(self.entryTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)
            )
            .addGroup(layout.createParallelGroup()
                .addComponent(loadLabel)
                .addComponent(self.loadTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)
            )
        )
        self.panel.add(self.pane,BorderLayout.CENTER)

    def getPanel(self):
        return self.panel

bsOpt = None
def mplab_configure_Bootstrap(confName):
    global bsOpt
    if bsOpt == None:
        bsOpt=BootstrapPane()
    return bsOpt.getPanel()

def save_mplab_configure_Bootstrap(confName):
    global bsOpt
    if bsOpt == None:
        return

    settings.setString("boot.path", bsOpt.binTxt.getText())
    settings.setString("boot.prj", bsOpt.prjTxt.getText())
    settings.setString("boot.load_adr", bsOpt.loadTxt.getText())
    settings.setString("boot.entry_adr", bsOpt.entryTxt.getText())      
    settings.setString("boot.use",  "true" if bsOpt.useBs.isSelected() else "false")

def onShowPropsDFP2(t):
    ide.addPropCategory(t,"diagnostics" , "*|programoptions", "Diagnostics")
    ide.addBooleanProperty(t,"script.show_output" , "*|diagnostics|*","Output diagnostic logging","Show diagnostic text in the Output window", False)
    ide.addTextProperty(t,"script.log_level" , "*|diagnostics|*","Diagnostic log level","Set diagnostic level (usually 0 1 or 3)", "0")

def begin_communication_session():  # mplab
    global logLevel,printDebug
    logLevel  = settings.getNumeric("script.log_level",logLevel)
    printDebug= settings.getBool("script.show_output",printDebug)
    dev.SetApiLogging(logLevel)
    log.setShowOutput(printDebug)
    
    global comm_speed,comm_iface
    comm_iface = settings.getString("communication.interface", "swd") == "swd"
    comm_speed = settings.getNumeric("communication.frequency", comm_speed)
    dev.Connect(comm_iface, comm_speed)
    halt_target()
    reset_peripherals()
     
    global l_use_bootstrap, l_app_entry, l_bootstrap_entry, l_bootstrap_bin, l_bootstrap_load
    l_use_bootstrap = settings.getBool("boot.use",False)
    l_bootstrap_bin = settings.getString("boot.path","")  
    prj = settings.getString("boot.prj","")
    if prj == "":
        prj="${ProjectName}"
    if l_use_bootstrap:
        l_bootstrap_bin = ide.expandProjectMacros(prj,l_bootstrap_bin)

    # handle legacy way of setting variables
    try:
        l_use_bootstrap = True if g_mpu_config['type'] == 'application'  else False
        l_app_entry = g_mpu_config['entry_addr']
        if l_use_bootstrap:
            l_bootstrap_load = l_bootstrap_entry = g_mpu_config['bootstrap_entry_addr']
            l_bootstrap_bin  = g_mpu_config['bootstrap_bin_path']
    except:
        pass
    
    if l_app_entry == -1:
        l_app_entry = deb.GetSpecialSymbolAddress("__entry_address")
    if l_use_bootstrap != 0:
        load_and_run_bootstrap(l_bootstrap_bin)
    deb.Connect()


def erase():  # mplab
    log.info("Prog: erase")


def prog_write(type_of_mem, address, length, data):  # mplab
    log.info("Prog: Writing %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    dev.Write(address, data, 0, length)


def prog_read(type_of_mem, address, length, data):  # mplab
    log.info("Prog: Reading %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    dev.Read(address, data, 0, length)


def end_of_operations():  # mplab
    log.info("Prog: End of operations")


def begin_debug_session():  # mplab
    log.info("Debug: Init debug session")
    reset_target()

def get_pc():
    pc = dev.ReadReg64(arm.PC)
    log.info("Debug: get_pc PC=0x%08x" % pc)
    return pc


def run_target():  # mplab
    log.info("Debug: run target")
    dev.GoEx(1, 1)


def halt_target():  # mplab
    log.info("Debug: Halt target")
    dev.Halt()


def step_target():  # mplab
    log.info("Debug: stepping at pc 0x%08x" % get_pc())
    dev.Step()


def set_pc(pc):  # mplab
    log.info("Debug: set pc to 0x%08x" % pc)
    dev.WriteReg64(arm.PC, pc)


def reset_target():  # mplab
    global l_app_entry
    log.info("Debug: reset")
    if not dev.IsHalted():
        halt_target()
    dev.WriteReg64(arm.PC, l_app_entry)


g_is_running = True
def is_target_running():  # mplab
    global g_is_running

    state = dev.IsHalted()
    if state != g_is_running:
        log.info("Debug:: is_running %s" % state)
        g_is_running = state
    return 0 == g_is_running


def end_debug_session():  # mplab
    log.info("Debug: End debug session")
    dev.Disconnect()


def load_binary_file(f, a):
    with open(f, "rb") as fb:
        bootstrap_data = bytearray(fb.read())
    dev.Write(a, bootstrap_data, 0, len(bootstrap_data))

def writeBlock(adr,bytes,name):
    log.info("Section %s at %08x %d" % (name, adr,len(bytes)))
    dev.Write(adr,bytes,0,len(bytes))

def load_file_and_pc(binary_path):
    global l_bootstrap_entry, l_bootstrap_load
    bsLoad = l_bootstrap_load
    bsEntry = l_bootstrap_entry
    filetype = deb.PeekFileType(binary_path)
    if "hex" == filetype or "elf" == filetype:
        log.info("Debug: Loading %s" % binary_path)
        deb.EnumCodeBlocks(binary_path, "writeBlock")
        bsEntry = deb.PeekSymbolAddress(binary_path,"__entry_address",True)
    else:
        try:
            l = settings.getString("boot.load_adr","").strip()
            if l != "":
                bsLoad = int(l,0)
            l = settings.getString("boot.entry_adr","").strip()
            if l != "":
                bsEntry = int(l,0)
        except:
            raise Exception("You need to specify a numeric load address and entry point address for bootstrap %s" % binary_path)
        log.info("Debug: Loading %s as a binary file at address 0x%08x entry point 0x%08x" % (binary_path, bsLoad, bsEntry))             
        if bsLoad == -1 or bsEntry == -1:
            raise Exception("You need to specify a numeric load and entry address for %s" % binary_path)
        load_binary_file(binary_path,  bsLoad)
    set_pc(bsEntry)

def load_and_run_bootstrap(l_bootstrap_bin):
    try:
        f = open(l_bootstrap_bin, "rb")
        f.close()
    except:
        msg.msg("Failed to open bootstrap file " + l_bootstrap_bin, "Error")
        raise Exception("Failed to open bootstrap file")
    load_file_and_pc(l_bootstrap_bin)
    dev.GoEx(1, 1)
    dev.Delay(1000000)
    for i in range(10):
        if dev.IsHalted():
            log.info("Debug: boostrap has halted. Will load application.")
            return
        dev.Delay(100000)
    log.error("Debug: boostrap timed out")
    #raise Exception("bootstrap program did not halt ")


def debug_read(mem_type, start, length, data): # mplab
    log.info("Debug: Reading %d bytes at start address 0x%0x (%s)" % (length, start, mem_type))
    dev.Read(start, data, 0, length)


def debug_write(mem_type, start, length, data): # mplab
    log.info("Debug: Writing %d bytes at start address 0x%0x (%s)" % (length, start, mem_type))
    dev.Write(start, data, 0, length)
