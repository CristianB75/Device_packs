<?xml version="1.0" encoding="UTF-8"?>
<avr-tools-device-file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       schema-version="4.4"
                       xsi:noNamespaceSchemaLocation="../schema/avr_tools_device_file.xsd">
   <file timestamp="2018-10-01T10:50:03Z"/>
   <variants>
      <variant ordercode="CEC1702Q-C0-SX"
               package="WFBGA84"
               speedmax="48000000"
               tempmax="+70"
               tempmin="0"
               vccmax="3.465"
               vccmin="3.135"/>
      <variant ordercode="CEC1702Q-C0-7U"
               package="WFBGA64"
               speedmax="48000000"
               tempmax="+70"
               tempmin="0"
               vccmax="3.465"
               vccmin="3.135"/>
   </variants>
   <devices>
      <device name="CEC1702"
              architecture="CORTEX-M4"
              family="CEC1702"
              series="CEC1702Q">
         <address-spaces>
            <address-space id="base"
                           name="base"
                           start="0"
                           size="0x100000000"
                           endianness="little">
               <memory-segment name="CODE_SRAM"
                               start="0x000B0000"
                               size="0x68000"
                               type="ram"
                               rw="RW"
                               exec="true"/>
               <memory-segment name="DATA_SRAM"
                               start="0x00118000"
                               size="0x10000"
                               type="ram"
                               rw="RW"/>
               <memory-segment name="DATA_SRAM_ALIAS"
                               start="0x20000000"
                               size="0x10000"
                               type="ram"
                               rw="RW"/>
               <memory-segment name="EC_DEVICE_REGISTERS"
                               start="0x40000000"
                               size="0x10000"
                               type="io"
                               rw="RW"/>
               <memory-segment name="GPIO_REGISTERS"
                               start="0x40080000"
                               size="0x10000"
                               type="io"
                               rw="RW"/>
               <memory-segment name="HOST_DEVICE_REGISTERS"
                               start="0x400F0000"
                               size="0x10000"
                               type="io"
                               rw="RW"/>
               <memory-segment name="CRYPTO_RAM"
                               start="0x40100000"
                               size="0x6000"
                               type="ram"
                               rw="RW"/>
               <memory-segment name="SCS"
                               start="0xE000E000"
                               size="0x00001000"
                               type="io"
                               rw="RW"/>
               <memory-segment name="EXTERNAL_FLASH"
                               start="0x50000000"
                               size="0x8000000"
                               type="flash"
                               rw="RW"
                               external="true"
                               exec="true"/>
            </address-space>
            <address-space id="eeprom" name="eeprom" start="0" size="0x800"/>
         </address-spaces>
         <parameters>
            <param name="__CM4_REV" value="0x0100" caption="CM4 Core Revision"/>
            <param name="__MPU_PRESENT" value="1" caption="MPU present or not"/>
            <param name="__NVIC_PRIO_BITS"
                   value="3"
                   caption="Number of Bits used for Priority Levels"/>
            <param name="__Vendor_SysTickConfig"
                   value="0"
                   caption="Set to 1 if different SysTick Config is used"/>
            <param name="__VTOR_PRESENT"
                   value="1"
                   caption="Vector Table Offset Register present or not"/>
            <param name="__FPU_PRESENT" value="1"/>
            <param name="__ARCH_ARM" value="1"/>
            <param name="__ARCH_ARM_CORTEX_M" value="1"/>
            <param name="LITTLE_ENDIAN" value="1"/>
         </parameters>
         <peripherals>
            <module name="PCR" id="100" version="1.0">
               <instance name="PCR">
                  <register-group name="PCR"
                                  name-in-module="PCR"
                                  address-space="base"
                                  offset="0x40080100"/>
               </instance>
            </module>
            <module name="DMA_MAIN" id="85" version="1.0">
               <instance name="DMA_MAIN">
                  <register-group name="DMA_MAIN"
                                  name-in-module="DMA_MAIN"
                                  address-space="base"
                                  offset="0x40002400"/>
               </instance>
            </module>
            <module name="DMA_CHAN00" id="85" version="1.0">
               <instance name="DMA_CHAN00">
                  <register-group name="DMA_CHAN00"
                                  name-in-module="DMA_CHAN00"
                                  address-space="base"
                                  offset="0x40002440"/>
               </instance>
            </module>
            <module name="DMA_CHAN01" id="85" version="1.0">
               <instance name="DMA_CHAN01">
                  <register-group name="DMA_CHAN01"
                                  name-in-module="DMA_CHAN01"
                                  address-space="base"
                                  offset="0x40002480"/>
               </instance>
            </module>
            <module name="DMA_CHAN02" id="85" version="1.0">
               <instance name="DMA_CHAN02">
                  <register-group name="DMA_CHAN02"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x400024C0"/>
               </instance>
               <instance name="DMA_CHAN03">
                  <register-group name="DMA_CHAN03"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002500"/>
               </instance>
               <instance name="DMA_CHAN04">
                  <register-group name="DMA_CHAN04"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002540"/>
               </instance>
               <instance name="DMA_CHAN05">
                  <register-group name="DMA_CHAN05"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002580"/>
               </instance>
               <instance name="DMA_CHAN06">
                  <register-group name="DMA_CHAN06"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x400025C0"/>
               </instance>
               <instance name="DMA_CHAN07">
                  <register-group name="DMA_CHAN07"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002600"/>
               </instance>
               <instance name="DMA_CHAN08">
                  <register-group name="DMA_CHAN08"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002640"/>
               </instance>
               <instance name="DMA_CHAN09">
                  <register-group name="DMA_CHAN09"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002680"/>
               </instance>
               <instance name="DMA_CHAN10">
                  <register-group name="DMA_CHAN10"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x400026C0"/>
               </instance>
               <instance name="DMA_CHAN11">
                  <register-group name="DMA_CHAN11"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002700"/>
               </instance>
               <instance name="DMA_CHAN12">
                  <register-group name="DMA_CHAN12"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002740"/>
               </instance>
               <instance name="DMA_CHAN13">
                  <register-group name="DMA_CHAN13"
                                  name-in-module="DMA_CHAN02"
                                  address-space="base"
                                  offset="0x40002780"/>
               </instance>
            </module>
            <module name="ECIA" version="1.0">
               <instance name="ECIA">
                  <register-group name="ECIA"
                                  name-in-module="ECIA"
                                  address-space="base"
                                  offset="0x4000E000"/>
               </instance>
            </module>
            <module name="GCR" id="101" version="1.0">
               <instance name="GCR">
                  <register-group name="GCR"
                                  name-in-module="GCR"
                                  address-space="base"
                                  offset="0x400FFF00"/>
               </instance>
            </module>
            <module name="UART" id="39" version="1.0">
               <instance name="UART0">
                  <register-group name="UART0"
                                  name-in-module="UART"
                                  address-space="base"
                                  offset="0x400F2400"/>
               </instance>
               <instance name="UART1">
                  <register-group name="UART1"
                                  name-in-module="UART"
                                  address-space="base"
                                  offset="0x400F2800"/>
               </instance>
            </module>
            <module name="GPIO" id="26" version="1.0">
               <instance name="GPIO">
                  <register-group name="GPIO"
                                  name-in-module="GPIO"
                                  address-space="base"
                                  offset="0x40081000"/>
               </instance>
            </module>
            <module name="WDT" id="88" version="1.0">
               <instance name="WDT">
                  <register-group name="WDT"
                                  name-in-module="WDT"
                                  address-space="base"
                                  offset="0x40000000"/>
               </instance>
            </module>
            <module name="TIMER16" id="108a" version="1.0">
               <instance name="TIMER16_0">
                  <register-group name="TIMER16_0"
                                  name-in-module="TIMER16"
                                  address-space="base"
                                  offset="0x40000C00"/>
               </instance>
               <instance name="TIMER16_1">
                  <register-group name="TIMER16_1"
                                  name-in-module="TIMER16"
                                  address-space="base"
                                  offset="0x40000C20"/>
               </instance>
               <instance name="TIMER16_2">
                  <register-group name="TIMER16_2"
                                  name-in-module="TIMER16"
                                  address-space="base"
                                  offset="0x40000C40"/>
               </instance>
               <instance name="TIMER16_3">
                  <register-group name="TIMER16_3"
                                  name-in-module="TIMER16"
                                  address-space="base"
                                  offset="0x40000C80"/>
               </instance>
            </module>
            <module name="TIMER32" id="108b" version="1.0">
               <instance name="TIMER32_0">
                  <register-group name="TIMER32_0"
                                  name-in-module="TIMER32"
                                  address-space="base"
                                  offset="0x40000C80"/>
               </instance>
               <instance name="TIMER32_1">
                  <register-group name="TIMER32_1"
                                  name-in-module="TIMER32"
                                  address-space="base"
                                  offset="0x40000CA0"/>
               </instance>
            </module>
            <module name="CNT_TMR" id="69" version="1.0">
               <instance name="CNT_TMR0">
                  <register-group name="CNT_TMR0"
                                  name-in-module="CNT_TMR"
                                  address-space="base"
                                  offset="0x40000D00"/>
               </instance>
               <instance name="CNT_TMR1">
                  <register-group name="CNT_TMR1"
                                  name-in-module="CNT_TMR"
                                  address-space="base"
                                  offset="0x40000D20"/>
               </instance>
               <instance name="CNT_TMR2">
                  <register-group name="CNT_TMR2"
                                  name-in-module="CNT_TMR"
                                  address-space="base"
                                  offset="0x40000D40"/>
               </instance>
               <instance name="CNT_TMR3">
                  <register-group name="CNT_TMR3"
                                  name-in-module="CNT_TMR"
                                  address-space="base"
                                  offset="0x40000D60"/>
               </instance>
            </module>
            <module name="CCT" id="12" version="1.0">
               <instance name="CCT">
                  <register-group name="CCT"
                                  name-in-module="CCT"
                                  address-space="base"
                                  offset="0x40001000"/>
               </instance>
            </module>
            <module name="HTM" id="29" version="1.0">
               <instance name="HTM0">
                  <register-group name="HTM0"
                                  name-in-module="HTM"
                                  address-space="base"
                                  offset="0x40009800"/>
               </instance>
               <instance name="HTM1">
                  <register-group name="HTM1"
                                  name-in-module="HTM"
                                  address-space="base"
                                  offset="0x40009820"/>
               </instance>
            </module>
            <module name="RTOS" id="140" version="1.0">
               <instance name="RTOS">
                  <register-group name="RTOS"
                                  name-in-module="RTOS"
                                  address-space="base"
                                  offset="0x40007400"/>
               </instance>
            </module>
            <module name="RTC" id="126" version="1.0">
               <instance name="RTC">
                  <register-group name="RTC"
                                  name-in-module="RTC"
                                  address-space="base"
                                  offset="0x400F5000"/>
               </instance>
            </module>
            <module name="WEEK" id="76" version="1.0">
               <instance name="WEEK">
                  <register-group name="WEEK"
                                  name-in-module="WEEK"
                                  address-space="base"
                                  offset="0x4000AC80"/>
               </instance>
            </module>
            <module name="TACH" id="66" version="1.0">
               <instance name="TACH0">
                  <register-group name="TACH0"
                                  name-in-module="TACH"
                                  address-space="base"
                                  offset="0x40006000"/>
               </instance>
               <instance name="TACH1">
                  <register-group name="TACH1"
                                  name-in-module="TACH"
                                  address-space="base"
                                  offset="0x40006010"/>
               </instance>
            </module>
            <module name="PWM" id="54" version="1.0">
               <instance name="PWM0">
                  <register-group name="PWM0"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x40005800"/>
               </instance>
               <instance name="PWM1">
                  <register-group name="PWM1"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x40005810"/>
               </instance>
               <instance name="PWM2">
                  <register-group name="PWM2"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x40005820"/>
               </instance>
               <instance name="PWM3">
                  <register-group name="PWM3"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x40005830"/>
               </instance>
               <instance name="PWM4">
                  <register-group name="PWM4"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x40005840"/>
               </instance>
               <instance name="PWM5">
                  <register-group name="PWM5"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x40005850"/>
               </instance>
               <instance name="PWM10">
                  <register-group name="PWM10"
                                  name-in-module="PWM"
                                  address-space="base"
                                  offset="0x400058A0"/>
               </instance>
            </module>
            <module name="ADC" id="4" version="1.0">
               <instance name="ADC">
                  <register-group name="ADC"
                                  name-in-module="ADC"
                                  address-space="base"
                                  offset="0x40007C00"/>
               </instance>
            </module>
            <module name="FAN" id="107" version="1.0">
               <instance name="FAN0">
                  <register-group name="FAN0"
                                  name-in-module="FAN"
                                  address-space="base"
                                  offset="0x4000A000"/>
               </instance>
               <instance name="FAN1">
                  <register-group name="FAN1"
                                  name-in-module="FAN"
                                  address-space="base"
                                  offset="0x4000A080"/>
               </instance>
            </module>
            <module name="LED" id="111" version="1.0">
               <instance name="LED0">
                  <register-group name="LED0"
                                  name-in-module="LED"
                                  address-space="base"
                                  offset="0x4000B800"/>
               </instance>
               <instance name="LED1">
                  <register-group name="LED1"
                                  name-in-module="LED"
                                  address-space="base"
                                  offset="0x4000B900"/>
               </instance>
            </module>
            <module name="RC_ID" id="55" version="1.0">
               <instance name="RC_ID0">
                  <register-group name="RC_ID0"
                                  name-in-module="RC_ID"
                                  address-space="base"
                                  offset="0x40001400"/>
               </instance>
               <instance name="RC_ID1">
                  <register-group name="RC_ID1"
                                  name-in-module="RC_ID"
                                  address-space="base"
                                  offset="0x40001480"/>
               </instance>
            </module>
            <module name="KMS" id="33" version="1.0">
               <instance name="KMS">
                  <register-group name="KMS"
                                  name-in-module="KMS"
                                  address-space="base"
                                  offset="0x40009C00"/>
               </instance>
            </module>
            <module name="SMB" id="31" version="1.0">
               <instance name="SMB0">
                  <register-group name="SMB0"
                                  name-in-module="SMB"
                                  address-space="base"
                                  offset="0x40004000"/>
               </instance>
               <instance name="SMB1">
                  <register-group name="SMB1"
                                  name-in-module="SMB"
                                  address-space="base"
                                  offset="0x40004400"/>
               </instance>
               <instance name="SMB2">
                  <register-group name="SMB2"
                                  name-in-module="SMB"
                                  address-space="base"
                                  offset="0x40004800"/>
               </instance>
               <instance name="SMB3">
                  <register-group name="SMB3"
                                  name-in-module="SMB"
                                  address-space="base"
                                  offset="0x40004C00"/>
               </instance>
            </module>
            <module name="GP_SPI" id="62" version="1.0">
               <instance name="GP_SPI0">
                  <register-group name="GP_SPI0"
                                  name-in-module="GP_SPI"
                                  address-space="base"
                                  offset="0x40009400"/>
               </instance>
            </module>
            <module name="QMSPI" id="147" version="1.0">
               <instance name="QMSPI">
                  <register-group name="QMSPI"
                                  name-in-module="QMSPI"
                                  address-space="base"
                                  offset="0x40005400"/>
               </instance>
            </module>
            <module name="TFDP" id="68" version="1.0">
               <instance name="TFDP">
                  <register-group name="TFDP"
                                  name-in-module="TFDP"
                                  address-space="base"
                                  offset="0x40008C00"/>
               </instance>
            </module>
            <module name="VCI" id="75" version="1.0">
               <instance name="VCI">
                  <register-group name="VCI"
                                  name-in-module="VCI"
                                  address-space="base"
                                  offset="0x4000AE00"/>
               </instance>
            </module>
            <module name="VBAT_RAM" id="93" version="1.0">
               <instance name="VBAT_RAM">
                  <register-group name="VBAT_RAM"
                                  name-in-module="VBAT_RAM"
                                  address-space="base"
                                  offset="0x4000A800"/>
               </instance>
            </module>
            <module name="VBAT" id="94" version="1.0">
               <instance name="VBAT">
                  <register-group name="VBAT"
                                  name-in-module="VBAT"
                                  address-space="base"
                                  offset="0x4000A400"/>
               </instance>
            </module>
            <module name="EC_REG_BANK" id="95" version="1.0">
               <instance name="EC_REG_BANK">
                  <register-group name="EC_REG_BANK"
                                  name-in-module="EC_REG_BANK"
                                  address-space="base"
                                  offset="0x4000FC04"/>
               </instance>
            </module>
            <module name="EFUSE" id="96" version="1.0">
               <instance name="EFUSE">
                  <register-group name="EFUSE"
                                  name-in-module="EFUSE"
                                  address-space="base"
                                  offset="0x40082000"/>
               </instance>
            </module>
            <module name="MPU">
               <instance name="MPU">
                  <register-group name="MPU"
                                  name-in-module="MPU"
                                  address-space="base"
                                  offset="0xE000ED90"/>
               </instance>
            </module>
            <module name="NVIC" version="1.0.0">
               <instance name="NVIC">
                  <register-group name="NVIC"
                                  name-in-module="NVIC"
                                  address-space="base"
                                  offset="0xE000E100"/>
                  <parameters>
                     <param name="NUM_IRQ" value="32" caption="Number of interrupt requests"/>
                     <param name="__NVIC_PRIO_BITS"
                            value="3"
                            caption="Number of NVIC interrupt priority bits"/>
                     <param name="__FPU_PRESENT" value="1"/>
                  </parameters>
               </instance>
            </module>
            <module name="SysTick">
               <instance name="SysTick">
                  <register-group name="SysTick"
                                  name-in-module="SysTick"
                                  address-space="base"
                                  offset="0xE000E010"/>
               </instance>
            </module>
            <module name="SystemControl">
               <instance name="SystemControl">
                  <register-group name="SystemControl"
                                  name-in-module="SystemControl"
                                  address-space="base"
                                  offset="0xE000E000"/>
               </instance>
            </module>
         </peripherals>
         <interrupts>
            <interrupt name="Reset"
                       index="-15"
                       caption="Reset Vector, invoked on Power up and warm reset"/>
            <interrupt name="NonMaskableInt" index="-14" caption="Non Maskable Interrupt"/>
            <interrupt name="HardFault" index="-13" caption=" Hard Fault Interrupt"/>
            <interrupt name="MemoryManagement"
                       index="-12"
                       caption=" Memory Management Interrupt"/>
            <interrupt name="BusFault" index="-11" caption=" Bus Fault Interrupt"/>
            <interrupt name="UsageFault" index="-10" caption=" Usage Fault Interrupt"/>
            <interrupt name="SVCall" index="-5" caption=" SV Call Interrupt"/>
            <interrupt name="DebugMonitor" index="-4" caption=" Debug Monitor Interrupt"/>
            <interrupt name="PendSV" index="-2" caption=" Pend SV Interrupt"/>
            <interrupt name="SysTick" index="-1" caption=" System Tick Interrupt"/>
            <interrupt name="GIRQ08" index="0" module-instance="GPIO"/>
            <interrupt name="GIRQ09" index="1" module-instance="GPIO"/>
            <interrupt name="GIRQ10" index="2" module-instance="GPIO"/>
            <interrupt name="GIRQ11" index="3" module-instance="GPIO"/>
            <interrupt name="GIRQ12" index="4" module-instance="GPIO"/>
            <interrupt name="GIRQ26" index="17" module-instance="GPIO"/>
            <interrupt name="SMB0" index="20" module-instance="SMB0"/>
            <interrupt name="SMB1" index="21" module-instance="SMB1"/>
            <interrupt name="SMB2" index="22" module-instance="SMB2"/>
            <interrupt name="SMB3" index="23" module-instance="SMB3"/>
            <interrupt name="DMA_CH00" index="24" module-instance="DMA_CHAN00"/>
            <interrupt name="DMA_CH01" index="25" module-instance="DMA_CHAN01"/>
            <interrupt name="DMA_CH02" index="26" module-instance="DMA_CHAN02"/>
            <interrupt name="DMA_CH03" index="27" module-instance="DMA_CHAN03"/>
            <interrupt name="DMA_CH04" index="28" module-instance="DMA_CHAN04"/>
            <interrupt name="DMA_CH05" index="29" module-instance="DMA_CHAN05"/>
            <interrupt name="DMA_CH06" index="30" module-instance="DMA_CHAN06"/>
            <interrupt name="DMA_CH07" index="31" module-instance="DMA_CHAN07"/>
            <interrupt name="DMA_CH08" index="32" module-instance="DMA_CHAN08"/>
            <interrupt name="DMA_CH09" index="33" module-instance="DMA_CHAN09"/>
            <interrupt name="DMA_CH10" index="34" module-instance="DMA_CHAN10"/>
            <interrupt name="DMA_CH11" index="35" module-instance="DMA_CHAN11"/>
            <interrupt name="DMA_CH12" index="36" module-instance="DMA_CHAN12"/>
            <interrupt name="DMA_CH13" index="37" module-instance="DMA_CHAN13"/>
            <interrupt name="UART0" index="40" module-instance="UART0"/>
            <interrupt name="UART1" index="41" module-instance="UART1"/>
            <interrupt name="TACH0" index="71" module-instance="TACH0"/>
            <interrupt name="TACH1" index="72" module-instance="TACH1"/>
            <interrupt name="RPM2PWM_0_FAIL" index="74" module-instance="FAN0"/>
            <interrupt name="RPM2PWM_0_STALL" index="75" module-instance="FAN0"/>
            <interrupt name="RPM2PWM_1_FAIL" index="76" module-instance="FAN1"/>
            <interrupt name="RPM2PWM_1_STALL" index="77" module-instance="FAN1"/>
            <interrupt name="SNGL" index="78" module-instance="ADC"/>
            <interrupt name="RPT" index="79" module-instance="ADC"/>
            <interrupt name="RC_ID0" index="80" module-instance="RC_ID0"/>
            <interrupt name="RC_ID1" index="81" module-instance="RC_ID1"/>
            <interrupt name="LED0" index="83" module-instance="LED0"/>
            <interrupt name="LED1" index="84" module-instance="LED1"/>
            <interrupt name="QMSPI" index="91" module-instance="QMSPI"/>
            <interrupt name="TX0" index="92" module-instance="GP_SPI0"/>
            <interrupt name="RX0" index="93" module-instance="GP_SPI0"/>
            <interrupt name="TIMER" index="111" module-instance="RTOS"/>
            <interrupt name="HTM0" index="112" module-instance="HTM0"/>
            <interrupt name="HTM1" index="113" module-instance="HTM1"/>
            <interrupt name="ALARM_INT" index="114" module-instance="WEEK"/>
            <interrupt name="WKSUB" index="115" module-instance="WEEK"/>
            <interrupt name="WKSEC" index="116" module-instance="WEEK"/>
            <interrupt name="WKSUBSEC" index="117" module-instance="WEEK"/>
            <interrupt name="SYSPWR" index="118" module-instance="WEEK"/>
            <interrupt name="RTC" index="119" module-instance="RTC"/>
            <interrupt name="RTC_ALARM" index="120" module-instance="RTC"/>
            <interrupt name="OVRD_IN" index="121" module-instance="VCI"/>
            <interrupt name="IN0" index="122" module-instance="VCI"/>
            <interrupt name="IN1" index="123" module-instance="VCI"/>
            <interrupt name="IN2" index="124" module-instance="VCI"/>
            <interrupt name="IN3" index="125" module-instance="VCI"/>
            <interrupt name="IN4" index="126" module-instance="VCI"/>
            <interrupt name="IN5" index="127" module-instance="VCI"/>
            <interrupt name="IN6" index="128" module-instance="VCI"/>
            <interrupt name="KMS" index="135" module-instance="KMS"/>
            <interrupt name="TIMER16_0" index="136" module-instance="TIMER16_0"/>
            <interrupt name="TIMER16_1" index="137" module-instance="TIMER16_1"/>
            <interrupt name="TIMER16_2" index="138" module-instance="TIMER16_2"/>
            <interrupt name="TIMER16_3" index="139" module-instance="TIMER16_3"/>
            <interrupt name="TIMER32_0" index="140" module-instance="TIMER32_0"/>
            <interrupt name="TIMER32_1" index="141" module-instance="TIMER32_1"/>
            <interrupt name="CNT_TMR0" index="142" module-instance="CNT_TMR0"/>
            <interrupt name="CNT_TMR1" index="143" module-instance="CNT_TMR1"/>
            <interrupt name="CNT_TMR2" index="144" module-instance="CNT_TMR2"/>
            <interrupt name="CNT_TMR3" index="145" module-instance="CNT_TMR3"/>
            <interrupt name="CAPTURE_TIMER" index="146" module-instance="CCT"/>
            <interrupt name="CAPTURE_0" index="147" module-instance="CCT"/>
            <interrupt name="CAPTURE_1" index="148" module-instance="CCT"/>
            <interrupt name="CAPTURE_2" index="149" module-instance="CCT"/>
            <interrupt name="CAPTURE_3" index="150" module-instance="CCT"/>
            <interrupt name="CAPTURE_4" index="151" module-instance="CCT"/>
            <interrupt name="CAPTURE_5" index="152" module-instance="CCT"/>
            <interrupt name="COMPARE_0" index="153" module-instance="CCT"/>
            <interrupt name="COMPARE_1" index="154" module-instance="CCT"/>
         </interrupts>
         <interfaces>
	  </interfaces>
      </device>
   </devices>
   <modules>
      <module name="PCR"
              id="100"
              version="1.0"
              caption="The Power, Clocks, and Resets (PCR) Section identifies all the power supplies,\n                    clock sources, and reset inputs to the chip and defines all the derived power, clock, and reset signals.">
         <register-group name="PCR"
                         caption="The Power, Clocks, and Resets (PCR) Section identifies all the power supplies,\n                      clock sources, and reset inputs to the chip and defines all the derived power, clock, and reset signals.">
            <register name="SYS_SLP_CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="System Sleep Control">
               <bitfield name="SLP_MOD" caption="Selects the System Sleep mode" mask="0x1"/>
               <bitfield name="TEST" caption="Test bit" mask="0x4"/>
               <bitfield name="SLP_ALL" caption="Initiates the System Sleep mode" mask="0x8"/>
            </register>
            <register name="PROC_CLK_CTRL"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000004"
                      caption="Processor Clock Control Register [7:0] Processor Clock Divide Value (PROC_DIV)\n                           1: divide 48 MHz Ring Oscillator by 1.\n                   3: divide 48 MHz Ring Oscillator by 3.\n                         4: divide 48 MHz Ring Oscillator by 4.\n                         16: divide 48 MHz Ring Oscillator by 16.\n                 48: divide 48 MHz Ring Oscillator by 48.\n                 No other values are supported.">
               <bitfield name="DIV"
                         caption="Selects the EC clock rate"
                         mask="0xFF"
                         values="PCR_PROC_CLK_CTRL__DIV"/>
            </register>
            <register name="SLOW_CLK_CTRL"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x000001E0"
                      caption="Configures the EC_CLK clock domain">
               <bitfield name="DIV" caption="DIV. n=Divide by n; 0=Clock off" mask="0x3FF"/>
            </register>
            <register name="OSC_ID"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Oscillator ID Register">
               <bitfield name="TEST" caption="Test bits" mask="0xFF"/>
               <bitfield name="PLL_LOCK" caption="PLL Lock Status" mask="0x100"/>
            </register>
            <register name="PWR_RST_STS"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="PCR Power Reset Status Register">
               <bitfield name="VCC_PWRGD_STS"
                         caption="Indicates the status of VCC_PWRGD. 0 = PWRGD not asserted. 1 = PWRGD asserte."
                         mask="0x4"/>
               <bitfield name="RST_H_STS"
                         caption="Indicates the status of RESET_VCC. 0 = reset active. 1 = reset not active."
                         mask="0x8"/>
               <bitfield name="VBAT_RST_STS"
                         caption="VBAT reset status 0 = No reset occurred while VTR was off or since the last time this bit was cleared. 1 = A reset occurred.(R/WC)"
                         mask="0x20"/>
               <bitfield name="RST_VTR_STS"
                         caption="Indicates the status of VTR_RESET.(R/WC)\n        0 = No reset occurred since the last time this bit was cleared.\n                1 = A reset occurred."
                         mask="0x40"/>
               <bitfield name="JTAG_RST_STS"
                         caption="Indicates s RESET_SYS was triggered by a JTAG action.(R/WC)\n          0 = No JTAG reset occurred since the last time this bit was cleared.\n           1 = A reset occurred because of a JATAG command."
                         mask="0x80"/>
               <bitfield name="_32K_ACTIVE" caption="32K_ACTIVE" mask="0x400"/>
               <bitfield name="PCICLK_ACTIVE" caption="PCICLK_ACTIVE" mask="0x800"/>
               <bitfield name="ESPI_CLK_ACTIVE" caption="ESPI_CLK_ACTIVE" mask="0x1000"/>
            </register>
            <register name="PWR_RST_CTRL"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000101"
                      caption="Power Reset Control Register">
               <bitfield name="PWR_INV"
                         caption="Used by FW to control internal RESET_VCC signal function and external PWROK pin. This bit is read-only when VCC_PWRGD\n                is de-asserted low."
                         mask="0x1"/>
               <bitfield name="H_RST_SEL"
                         caption="Determines what generates the internal platform reset signal. 1=LRESET# pin; 0=eSPI PLTRST# VWire"
                         mask="0x100"/>
            </register>
            <register name="SYS_RST"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="System Reset Register">
               <bitfield name="SOFT_SYS_RST"
                         caption="A write of a 1 forces an assertion of the RESET_SYS reset signal, resetting the device. A write of 0 has no effect."
                         mask="0x100"/>
            </register>
            <register name="SLP_EN_0"
                      offset="0x30"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sleep Enable 0 Register">
               <bitfield name="JTAG_STAP_SLP_EN" caption="JTAG STAP Enable" mask="0x1"/>
               <bitfield name="OTP_SLP_EN" caption="eFuse Enable" mask="0x2"/>
            </register>
            <register name="SLP_EN_1"
                      offset="0x34"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sleep Enable 1 Register">
               <bitfield name="INT_SLP_EN" caption="Interrupt Sleep Enable" mask="0x1"/>
               <bitfield name="TACH0_SLP_EN" caption="TACH0 Sleep Enable" mask="0x4"/>
               <bitfield name="PWM0_SLP_EN" caption="PWM0 Sleep Enable" mask="0x10"/>
               <bitfield name="PMC_SLP_EN" caption="PMC Sleep Enable" mask="0x20"/>
               <bitfield name="DMA_SLP_EN" caption="DMA Sleep Enable" mask="0x40"/>
               <bitfield name="TFDP_SLP_EN" caption="TFDP Sleep Enable" mask="0x80"/>
               <bitfield name="PROC_SLP_EN" caption="PROCESSOR Sleep Enable" mask="0x100"/>
               <bitfield name="WDT_SLP_EN" caption="WDT Sleep Enable" mask="0x200"/>
               <bitfield name="SMB0_SLP_EN" caption="SMB0 Sleep Enable" mask="0x400"/>
               <bitfield name="TACH1_SLP_EN" caption="TACH1 Sleep Enable" mask="0x800"/>
               <bitfield name="PWM1_SLP_EN" caption="PWM1 Sleep Enable" mask="0x100000"/>
               <bitfield name="PWM2_SLP_EN" caption="PWM2 Sleep Enable" mask="0x200000"/>
               <bitfield name="PWM3_SLP_EN" caption="PWM3 Sleep Enable" mask="0x400000"/>
               <bitfield name="PWM4_SLP_EN" caption="PWM4 Sleep Enable" mask="0x800000"/>
               <bitfield name="PWM5_SLP_EN" caption="PWM5 Sleep Enable" mask="0x1000000"/>
               <bitfield name="EC_REG_BANK_SLP_EN"
                         caption="EC_REG_BANK Sleep Enable"
                         mask="0x20000000"/>
               <bitfield name="TMR16_0_SLP_EN"
                         caption="TIMER16_0 Sleep Enable"
                         mask="0x40000000"/>
               <bitfield name="TMR16_1_SLP_EN"
                         caption="TIMER16_1 Sleep Enable"
                         mask="0x80000000"/>
            </register>
            <register name="SLP_EN_2"
                      offset="0x38"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sleep Enable 2 Register">
               <bitfield name="UART0_SLP_EN" caption="UART 0 Sleep Enable" mask="0x2"/>
               <bitfield name="UART1_SLP_EN" caption="UART 1 Sleep Enable" mask="0x4"/>
               <bitfield name="GLBL_CFG_SLP_EN" caption="GLBL_CFG" mask="0x1000"/>
               <bitfield name="RTC_SLP_EN" caption="RTC Sleep Enable" mask="0x40000"/>
            </register>
            <register name="SLP_EN_3"
                      offset="0x3C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sleep Enable 3 Register">
               <bitfield name="ADC_SLP_EN" caption="ADC Sleep Enable" mask="0x8"/>
               <bitfield name="GP_SPI0_SLP_EN" caption="GP SPI0 Sleep Enable" mask="0x200"/>
               <bitfield name="HTMR_0_SLP_EN" caption="HTIMER 0 Sleep Enable" mask="0x400"/>
               <bitfield name="KEYSCAN_SLP_EN" caption="KEYSCAN Sleep Enable" mask="0x800"/>
               <bitfield name="RPMPWM_SLP_EN" caption="RPM-PWM Sleep Enable" mask="0x1000"/>
               <bitfield name="SMB1_SLP_EN" caption="SMB1 Sleep Enable" mask="0x2000"/>
               <bitfield name="SMB2_SLP_EN" caption="SMB2 Sleep Enable" mask="0x4000"/>
               <bitfield name="SMB3_SLP_EN" caption="SMB3 Sleep Enable" mask="0x8000"/>
               <bitfield name="LED0_SLP_EN" caption="LED0 Sleep Enable" mask="0x10000"/>
               <bitfield name="LED1_SLP_EN" caption="LED1 Sleep Enable" mask="0x20000"/>
               <bitfield name="TMR16_2_SLP_EN"
                         caption="TIMER16_2_Sleep Enable"
                         mask="0x200000"/>
               <bitfield name="TMR16_3_SLP_EN"
                         caption="TIMER16_3 Sleep Enable"
                         mask="0x400000"/>
               <bitfield name="TMR32_0_SLP_EN"
                         caption="TIMER32_0 Sleep Enable"
                         mask="0x800000"/>
               <bitfield name="TMR32_1_SLP_EN"
                         caption="TIMER32_1 Sleep Enable"
                         mask="0x1000000"/>
               <bitfield name="HTMR_1_SLP_EN"
                         caption="HTIMER 1 Sleep Enable"
                         mask="0x20000000"/>
               <bitfield name="CCTMR_SLP_EN"
                         caption="Capture Compare Timer Sleep Enable"
                         mask="0x40000000"/>
            </register>
            <register name="SLP_EN_4"
                      offset="0x40"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sleep Enable 4 Register">
               <bitfield name="PWM10_SLP_EN" caption="PWM10 Sleep Enable" mask="0x1"/>
               <bitfield name="CNT_TMER0_SLP_EN" caption="CNT_TMER0 Sleep Enable" mask="0x4"/>
               <bitfield name="CNT_TMER1_SLP_EN" caption="CNT_TMER1 Sleep Enable" mask="0x8"/>
               <bitfield name="CNT_TMER2_SLP_EN"
                         caption="CNT_TMER2 Sleep Enable"
                         mask="0x10"/>
               <bitfield name="CNT_TMER3_SLP_EN"
                         caption="CNT_TMER3 Sleep Enable"
                         mask="0x20"/>
               <bitfield name="RTOS_SLP_EN" caption="PWM6 Sleep Enable" mask="0x40"/>
               <bitfield name="RPMPWM1_SLP_EN" caption="RPMPWM 1 Sleep Enable" mask="0x80"/>
               <bitfield name="QMSPI_SLP_EN" caption="Quad SPI Sleep Enable" mask="0x100"/>
               <bitfield name="RC_ID1_SLP_EN" caption="RC_ID1 Sleep Enable" mask="0x800"/>
               <bitfield name="RC_ID2_SLP_EN" caption="RC_ID2 Sleep Enable" mask="0x1000"/>
               <bitfield name="PROCHOT_SLP_EN" caption="PROCHOT Sleep Enable" mask="0x2000"/>
               <bitfield name="FUJICL_SLP_EN"
                         caption="Fujitsu Custom Logic Sleep Enable"
                         mask="0x8000"/>
            </register>
            <register name="CLK_REQ_0"
                      offset="0x50"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Clock Required 0 Register">
               <bitfield name="JTAG_STAP_CLK_REQ" caption="JTAG Clock Reuqired" mask="0x1"/>
               <bitfield name="EFUSE_CLK_REQ" caption="eFuse Clock Reuqired" mask="0x2"/>
            </register>
            <register name="CLK_REQ_1"
                      offset="0x54"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Clock Required 1 Register">
               <bitfield name="INT_CLK_REQ" caption="Interrupt Clock Reuqired" mask="0x1"/>
               <bitfield name="TACH0_CLK_REQ" caption="TACH0 Clock Reuqired" mask="0x4"/>
               <bitfield name="PWM0_CLK_REQ" caption="PWM0 Clock Reuqired" mask="0x10"/>
               <bitfield name="PMC_CLK_REQ" caption="PMC Clock Reuqired" mask="0x20"/>
               <bitfield name="DMA_CLK_REQ" caption="DMA Clock Reuqired" mask="0x40"/>
               <bitfield name="TFDP_CLK_REQ" caption="TFDP Clock Reuqired" mask="0x80"/>
               <bitfield name="PROCESSOR_CLK_REQ"
                         caption="PROCESSOR Clock Reuqired"
                         mask="0x100"/>
               <bitfield name="WDT_CLK_REQ" caption="WDT Clock Reuqired" mask="0x200"/>
               <bitfield name="SMB0_CLK_REQ" caption="SMB0 Clock Reuqired" mask="0x400"/>
               <bitfield name="TACH1_CLK_REQ" caption="TACH1 Clock Reuqired" mask="0x800"/>
               <bitfield name="PWM1_CLK_REQ" caption="PWM1 Clock Reuqired" mask="0x100000"/>
               <bitfield name="PWM2_CLK_REQ" caption="PWM2 Clock Reuqired" mask="0x200000"/>
               <bitfield name="PWM3_CLK_REQ" caption="PWM3 Clock Reuqired" mask="0x400000"/>
               <bitfield name="PWM4_CLK_REQ" caption="PWM4 Clock Reuqired" mask="0x800000"/>
               <bitfield name="PWM5_CLK_REQ" caption="PWM5 Clock Reuqired" mask="0x1000000"/>
               <bitfield name="EC_REG_BANK_CLK_REQ"
                         caption="EC_REG_BANK Clock Reuqired"
                         mask="0x20000000"/>
               <bitfield name="TMR16_0_CLK_REQ"
                         caption="TIMER16_0 Clock Reuqired"
                         mask="0x40000000"/>
               <bitfield name="TMR16_1_CLK_REQ"
                         caption="TIMER16_1 Clock Reuqired"
                         mask="0x80000000"/>
            </register>
            <register name="CLK_REQ_2"
                      offset="0x58"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Clock Required 2 Register">
               <bitfield name="UART_0_CLK_REQ" caption="UART 0 Clock Reuqired" mask="0x2"/>
               <bitfield name="UART_1_CLK_REQ" caption="UART 1 Clock Reuqired" mask="0x4"/>
               <bitfield name="GLBL_CFG_CLK_REQ"
                         caption="GLBL_CFG Clock Reuqired"
                         mask="0x1000"/>
               <bitfield name="RTC_CLK_REQ" caption="RTC Clock Reuqired" mask="0x40000"/>
            </register>
            <register name="CLK_REQ_3"
                      offset="0x5C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Clock Required 3 Register">
               <bitfield name="ADC_CLK_REQ" caption="ADC Clock Reuqired" mask="0x8"/>
               <bitfield name="GP_SPI0_CLK_REQ"
                         caption="GP SPI0 Clock Reuqired"
                         mask="0x200"/>
               <bitfield name="HTMR_0_CLK_REQ"
                         caption="HTIMER 0 Clock Reuqired"
                         mask="0x400"/>
               <bitfield name="KEYSCAN_CLK_REQ"
                         caption="KEYSCAN Clock Reuqired"
                         mask="0x800"/>
               <bitfield name="RPMPWM_CLK_REQ"
                         caption="RPM-PWM Clock Reuqired"
                         mask="0x1000"/>
               <bitfield name="SMB1_CLK_REQ" caption="SMB1 Clock Reuqired" mask="0x2000"/>
               <bitfield name="SMB2_CLK_REQ" caption="SMB2 Clock Reuqired" mask="0x4000"/>
               <bitfield name="SMB3_CLK_REQ" caption="SMB3 Clock Reuqired" mask="0x8000"/>
               <bitfield name="LED0_CLK_REQ" caption="LED0 Clock Reuqired" mask="0x10000"/>
               <bitfield name="LED1_CLK_REQ" caption="LED1 Clock Reuqired" mask="0x20000"/>
               <bitfield name="TMR16_2_CLK_REQ"
                         caption="TIMER16_2 Clock Reuqired"
                         mask="0x200000"/>
               <bitfield name="TMR16_3_CLK_REQ"
                         caption="TIMER16_3 Clock Reuqired"
                         mask="0x400000"/>
               <bitfield name="TMR32_0_CLK_REQ"
                         caption="TIMER32_0 Clock Reuqired"
                         mask="0x800000"/>
               <bitfield name="TMR32_1_CLK_REQ"
                         caption="TIMER32_1 Clock Reuqired"
                         mask="0x1000000"/>
               <bitfield name="HTMR_1_CLK_REQ"
                         caption="HTIMER 1 Clock Reuqired"
                         mask="0x20000000"/>
               <bitfield name="CCTMR_CLK_REQ"
                         caption="Capture Compare Timer Clock Reuqired"
                         mask="0x40000000"/>
            </register>
            <register name="CLK_REQ_4"
                      offset="0x60"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Clock Required 4 Register">
               <bitfield name="PWM10_CLK_REQ" caption="PWM10 Clock Reuqired" mask="0x1"/>
               <bitfield name="CNT_TMER0_CLK_REQ"
                         caption="CNT_TMER0 Clock Reuqired"
                         mask="0x4"/>
               <bitfield name="CNT_TMER1_CLK_REQ"
                         caption="CNT_TMER1 Clock Reuqired"
                         mask="0x8"/>
               <bitfield name="CNT_TMER2_CLK_REQ"
                         caption="CNT_TMER2 Clock Reuqired"
                         mask="0x10"/>
               <bitfield name="CNT_TMER3_CLK_REQ"
                         caption="CNT_TMER3 Clock Reuqired"
                         mask="0x20"/>
               <bitfield name="RTOS_CLK_REQ" caption="PWM6 Clock Reuqired" mask="0x40"/>
               <bitfield name="RPMPWM1_CLK_REQ"
                         caption="RPMPWM 1 Clock Reuqired"
                         mask="0x80"/>
               <bitfield name="QSPI_CLK_REQ" caption="Quad SPI Clock Reuqired" mask="0x100"/>
               <bitfield name="RC_ID1_CLK_REQ" caption="RC_ID1 Clock Reuqired" mask="0x800"/>
               <bitfield name="RC_ID2_CLK_REQ" caption="RC_ID2 Clock Reuqired" mask="0x1000"/>
               <bitfield name="PROCHOT_CLK_REQ"
                         caption="PROCHOT Clock Reuqired"
                         mask="0x2000"/>
               <bitfield name="FUJICL_CLK_REQ"
                         caption="Fujitsu Custom Logic Clock Reuqired"
                         mask="0x8000"/>
            </register>
            <register name="RST_EN_0"
                      offset="0x70"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Reset Enable 0 Register">
               <bitfield name="JTAG_STAP_RST_EN" caption="JTAG STAP Reset Enable" mask="0x1"/>
               <bitfield name="EFUSE_RST_EN" caption="eFuse Reset Enable" mask="0x2"/>
            </register>
            <register name="RST_EN_1"
                      offset="0x74"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Reset Enable 1 Register">
               <bitfield name="INT_RST_EN" caption="Interrupt Reset Enable" mask="0x1"/>
               <bitfield name="TACH0_RST_EN" caption="TACH0 Reset Enable" mask="0x4"/>
               <bitfield name="PWM0_RST_EN" caption="PWM0 Reset Enable" mask="0x10"/>
               <bitfield name="PMC_RST_EN" caption="PMC Reset Enable" mask="0x20"/>
               <bitfield name="DMA_RST_EN" caption="DMA Reset Enable" mask="0x40"/>
               <bitfield name="TFDP_RST_EN" caption="TFDP Reset Enable" mask="0x80"/>
               <bitfield name="PROCESSOR_RST_EN"
                         caption="PROCESSOR Reset Enable"
                         mask="0x100"/>
               <bitfield name="WDT_RST_EN" caption="WDT Reset Enable" mask="0x200"/>
               <bitfield name="SMB0_RST_EN" caption="SMB0 Reset Enable" mask="0x400"/>
               <bitfield name="TACH1_RST_EN" caption="TACH1 Reset Enable" mask="0x800"/>
               <bitfield name="PWM1_RST_EN" caption="PWM1 Reset Enable" mask="0x100000"/>
               <bitfield name="PWM2_RST_EN" caption="PWM2 Reset Enable" mask="0x200000"/>
               <bitfield name="PWM3_RST_EN" caption="PWM3 Reset Enable" mask="0x400000"/>
               <bitfield name="PWM4_RST_EN" caption="PWM4 Reset Enable" mask="0x800000"/>
               <bitfield name="PWM5_RST_EN" caption="PWM5 Reset Enable" mask="0x1000000"/>
               <bitfield name="EC_REG_BANK_RST_EN"
                         caption="EC_REG_BANK Reset Enable"
                         mask="0x20000000"/>
               <bitfield name="TMR16_0_RST_EN"
                         caption="TIMER16_0 Reset Enable"
                         mask="0x40000000"/>
               <bitfield name="TMR16_1_RST_EN"
                         caption="TIMER16_1 Reset Enable"
                         mask="0x80000000"/>
            </register>
            <register name="RST_EN_2"
                      offset="0x78"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Reset Enable 2 Register">
               <bitfield name="UART_0_RST_EN" caption="UART 0 Reset Enable" mask="0x2"/>
               <bitfield name="UART_1_RST_EN" caption="UART 1 Reset Enable" mask="0x4"/>
               <bitfield name="GLBL_CFG_RST_EN"
                         caption="GLBL_CFG Reset Enable"
                         mask="0x1000"/>
               <bitfield name="RTC_RST_EN" caption="RTC Reset Enable" mask="0x40000"/>
            </register>
            <register name="RST_EN_3"
                      offset="0x7C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Reset Enable 3 Register">
               <bitfield name="ADC_RST_EN" caption="ADC Reset Enable" mask="0x8"/>
               <bitfield name="GP_SPI0_RST_EN" caption="GP SPI0 Reset Enable" mask="0x200"/>
               <bitfield name="HTMR_0_RST_EN" caption="HTIMER 0 Reset Enable" mask="0x400"/>
               <bitfield name="KEYSCAN_RST_EN" caption="KEYSCAN Reset Enable" mask="0x800"/>
               <bitfield name="RPMPWM_RST_EN" caption="RPM-PWM Reset Enable" mask="0x1000"/>
               <bitfield name="SMB1_RST_EN" caption="SMB1 Reset Enable" mask="0x2000"/>
               <bitfield name="SMB2_RST_EN" caption="SMB2 Reset Enable" mask="0x4000"/>
               <bitfield name="SMB3_RST_EN" caption="SMB3 Reset Enable" mask="0x8000"/>
               <bitfield name="LED0_RST_EN" caption="LED0 Reset Enable" mask="0x10000"/>
               <bitfield name="LED1_RST_EN" caption="LED1 Reset Enable" mask="0x20000"/>
               <bitfield name="TMR16_2_RST_EN"
                         caption="TIMER16_2 Reset Enable"
                         mask="0x200000"/>
               <bitfield name="TMR16_3_RST_EN"
                         caption="TIMER16_3 Reset Enable"
                         mask="0x400000"/>
               <bitfield name="TMR32_0_RST_EN"
                         caption="TIMER32_0 Reset Enable"
                         mask="0x800000"/>
               <bitfield name="TMR32_1_RST_EN"
                         caption="TIMER32_1 Reset Enable"
                         mask="0x1000000"/>
               <bitfield name="HTMR_1_RST_EN"
                         caption="HTIMER 1 Reset Enable"
                         mask="0x20000000"/>
               <bitfield name="CCTMR_RST_EN"
                         caption="Capture Compare Timer Reset Enable"
                         mask="0x40000000"/>
            </register>
            <register name="RST_EN_4"
                      offset="0x80"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Reset Enable 4 Register">
               <bitfield name="PWM10_RST_EN" caption="PWM10 Reset Enable" mask="0x1"/>
               <bitfield name="CNT_TMER0_RST_EN" caption="CNT_TMER0 Reset Enable" mask="0x4"/>
               <bitfield name="CNT_TMER1_RST_EN" caption="CNT_TMER1 Reset Enable" mask="0x8"/>
               <bitfield name="CNT_TMER2_RST_EN"
                         caption="CNT_TMER2 Reset Enable"
                         mask="0x10"/>
               <bitfield name="CNT_TMER3_RST_EN"
                         caption="CNT_TMER3 Reset Enable"
                         mask="0x20"/>
               <bitfield name="RTOS_RST_EN" caption="PWM6 Reset Enable" mask="0x40"/>
               <bitfield name="RPMPWM1_RST_EN" caption="RPMPWM 1 Reset Enable" mask="0x80"/>
               <bitfield name="QSPI_RST_EN" caption="Quad SPI Reset Enable" mask="0x100"/>
               <bitfield name="RC_ID1_RST_EN" caption="RC_ID1 Reset Enable" mask="0x800"/>
               <bitfield name="RC_ID2_RST_EN" caption="RC_ID2 Reset Enable" mask="0x1000"/>
               <bitfield name="PROCHOT_RST_EN" caption="PROCHOT Reset Enable" mask="0x2000"/>
               <bitfield name="FUJICL_RST_EN"
                         caption="Fujitsu Custom Logic Reset Enable"
                         mask="0x8000"/>
            </register>
         </register-group>
         <value-group caption="" name="PCR_PROC_CLK_CTRL__DIV">
            <value caption="1: divide 48 MHz Ring Oscillator by 1"
                   name="DIV_BY_1"
                   value="0x1"/>
            <value caption="3: divide 48 MHz Ring Oscillator by 3"
                   name="DIV_BY_3"
                   value="0x3"/>
            <value caption="4: divide 48 MHz Ring Oscillator by 4"
                   name="DIV_BY_4"
                   value="0x4"/>
            <value caption="16: divide 48 MHz Ring Oscillator by 16"
                   name="DIV_BY_16"
                   value="0x10"/>
            <value caption="48: divide 48 MHz Ring Oscillator by 48"
                   name="DIV_BY_48"
                   value="0x30"/>
         </value-group>
      </module>
      <module name="DMA_MAIN"
              id="85"
              version="1.0"
              caption="DMA Main Registers">
         <register-group name="DMA_MAIN" caption="DMA Main Registers">
            <register name="ACTRST"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Soft reset the entire module. Enable the blocks operation.">
               <bitfield name="ACT"
                         caption="Enable the blocks operation. (R/WS)\n                 1=Enable block. Each individual channel must be enabled separately.\n                 0=Disable all channels."
                         mask="0x1"/>
               <bitfield name="SOFT_RST"
                         caption="Soft reset the entire module. This bit is self-clearing."
                         mask="0x2"/>
            </register>
            <register name="DATA_PKT"
                      offset="0x4"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Debug register that has the data that is stored in the Data Packet. This data is read data from the currently active transfer source.">
        </register>
         </register-group>
      </module>
      <module name="DMA_CHAN00"
              id="85"
              version="1.0"
              caption="DMA Channel 00 Registers">
         <register-group name="DMA_CHAN00" caption="DMA Channel 00 Registers">
            <register name="ACTIVATE"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.">
               <bitfield name="CHN"
                         caption="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n              1=Enable channel(block). Each individual channel must be enabled separately.\n                0=Disable channel(block)."
                         mask="0x1"/>
            </register>
            <register name="MSTART"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the starting address for the Memory device.">
        </register>
            <register name="MEND"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the ending address for the Memory device.">
        </register>
            <register name="DSTART"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the Master Device address.">
        </register>
            <register name="CTRL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA Channel N Control">
               <bitfield name="RUN"
                         caption="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n                0=This channel is disabled. All transfer requests are ignored."
                         mask="0x1"/>
               <bitfield name="REQ"
                         caption="This is a status field.\n            1= There is a transfer request from the Master Device\n                0= There is no transfer request from the Master Device"
                         mask="0x2"/>
               <bitfield name="DONE"
                         caption="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n            This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n            1=Channel is done\n              0=Channel is not done or it is OFF"
                         mask="0x4"/>
               <bitfield name="STS"
                         caption="This is a status signal. The status decode is listed in priority order with the highest priority first.\n          3: Error detected by the DMA\n          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n         1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n               0: DMA Channel Control:Run is Disabled (0x0)"
                         mask="0x18"
                         values="DMA_CHAN00_CTRL__STS"/>
               <bitfield name="BUSY"
                         caption="This is a status signal.\n                 1=The DMA Channel is busy (FSM is not IDLE)\n              0=The DMA Channel is not busy (FSM is IDLE)"
                         mask="0x20"/>
               <bitfield name="TX_DIR"
                         caption="This determines the direction of the DMA Transfer.\n       1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n            0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"
                         mask="0x100"/>
               <bitfield name="HW_FLOW_CTRL_DEV"
                         caption="This is the device that is connected to this channel as its Hardware Flow Control master.\n       The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n            The Flow Control Interface Port list is dma_req, dma_term, and dma_done."
                         mask="0xFE00"/>
               <bitfield name="INC_MEM_ADDR"
                         caption="This will enable an auto-increment to the DMA Channel Memory Address.\n              1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"
                         mask="0x10000"/>
               <bitfield name="INC_DEV_ADDR"
                         caption="This will enable an auto-increment to the DMA Channel Device Address.\n             1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                 0: Do nothing"
                         mask="0x20000"/>
               <bitfield name="LOCK"
                         caption="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."
                         mask="0x40000"/>
               <bitfield name="DIS_HW_FLOW_CTRL"
                         caption="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."
                         mask="0x80000"/>
               <bitfield name="TRANS_SIZE"
                         caption="This is the transfer size in Bytes of each Data Packet transfer.\n              Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."
                         mask="0x700000"/>
               <bitfield name="TRANS_GO"
                         caption="This is used for the Firmware Flow Control DMA transfer."
                         mask="0x1000000"/>
               <bitfield name="TRANS_ABORT"
                         caption="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."
                         mask="0x2000000"/>
            </register>
            <register name="ISTS"
                      offset="0x14"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="DMA Channel N Interrupt Status">
               <bitfield name="BUS_ERR"
                         caption="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n         1: Error detected. (R/WC)"
                         mask="0x1"/>
               <bitfield name="FLOW_CTRL"
                         caption="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n             after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n          1=Hardware Flow Control is requesting after the transfer has completed\n           0=No Hardware Flow Control event"
                         mask="0x2"/>
               <bitfield name="DONE"
                         caption="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n      A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n              A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n                 1=Memory Start Address equals Memory End Address\n           0=Memory Start Address does not equal Memory End Address"
                         mask="0x4"/>
            </register>
            <register name="IEN"
                      offset="0x18"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="DMA CHANNEL N INTERRUPT ENABLE">
               <bitfield name="STS_EN_BUS_ERR"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n            1=Enable Interrupt\n                   0=Disable Interrupt"
                         mask="0x1"/>
               <bitfield name="STS_EN_FLOW_CTRL"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n            1=Enable Interrupt\n              0=Disable Interrupt"
                         mask="0x2"/>
               <bitfield name="STS_EN_DONE"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n             1=Enable Interrupt\n                      0=Disable Interrupt"
                         mask="0x4"/>
            </register>
            <register name="CRC_EN"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA CHANNEL N CRC ENABLE">
               <bitfield name="MODE"
                         caption="1=Enable the calculation of CRC-32 for DMA Channel N\n           0=Disable the calculation of CRC-32 for DMA Channel N"
                         mask="0x1"/>
               <bitfield name="POST_TRANS"
                         caption="The bit enables the transfer of the calculated CRC-32 after the completion of the DMA transaction.\n        If the DMA transaction is aborted by either firmware or an internal bus error, the transfer will not occur.\n           If the target of the DMA transfer is a device and the device signaled the termination of the DMA transaction,\n          the CRC post transfer will not occur.\n           1=Enable the transfer of CRC-32 for DMA Channel N after the DMA transaction completes\n           0=Disable the automatic transfer of the CRC"
                         mask="0x2"/>
            </register>
            <register name="CRC_DATA"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA CHANNEL N CRC DATA">
               <bitfield name="CRC"
                         caption="Writes to this register initialize the CRC generator. Reads from this register return the output of the\n          CRC that is calculated from the data transferred by DMA Channel N. The output of the CRC generator is bit-reversed\n        and inverted on reads, as required by the CRC-32-IEEE definition. A CRC can be accumulated across multiple DMA transactions\n          on Channel N. If it is necessary to save the intermediate CRC value, the result of the read of this register must be\n              bit-reversed and inverted before being written back to this register."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CRC_POST_STS"
                      offset="0x28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA CHANNEL N CRC POST STATUS">
               <bitfield name="CRC_DONE"
                         caption="This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n        It is cleared to '0b' when the DMA controller starts a new transfer on the channel."
                         mask="0x1"/>
               <bitfield name="CRC_RUNNING"
                         caption="This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n          It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n           to '0b' when the post-transfer completes."
                         mask="0x2"/>
               <bitfield name="CRC_DATA_DONE"
                         caption="This bit is set to '1b' when the DMA controller has completed the post-transfer of the CRC data.\n       This bit is cleared to '0b' when the a new DMA transfer starts."
                         mask="0x4"/>
               <bitfield name="CRC_DATA_READY"
                         caption="This bit is set to '1b' when the DMA controller is processing the post-transfer of the CRC data.\n        This bit is cleared to '0b' when the post-transfer completes."
                         mask="0x8"/>
            </register>
         </register-group>
         <value-group caption="" name="DMA_CHAN00_CTRL__STS">
            <value caption="3: Error detected by the DMA" name="ERROR" value="0x3"/>
            <value caption="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term"
                   name="EXT_DONE"
                   value="0x2"/>
            <value caption="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address"
                   name="LOC_DONE"
                   value="0x1"/>
            <value caption="0: DMA Channel Control:Run is Disabled (0x0)"
                   name="DIS"
                   value="0x0"/>
         </value-group>
      </module>
      <module name="DMA_CHAN01"
              id="85"
              version="1.0"
              caption="DMA Channel 01 Registers">
         <register-group name="DMA_CHAN01" caption="DMA Channel 01 Registers">
            <register name="ACTIVATE"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.">
               <bitfield name="CHN"
                         caption="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n           1=Enable channel(block). Each individual channel must be enabled separately.\n               0=Disable channel(block)."
                         mask="0x1"/>
            </register>
            <register name="MSTART"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the starting address for the Memory device.">
        </register>
            <register name="MEND"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the ending address for the Memory device.">
        </register>
            <register name="DSTART"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the Master Device address.">
        </register>
            <register name="CTRL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA Channel N Control">
               <bitfield name="RUN"
                         caption="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."
                         mask="0x1"/>
               <bitfield name="REQ"
                         caption="This is a status field.\n         1= There is a transfer request from the Master Device\n             0= There is no transfer request from the Master Device"
                         mask="0x2"/>
               <bitfield name="DONE"
                         caption="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n              This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n               0=Channel is not done or it is OFF"
                         mask="0x4"/>
               <bitfield name="STS"
                         caption="This is a status signal. The status decode is listed in priority order with the highest priority first.\n           3: Error detected by the DMA\n           2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)"
                         mask="0x18"
                         values="DMA_CHAN01_CTRL__STS"/>
               <bitfield name="BUSY"
                         caption="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"
                         mask="0x20"/>
               <bitfield name="TX_DIR"
                         caption="This determines the direction of the DMA Transfer.\n            1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n                0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"
                         mask="0x100"/>
               <bitfield name="HW_FLOW_CTRL_DEV"
                         caption="This is the device that is connected to this channel as its Hardware Flow Control master.\n         The Flow Control Interface is a bus with each master concatenated onto it.\n                   This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n         The Flow Control Interface Port list is dma_req, dma_term, and dma_done."
                         mask="0xFE00"/>
               <bitfield name="INC_MEM_ADDR"
                         caption="This will enable an auto-increment to the DMA Channel Memory Address.\n                 1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n               0=Do nothing"
                         mask="0x10000"/>
               <bitfield name="INC_DEV_ADDR"
                         caption="This will enable an auto-increment to the DMA Channel Device Address.\n           1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0: Do nothing"
                         mask="0x20000"/>
               <bitfield name="LOCK"
                         caption="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."
                         mask="0x40000"/>
               <bitfield name="DIS_HW_FLOW_CTRL"
                         caption="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."
                         mask="0x80000"/>
               <bitfield name="TRANS_SIZE"
                         caption="This is the transfer size in Bytes of each Data Packet transfer.\n      Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."
                         mask="0x700000"/>
               <bitfield name="TRANS_GO"
                         caption="This is used for the Firmware Flow Control DMA transfer."
                         mask="0x1000000"/>
               <bitfield name="TRANS_ABORT"
                         caption="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."
                         mask="0x2000000"/>
            </register>
            <register name="ISTS"
                      offset="0x14"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="DMA Channel N Interrupt Status">
               <bitfield name="BUS_ERROR"
                         caption="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n         1: Error detected. (R/WC)"
                         mask="0x1"/>
               <bitfield name="FLOW_CTRL"
                         caption="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n          after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n           1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"
                         mask="0x2"/>
               <bitfield name="DONE"
                         caption="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n      A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n                A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n           1=Memory Start Address equals Memory End Address\n         0=Memory Start Address does not equal Memory End Address"
                         mask="0x4"/>
            </register>
            <register name="IEN"
                      offset="0x18"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="DMA CHANNEL N INTERRUPT ENABLE">
               <bitfield name="STS_EN_BUS_ERR"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n       1=Enable Interrupt\n          0=Disable Interrupt"
                         mask="0x1"/>
               <bitfield name="STS_EN_FLOW_CTRL"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n             0=Disable Interrupt"
                         mask="0x2"/>
               <bitfield name="STS_EN_DONE"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n         1=Enable Interrupt\n                  0=Disable Interrupt"
                         mask="0x4"/>
            </register>
            <register name="FILL_EN"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA CHANNEL N FILL ENABLE">
               <bitfield name="MODE"
                         caption="1=Enable the calculation of CRC-32 for DMA Channel N\n             0=Disable the calculation of CRC-32 for DMA Channel N"
                         mask="0x1"/>
            </register>
            <register name="FILL_DATA"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA CHANNEL N FILL DATA">
               <bitfield name="DATA"
                         caption="This is the data pattern used to fill memory."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="FILL_STS"
                      offset="0x28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA CHANNEL N FILL STATUS">
               <bitfield name="DONE"
                         caption="This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n        It is cleared to '0b' when the DMA controller starts a new transfer on the channel."
                         mask="0x1"/>
               <bitfield name="RUNNING"
                         caption="This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n          It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n             to '0b' when the post-transfer completes."
                         mask="0x2"/>
            </register>
         </register-group>
         <value-group caption="" name="DMA_CHAN01_CTRL__STS">
            <value caption="3: Error detected by the DMA" name="ERROR" value="0x3"/>
            <value caption="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term"
                   name="EXT_DONE"
                   value="0x2"/>
            <value caption="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address"
                   name="LOC_DONE"
                   value="0x1"/>
            <value caption="0: DMA Channel Control:Run is Disabled (0x0)"
                   name="DIS"
                   value="0x0"/>
         </value-group>
      </module>
      <module name="DMA_CHAN02"
              id="85"
              version="1.0"
              caption="DMA Channel 00 Registers">
         <register-group name="DMA_CHAN02" caption="DMA Channel 00 Registers">
            <register name="ACTIVATE"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.">
               <bitfield name="CHN"
                         caption="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."
                         mask="0x1"/>
            </register>
            <register name="MSTART"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the starting address for the Memory device.">
        </register>
            <register name="MEND"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the ending address for the Memory device.">
        </register>
            <register name="DSTART"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the Master Device address.">
        </register>
            <register name="CTRL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="DMA Channel N Control">
               <bitfield name="RUN"
                         caption="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."
                         mask="0x1"/>
               <bitfield name="REQ"
                         caption="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"
                         mask="0x2"/>
               <bitfield name="DONE"
                         caption="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"
                         mask="0x4"/>
               <bitfield name="STS"
                         caption="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)"
                         mask="0x18"
                         values="DMA_CHAN02_CTRL__STS"/>
               <bitfield name="BUSY"
                         caption="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"
                         mask="0x20"/>
               <bitfield name="TX_DIR"
                         caption="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"
                         mask="0x100"/>
               <bitfield name="HW_FLOW_CTRL_DEV"
                         caption="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."
                         mask="0xFE00"/>
               <bitfield name="INC_MEM_ADDR"
                         caption="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"
                         mask="0x10000"/>
               <bitfield name="INC_DEV_ADDR"
                         caption="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"
                         mask="0x20000"/>
               <bitfield name="LOCK"
                         caption="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."
                         mask="0x40000"/>
               <bitfield name="DIS_HW_FLOW_CTRL"
                         caption="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."
                         mask="0x80000"/>
               <bitfield name="TRANS_SIZE"
                         caption="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."
                         mask="0x700000"/>
               <bitfield name="TRANS_GO"
                         caption="This is used for the Firmware Flow Control DMA transfer."
                         mask="0x1000000"/>
               <bitfield name="TRANS_ABORT"
                         caption="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."
                         mask="0x2000000"/>
            </register>
            <register name="ISTS"
                      offset="0x14"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="DMA Channel N Interrupt Status">
               <bitfield name="BUS_ERR"
                         caption="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"
                         mask="0x1"/>
               <bitfield name="FLOW_CTRL"
                         caption="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"
                         mask="0x2"/>
               <bitfield name="DONE"
                         caption="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"
                         mask="0x4"/>
            </register>
            <register name="IEN"
                      offset="0x18"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="DMA CHANNEL N INTERRUPT ENABLE">
               <bitfield name="STS_EN_BUS_ERR"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"
                         mask="0x1"/>
               <bitfield name="STS_EN_FLOW_CTRL"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"
                         mask="0x2"/>
               <bitfield name="STS_EN_DONE"
                         caption="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"
                         mask="0x4"/>
            </register>
         </register-group>
         <value-group caption="" name="DMA_CHAN02_CTRL__STS">
            <value caption="3: Error detected by the DMA" name="ERROR" value="0x3"/>
            <value caption="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term"
                   name="EXT_DONE"
                   value="0x2"/>
            <value caption="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address"
                   name="LOC_DONE"
                   value="0x1"/>
            <value caption="0: DMA Channel Control:Run is Disabled (0x0)"
                   name="DIS"
                   value="0x0"/>
         </value-group>
      </module>
      <module name="ECIA"
              version="1.0"
              caption="The interrupt generation logic is made of 16 groups of signals, each of which\n         consist of a Status register, a Enable register and a Result register. The Status and Enable are\n        latched registers. The Result register is a bit by bit AND function of the Source and Enable registers.\n         All the bits of the Result register are OR'ed together and AND'ed with the corresponding bit in the Block\n         Select register to form the interrupt signal that is routed to the ARM interrupt controller.">
         <register-group name="GIRQ" size="0x14">
            <register name="SRC"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Status R/W1C">
        </register>
            <register name="EN_SET"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      atomic-op="set:GIRQ08_EN_SET"
                      initval="0x00000000"
                      caption="Write to set source enables">
        </register>
            <register name="RESULT"
                      offset="0x8"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Read-only bitwise OR of Source and Enable">
        </register>
            <register name="EN_CLR"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      atomic-op="clear:GIRQ08_EN_CLR"
                      initval="0x00000000"
                      caption="Write to clear source enables">
        </register>
         </register-group>
         <register-group name="ECIA"
                         caption="The interrupt generation logic is made of 16 groups of signals, each of which\n            consist of a Status register, a Enable register and a Result register. The Status and Enable are\n          latched registers. The Result register is a bit by bit AND function of the Source and Enable registers.\n        All the bits of the Result register are OR'ed together and AND'ed with the corresponding bit in the Block\n       Select register to form the interrupt signal that is routed to the ARM interrupt controller.">
            <register-group name="GIRQ"
                            name-in-module="GIRQ"
                            offset="0x0"
                            size="0x14"
                            count="19"/>
            <register name="BLK_EN_SET"
                      offset="0x200"
                      rw="RW"
                      size="4"
                      access-size="4"
                      atomic-op="set:BLOCK_ENABLE_SET"
                      initval="0x00000000"
                      caption="Block Enable Set Register">
               <bitfield name="VTOR_EN_SET"
                         caption="Each GIRQx bit can be individually enabled to assert an interrupt event.\n          Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n         the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_ CLEAR bit. (0=disabled, 1=enabled) (R/WS)\n           1=Interrupts in the GIRQx Source Register may be enabled\n               0=No effect."
                         mask="0x7FFFFFFF"/>
            </register>
            <register name="BLK_EN_CLR"
                      offset="0x204"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Block Enable Clear Register.">
               <bitfield name="VTOR_EN_CLR"
                         caption="Each GIRQx bit can be individually disabled to inhibit an interrupt event.\n        Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n         the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_ CLEAR bit. (0=disabled, 1=enabled) (R/WC)\n                 1=All interrupts in the GIRQx Source Register are disabled\n             0=No effect."
                         mask="0x7FFFFFFF"/>
            </register>
            <register name="BLK_IRQ_VTOR"
                      offset="0x208"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Block IRQ Vector Register">
               <bitfield name="VTOR"
                         caption="Each bit in this field reports the status of the group GIRQ interrupt assertion to the NVIC. If the GIRQx interrupt\n       is disabled as a group, by the Block Enable Clear Register, then the corresponding bit will be '0'b and no interrupt will be asserted."
                         mask="0x1FFFFFF"/>
            </register>
         </register-group>
      </module>
      <module name="GCR"
              id="101"
              version="1.0"
              caption="The Logical Device Configuration registers support motherboard designs in\n        which the resources required by their components are known and assigned by the BIOS\n          at POST.">
         <register-group name="GCR"
                         caption="The Logical Device Configuration registers support motherboard designs in\n          which the resources required by their components are known and assigned by the BIOS\n       at POST.">
            <register name="LDN"
                      offset="0x7"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="A write to this register selects the current logical device. This allows access to the control and configuration\n         registers for each logical device. Note: The Activate command operates only on the selected logical device.">
        </register>
            <register name="DEV_ID"
                      offset="0x20"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x31"
                      caption="A read-only register which provides device identification.">
        </register>
            <register name="DEV_REV"
                      offset="0x21"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="A read-only register which provides device revision information.">
        </register>
         </register-group>
      </module>
      <module name="UART"
              id="39"
              version="1.0"
              caption="The 16550 UART (Universal Asynchronous Receiver/Transmitter) is a\n          full-function Two Pin Serial Port that supports the standard RS-232 Interface.">
         <register-group name="UART"
                         caption="The 16550 UART (Universal Asynchronous Receiver/Transmitter) is a\n      full-function Two Pin Serial Port that supports the standard RS-232 Interface.">
            <mode name="DATA"
                  qualifier="UART.LINE_CR.DLAB"
                  mask="0x80"
                  value="0x00"
                  caption="UART when DLAB=0"/>
            <mode name="DLAB"
                  qualifier="UART.LINE_CR.DLAB"
                  mask="0x80"
                  value="0x80"
                  caption="UART when DLAB=1"/>
            <register modes="DATA"
                      name="RX_DAT"
                      offset="0x0"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Receive (Read) Buffer Register (DLAB=0)">
		</register>
            <register modes="DATA"
                      name="TX_DAT"
                      offset="0x0"
                      rw="W"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Transmit (Write) Buffer Register (DLAB=0)">
		</register>
            <register modes="DLAB"
                      name="BAUDRT_LSB"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Programmable BAUD Rate Generator (LSB) Register (DLAB=1)">
		</register>
            <register modes="DLAB"
                      name="BAUDRT_MSB"
                      offset="0x1"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Programmable BAUD Rate Generator (MSB) Register (DLAB=1)[6:0] BAUD_RATE_DIVISOR_MSB, [7:7] BAUD_CLK_SEL \n       1=If CLK_SRC is '0', the baud clock is derived from the 1.8432MHz_Clk. If CLK_SRC is '1', this bit has no effect\n            0=If CLK_SRC is '0', the baud clock is derived from the 24MHz_Clk. If CLK_SRC is '1', this bit has no effect">	
		</register>
            <register modes="DATA"
                      name="IEN"
                      offset="0x1"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Interrupt Enable Register (DLAB=0)">
               <bitfield name="ERDAI"
                         caption="ERDAI This bit enables the Received Data Available Interrupt (and timeout interrupts in the FIFO mode) when set to logic '1'."
                         mask="0x1"/>
               <bitfield name="ETHREI"
                         caption="ETHREI This bit enables the Transmitter Holding Register Empty Interrupt when set to logic '1'."
                         mask="0x2"/>
               <bitfield name="ELSI"
                         caption="ELSI This bit enables the Received Line Status Interrupt when set to logic '1'."
                         mask="0x4"/>
               <bitfield name="EMSI"
                         caption="EMSI  This bit enables the MODEM Status Interrupt when set to logic '1'."
                         mask="0x8"/>
            </register>
            <register modes="DLAB DATA"
                      name="FIFO_CR"
                      offset="0x2"
                      rw="W"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART FIFO Control Register">
               <bitfield name="EXRF" caption="EXRF Enable XMIT and RECV FIFO." mask="0x1"/>
               <bitfield name="CLR_RECV_FIFO"
                         caption="CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'."
                         mask="0x2"/>
               <bitfield name="CLR_XMIT_FIFO"
                         caption="CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing."
                         mask="0x4"/>
               <bitfield name="DMA_MODE_SEL"
                         caption="DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip."
                         mask="0x8"/>
               <bitfield name="RECV_FIFO_TRIG_LVL"
                         caption="RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt."
                         mask="0xC0"/>
            </register>
            <register modes="DLAB DATA"
                      name="INT_ID"
                      offset="0x2"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Interrupt Identification Register">
               <bitfield name="IPEND"
                         caption="IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending."
                         mask="0x1"/>
               <bitfield name="INTID"
                         caption="INTID  These bits identify the highest priority interrupt pending"
                         mask="0xE"/>
               <bitfield name="FIFO_EN"
                         caption="These two bits are set when the FIFO CONTROL Register bit 0 equals 1."
                         mask="0xC0"/>
            </register>
            <register modes="DLAB DATA"
                      name="LCR"
                      offset="0x3"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Line Control Register">
               <bitfield name="WORD_LEN"
                         caption="WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character."
                         mask="0x3"/>
               <bitfield name="STOP_BITS"
                         caption="STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character."
                         mask="0x4"/>
               <bitfield name="EN_PAR"
                         caption="ENABLE_PARITY  Parity Enable bit."
                         mask="0x8"/>
               <bitfield name="PAR_SEL"
                         caption="PARITY_SELECT Even Parity Select bit."
                         mask="0x10"/>
               <bitfield name="STICK_PAR"
                         caption="STICK_PARITY  Stick Parity bit."
                         mask="0x20"/>
               <bitfield name="BRK_CTRL"
                         caption="BREAK_CONTROL Set Break Control bit"
                         mask="0x40"/>
               <bitfield name="DLAB"
                         caption="DLAB Divisor Latch Access Bit (DLAB)."
                         mask="0x80"/>
            </register>
            <register modes="DLAB DATA"
                      name="MCR"
                      offset="0x4"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Modem Control Register">
               <bitfield name="DTR"
                         caption="DTR  This bit controls the Data Terminal Ready (nDTR) output."
                         mask="0x1"/>
               <bitfield name="RTS"
                         caption="RTS  This bit controls the Request To Send (nRTS) output."
                         mask="0x2"/>
               <bitfield name="OUT1"
                         caption="OUT1 This bit controls the Output 1 (OUT1) bit."
                         mask="0x4"/>
               <bitfield name="OUT2"
                         caption="OUT2  This bit is used to enable an UART interrupt."
                         mask="0x8"/>
               <bitfield name="LOOPBACK"
                         caption="LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port."
                         mask="0x10"/>
            </register>
            <register modes="DLAB DATA"
                      name="LSR"
                      offset="0x5"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Line Status Register">
               <bitfield name="DATA_READY"
                         caption="DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO"
                         mask="0x1"/>
               <bitfield name="OVERRUN" caption="OVERRUN  Overrun Error." mask="0x2"/>
               <bitfield name="PE" caption="PARITY ERROR  Parity Error." mask="0x4"/>
               <bitfield name="FRAME_ERR" caption="FRAME_ERROR Framing Error." mask="0x8"/>
               <bitfield name="BRK_INTR"
                         caption="BREAK_INTERRUPT   Break Interrupt."
                         mask="0x10"/>
               <bitfield name="TRANS_EMPTY"
                         caption="TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission."
                         mask="0x20"/>
               <bitfield name="TRANS_ERR"
                         caption="Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty."
                         mask="0x40"/>
               <bitfield name="FIFO_ERR" caption="FIFO_ERROR" mask="0x80"/>
            </register>
            <register modes="DLAB DATA"
                      name="MSR"
                      offset="0x6"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Modem Status Register">
               <bitfield name="CTS" caption="CTS  Delta Clear To Send (DCTS)." mask="0x1"/>
               <bitfield name="DSR" caption="DSR  Delta Data Set Ready (DDSR)." mask="0x2"/>
               <bitfield name="RI"
                         caption="RI  Trailing Edge of Ring Indicator (TERI)."
                         mask="0x4"/>
               <bitfield name="DCD"
                         caption="DCD  Delta Data Carrier Detect (DDCD)."
                         mask="0x8"/>
               <bitfield name="nCTS"
                         caption="nCTS  This bit is the complement of the Clear To Send (nCTS) input."
                         mask="0x10"/>
               <bitfield name="nDSR"
                         caption="This bit is the complement of the Data Set Ready (nDSR) input."
                         mask="0x20"/>
               <bitfield name="nRI"
                         caption="nRI This bit is the complement of the Ring Indicator (nRI) input."
                         mask="0x40"/>
               <bitfield name="nDCD"
                         caption="nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input."
                         mask="0x80"/>
            </register>
            <register modes="DLAB DATA"
                      name="SCR"
                      offset="0x7"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Scratchpad Register    This 8 bit read/write register has no effect on the operation of the Serial Port. It is intended as a scratchpad register to be used by the programmer to hold data temporarily.">
        </register>
            <register modes="DLAB DATA"
                      name="ACTIVATE"
                      offset="0x330"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Activate Register. [0:0] ACTIVATE When this bit is 1, the UART logical device is powered and functional. When this bit is 0, the UART logical device is powered down and inactive.">
        </register>
            <register modes="DLAB DATA"
                      name="CFG_SEL"
                      offset="0x3F0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="UART Config Select Register">
               <bitfield name="CLK_SRC"
                         caption="CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources"
                         mask="0x1"/>
               <bitfield name="PWR"
                         caption="POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET"
                         mask="0x2"/>
               <bitfield name="POLAR"
                         caption="POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted"
                         mask="0x4"/>
            </register>
         </register-group>
      </module>
      <module name="GPIO"
              id="26"
              version="1.0"
              caption="GPIO Pin Control Registers">
         <register-group name="GPIO" caption="GPIO Pin Control Registers">
            <register name="CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="0xAC"
                      initval="0x00000000"
                      caption="GPIO Pin Control Register">
               <bitfield name="PU_PD"
                         caption="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"
                         mask="0x3"/>
               <bitfield name="PWR_GATING"
                         caption="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"
                         mask="0xC"/>
               <bitfield name="INTR_DET"
                         caption="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"
                         mask="0x70"/>
               <bitfield name="EDGE_EN"
                         caption="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"
                         mask="0x80"/>
               <bitfield name="OUT_BUFF_TYPE"
                         caption="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"
                         mask="0x100"/>
               <bitfield name="GPIO_DIR"
                         caption="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"
                         mask="0x200"/>
               <bitfield name="GPIO_OUT_SEL"
                         caption="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."
                         mask="0x400"/>
               <bitfield name="POL"
                         caption="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"
                         mask="0x800"/>
               <bitfield name="MUX_CTRL"
                         caption="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."
                         mask="0x3000"/>
               <bitfield name="ALT_GPIO_DATA"
                         caption="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."
                         mask="0x10000"/>
               <bitfield name="GPIO_INP"
                         caption="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."
                         mask="0x1000000"/>
            </register>
            <register name="PARIN"
                      offset="0x300"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="6"
                      initval="0x00000000"
                      caption="The GPIO Input Registers.">
        </register>
            <register name="PAROUT"
                      offset="0x380"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="6"
                      initval="0x00000000"
                      caption="The GPIO Output Registers.">
        </register>
            <register name="CTRL2P"
                      offset="0x500"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="0xAC"
                      initval="0x00000000"
                      caption="The GPIO PIN_CTRL2 Registers">
               <bitfield name="SLEW_RATE"
                         caption="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"
                         mask="0x1"/>
               <bitfield name="DRIV_STREN"
                         caption="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"
                         mask="0x30"/>
            </register>
         </register-group>
      </module>
      <module name="WDT"
              id="88"
              version="1.0"
              caption="The function of the Watchdog Timer is to provide a mechanism to detect\n                          if the internal embedded controller has failed. When enabled, the Watchdog Timer (WDT) circuit\n              will generate a WDT Event if the user program fails to reload the WDT within a specified length\n              of time known as the WDT Interval.">
         <register-group name="WDT"
                         caption="The function of the Watchdog Timer is to provide a mechanism to detect\n                         if the internal embedded controller has failed. When enabled, the Watchdog Timer (WDT) circuit\n             will generate a WDT Event if the user program fails to reload the WDT within a specified length\n              of time known as the WDT Interval.">
            <register name="LOAD"
                      offset="0x0"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x000F"
                      caption="Writing this field reloads the Watch Dog Timer counter.">
        </register>
            <register name="CTRL"
                      offset="0x4"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x0000"
                      caption="WDT Control Register">
               <bitfield name="WDT_EN" caption="WDT Block enabled" mask="0x1"/>
               <bitfield name="WDT_STS"
                         caption="WDT_STS is set by hardware if the last reset of the device was caused by an underflow of the WDT. This bit must\n                      be cleared by the EC firmware writing a '1' to this bit. Writing a '0' to this bit has no effect."
                         mask="0x2"/>
               <bitfield name="HIB_TMR0_STL"
                         caption="This bit enables the WDT Stall function if the Hibernation Timer 0 is active.\n                1=The WDT is stalled while the Hibernation Timer 0 is active\n                                 0=The WDT is not affected by Hibernation Timer 0."
                         mask="0x4"/>
               <bitfield name="WK_TMR_STL"
                         caption="This bit enables the WDT Stall function if the Week Timer is active.\n                          1=The WDT is stalled while the Week Timer is active\n                    0=The WDT is not affected by the Week Timer."
                         mask="0x8"/>
               <bitfield name="JTAG_STL"
                         caption="This bit enables the WDT Stall function if JTAG or SWD debug functions are active\n                              1=The WDT is stalled while either JTAG or SWD is active\n                     0=The WDT is not affected by the JTAG debug interface."
                         mask="0x10"/>
            </register>
            <register name="KICK"
                      offset="0x8"
                      rw="W"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="The WDT Kick Register is a strobe. Reads of this register return 0.\n       Writes to this register cause the WDT to reload\n                        the WDT Load Register value and start decrementing when the WDT_ENABLE bit in the WDT Control Register is set to '1'. When the WDT_ENABLE\n           bit in the WDT Control Register is cleared to '0', writes to the WDT Kick Register have no effect.">
        </register>
            <register name="CNT"
                      offset="0xC"
                      rw="R"
                      size="2"
                      access-size="2"
                      initval="0xFFFF"
                      caption="This read-only register provides the current WDT count.">
        </register>
         </register-group>
      </module>
      <module name="TIMER16"
              id="108a"
              version="1.0"
              caption="This timer block offers a simple mechanism for firmware to maintain a time base. This timer may be instantiated as 16 bits.\n      The name of the timer instance indicates the size of the timer.">
         <register-group name="TIMER16"
                         caption="This timer block offers a simple mechanism for firmware to maintain a time base. This timer may be instantiated as 16 bits.\n      The name of the timer instance indicates the size of the timer.">
            <register name="CNT"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the value of the Timer counter.\n       This is updated by Hardware but may be set by Firmware.">
        </register>
            <register name="PRLD"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the value of the Timer pre-load for the counter.\n       This is used by H/W when the counter is to be restarted\n      automatically; this will become the new value of the counter upon restart.">
        </register>
            <register name="STS"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the interrupt status that fires when the timer reaches its limit">
               <bitfield name="EVT_INT"
                         caption="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"
                         mask="0x1"/>
            </register>
            <register name="IEN"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register">
               <bitfield name="EN"
                         caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."
                         mask="0x1"/>
            </register>
            <register name="CTRL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Timer Control Register">
               <bitfield name="EN"
                         caption="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"
                         mask="0x1"/>
               <bitfield name="CNT_UP"
                         caption="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"
                         mask="0x4"/>
               <bitfield name="AU_RESTRT"
                         caption="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."
                         mask="0x8"/>
               <bitfield name="SFT_RST"
                         caption="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."
                         mask="0x10"/>
               <bitfield name="STRT"
                         caption="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."
                         mask="0x20"/>
               <bitfield name="RLD"
                         caption="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."
                         mask="0x40"/>
               <bitfield name="HLT"
                         caption="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."
                         mask="0x80"/>
               <bitfield name="PRESCALE"
                         caption="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."
                         mask="0xFFFF0000"/>
            </register>
         </register-group>
      </module>
      <module name="TIMER32"
              id="108b"
              version="1.0"
              caption="This timer block offers a simple mechanism for firmware to maintain a time base. This timer may be instantiated as \n      32 bits. The name of the timer instance indicates the size of the timer.">
         <register-group name="TIMER32"
                         caption="This timer block offers a simple mechanism for firmware to maintain a time base. This timer may be instantiated as \n      32 bits. The name of the timer instance indicates the size of the timer.">
            <register name="CNT"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the value of the Timer counter. This is updated by Hardware but may be set by Firmware.">
        </register>
            <register name="PRLD"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the value of the Timer pre-load for the counter.\n       This is used by H/W when the counter is to be restarted\n      automatically; this will become the new value of the counter upon restart.">
        </register>
            <register name="STS"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the interrupt status that fires when the timer reaches its limit">
               <bitfield name="EVT_INT"
                         caption="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"
                         mask="0x1"/>
            </register>
            <register name="IEN"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register">
               <bitfield name="EN"
                         caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."
                         mask="0x1"/>
            </register>
            <register name="CTRL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Timer Control Register">
               <bitfield name="EN"
                         caption="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"
                         mask="0x1"/>
               <bitfield name="CNT_UP"
                         caption="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"
                         mask="0x4"/>
               <bitfield name="AU_RESTRT"
                         caption="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."
                         mask="0x8"/>
               <bitfield name="SFT_RST"
                         caption="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."
                         mask="0x10"/>
               <bitfield name="STRT"
                         caption="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."
                         mask="0x20"/>
               <bitfield name="RLD"
                         caption="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."
                         mask="0x40"/>
               <bitfield name="HLT"
                         caption="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."
                         mask="0x80"/>
               <bitfield name="PRESCALE"
                         caption="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."
                         mask="0xFFFF0000"/>
            </register>
         </register-group>
      </module>
      <module name="CNT_TMR"
              id="69"
              version="1.0"
              caption="This interface is a 16-bit auto-reloading timer/counter.">
         <register-group name="CNT_TMR"
                         caption="This interface is a 16-bit auto-reloading timer/counter.">
            <register name="TIMERX_CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This bit reflects the current state of the timer's Clock_Required output signal.">
               <bitfield name="EN"
                         caption="This bit is used to start and stop the timer. This bit does not reset the timer count but does reset the timer\n                       pulse output. This bit will be cleared when the timer stops counting in One-Shot mode. The ENABLE bit is cleared after a\n           RESET cycle has completed. Firmware must poll the RESET bit in order to determine when the timer is active after reset.\n        1=Timer is enabled; 0=Timer is disabled."
                         mask="0x1"/>
               <bitfield name="RST"
                         caption="This bit stops the timer and resets the internal counter to the value in the Timer Reload Register. This bit\n                   also clears the ENABLE bit if it is set. This bit is self-clearing after the timer is reset. Firmware must poll the\n          RESET bit in order to determine when the timer is active after reset. Interrupts are blocked only when RESET takes\n        effect and the ENABLE bit is cleared. If interrupts are not desired, firmware must mask the interrupt in the interrupt\n       block. 1=Timer reset; 0=Normal timer operation."
                         mask="0x2"/>
               <bitfield name="MODE"
                         caption="Timer Mode. 3=Measurement Mode; 2=One Shot Mode; 1=Event Mode; 0=Timer Mode."
                         mask="0xC"
                         values="CNT_TMR_TIMERX_CTRL__MODE"/>
               <bitfield name="INPOL"
                         caption="This bit selects the polarity of the TINx input. 1=TINx is active low; 0=TINx is active high."
                         mask="0x10"/>
               <bitfield name="UPDN"
                         caption="In Event Mode, this bit selects the timer count direction. In Timer Mode enables timer control by the TINx input pin.\n          Event Mode: 1=The timer counts up; 0=The timer counts down.\n                 Timer Mode:; 1=TINx pin pauses the timer when de-asserted; 0=TINx pin has no effect on the timer."
                         mask="0x20"/>
               <bitfield name="TOUT_EN"
                         caption="This bit enables the TOUTx pin. 1=TOUTx pin function is enabled; 0=TOUTx pin is inactive."
                         mask="0x40"/>
               <bitfield name="RLOAD"
                         caption="Reload Control. This bit controls how the timer is reloaded on overflow or underflow in Event and Timer modes.\n                    It has no effect in One shot mode. 1=Reload timer from Timer Reload Register and continue counting;\n                    0=Roll timer over to FFFFh and continue counting when counting down and rolls over to 0000h and continues counting when counting up."
                         mask="0x80"/>
               <bitfield name="FIL_BYPASS"
                         caption="This bit is used to enable or disable the noise filter on the TINx input signal. 1=Bypass Mode: input filter disabled.\n                     The TINx input directly affects the timer; 0=Filter Mode: input filter enabled. The TINx input is filtered by the input filter."
                         mask="0x100"/>
               <bitfield name="PD"
                         caption="Power Down. 1=The timer is powered down and all clocks are gated; 0=The timer is in a running state."
                         mask="0x200"/>
               <bitfield name="TOUT_POL"
                         caption="This bit determines the polarity of the TOUTx output signal. In timer modes that toggle the TOUTx signal,\n           this polarity bit will not have a perceivable difference, except to determine the inactive state. In One-Shot mode\n           this determines if the pulsed output is active high or active low. 1=Active low; 0=Active high."
                         mask="0x400"/>
               <bitfield name="SLP_EN"
                         caption="This bit reflects the current state of the timer's Sleep_Enable input signal. 1=Normal operation; 0=Sleep Mode is requested."
                         mask="0x800"/>
               <bitfield name="TMRX_CLK_REQ"
                         caption="This bit reflects the current state of the timer's Clock_Required output signal. 1=The main clock is required by this block;\n         0=The main clock is not required by this block."
                         mask="0x1000"/>
            </register>
            <register name="PRLD"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This is the value of the Timer pre-load for the counter.\n       This is used by H/W when the counter is to be restarted automatically; this will become the new value of the counter upon restart.">
               <bitfield name="TCLK"
                         caption="Timer Clock Select. This field determines the clock source for the 16-bit counter in the timer."
                         mask="0xF"/>
               <bitfield name="EDGE"
                         caption="This field selects which edge of the TINx input signal affects the timer in Event Mode, One-Shot Mode and Measurement Mode.\n          Event Mode: 11b=No event selected; 10b=Counts rising and falling edges; 01b=Counts rising edges; 00b=Counts falling edges.\n         One-Shot Mode: 11b=Start counting when the Enable bit is set; 10b=Starts counting on a rising or falling edge; 01b=Starts\n       counting on a rising edge; 00b=Starts counting on a falling edge. Measurement Mode: 11b=No event selected; 10b=Measures\n         the time between rising edges and falling edges and the time between falling edges and rising edges; 01b=Measures the\n        time between rising edges; 00b=Measures the time between falling edges."
                         mask="0x60"/>
               <bitfield name="EVENT"
                         caption="Event Select. This bit is used to select the count source when the timer is operating in Event Mode.\n          1=TINx is count source; 0=Timer x-1 overflow is count source."
                         mask="0x80"/>
               <bitfield name="FCLK"
                         caption="Timer Clock Select. This field determines the clock source for the TINx noise filter. The available frequencies\n                are the same as for TCLK."
                         mask="0xF00"/>
            </register>
            <register name="TIMERX_RLD"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000FFFF"
                      caption="This register is used in Timer and One-Shot modes to set the lower limit of the timer.">
               <bitfield name="TMR_RLD"
                         caption="The Timer Reload register is used in Timer and One-Shot modes to set the lower limit of the timer.\n                 In Event mode the Timer Reload register sets either the upper or lower limit of the timer depending on if the\n            timer is counting up or down. Valid Timer Reload values are 0001h - FFFFh. If the timer is running, the\n                 reload value will not be updated until the timer overflows or underflows. Programming a 0000h as a preload\n             value is not a valid count value. Using a value of 0000h will cause unpredictable behavior."
                         mask="0xFFFF"/>
            </register>
            <register name="TIMERX_CNT"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000FFFF"
                      caption="This register returns the current value of the timer in all modes.">
               <bitfield name="TMR_CNT"
                         caption="This is the current value of the timer in all modes."
                         mask="0xFFFF"/>
            </register>
         </register-group>
         <value-group caption="" name="CNT_TMR_TIMERX_CTRL__MODE">
            <value caption="0=Timer Mode" name="TIMER_MODE" value="0x0"/>
            <value caption="1=Event Mode" name="EVENT_MODE" value="0x1"/>
            <value caption="2=One Shot Mode" name="ONE_SHOT_MODE" value="0x2"/>
            <value caption="3=Measurement Mode" name="MEASUREMENT_MODE" value="0x3"/>
         </value-group>
      </module>
      <module name="CCT"
              id="12"
              version="1.0"
              caption="This is a 16-bit auto-reloading timer/counter.">
         <register-group name="CCT" caption="This is a 16-bit auto-reloading timer/counter.">
            <register name="CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x03030000"
                      caption="This register controls the capture and compare timer.">
               <bitfield name="ACT"
                         caption="This bit is used to start the capture and compare timer running and power it down."
                         mask="0x1"/>
               <bitfield name="FREE_EN"
                         caption="Free-Running Timer Enable. This bit is used to start and stop the free running timer."
                         mask="0x2"/>
               <bitfield name="FREE_RST"
                         caption="Free Running Timer Reset. This bit stops the timer and resets the internal counter to 0000_0000h."
                         mask="0x4"/>
               <bitfield name="TCLK"
                         caption="This 3-bit field sets the clock source for the Free-Running Counter."
                         mask="0x70"/>
               <bitfield name="CMP_EN0"
                         caption="Compare Enable for Compare 0 Register."
                         mask="0x100"/>
               <bitfield name="CMP_EN1"
                         caption="Compare Enable for Compare 1 Register."
                         mask="0x200"/>
               <bitfield name="CMP_SET1"
                         caption="When read, returns the current value off the Compare Timer Output 1 state."
                         mask="0x10000"/>
               <bitfield name="CMP_SET0"
                         caption="When read, returns the current value off the Compare Timer Output 0 state."
                         mask="0x20000"/>
               <bitfield name="CMP_CLR1"
                         caption="When read, returns the current value off the Compare Timer Output 1 state."
                         mask="0x1000000"/>
               <bitfield name="CMP_CLR0"
                         caption="When read, returns the current value off the Compare Timer Output 0 state."
                         mask="0x2000000"/>
            </register>
            <register name="CAP0_CTRL"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register is used to configure capture and compare timers 0-3.">
               <bitfield name="CAP_EDGE0"
                         caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 0."
                         mask="0x3"/>
               <bitfield name="FILTER_BYP0"
                         caption="This bit enables bypassing the input noise filter for Capture Register 0, so that the input signal goes directly into the timer."
                         mask="0x4"/>
               <bitfield name="FCLK_SEL0"
                         caption="This 3-bit field sets the clock source for the input filter for Capture Register 0."
                         mask="0xE0"/>
               <bitfield name="CAP_EDGE1"
                         caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 1."
                         mask="0x300"/>
               <bitfield name="FILTER_BYP1"
                         caption="This bit enables bypassing the input noise filter for Capture Register 1, so that the input signal goes directly into the timer."
                         mask="0x400"/>
               <bitfield name="FCLK_SEL1"
                         caption="This 3-bit field sets the clock source for the input filter for Capture Register 1."
                         mask="0xE000"/>
               <bitfield name="CAP_EDGE2"
                         caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 2."
                         mask="0x30000"/>
               <bitfield name="FILTER_BYP2"
                         caption="This bit enables bypassing the input noise filter for Capture Register 2, so that the input signal goes directly into the timer."
                         mask="0x40000"/>
               <bitfield name="FCLK_SEL2"
                         caption="This 3-bit field sets the clock source for the input filter for Capture Register 2."
                         mask="0xE00000"/>
               <bitfield name="CAP_EDGE3"
                         caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 3."
                         mask="0x3000000"/>
               <bitfield name="FILTER_BYP3"
                         caption="This bit enables bypassing the input noise filter for Capture Register 3, so that the input signal goes directly into the timer."
                         mask="0x4000000"/>
               <bitfield name="FCLK_SEL3"
                         caption="This 3-bit field sets the clock source for the input filter for Capture Register 3."
                         mask="0xE0000000"/>
            </register>
            <register name="CAP1_CTRL"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register is used to configure capture and compare timers 4-5.">
               <bitfield name="CAP_EDGE4"
                         caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 4."
                         mask="0x3"/>
               <bitfield name="FILTER_BYP4"
                         caption="This bit enables bypassing the input noise filter for Capture Register 4, so that the input signal goes directly into the timer."
                         mask="0x4"/>
               <bitfield name="FCLK_SEL4"
                         caption="This 3-bit field sets the clock source for the input filter for Capture Register 4."
                         mask="0xE0"/>
               <bitfield name="CAP_EDGE5"
                         caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 5."
                         mask="0x300"/>
               <bitfield name="FILTER_BYP5"
                         caption="This bit enables bypassing the input noise filter for Capture Register 5, so that the input signal goes directly into the timer."
                         mask="0x400"/>
               <bitfield name="FCLK_SEL5"
                         caption="This 3-bit field sets the clock source for the input filter for Capture Register 5."
                         mask="0xE000"/>
            </register>
            <register name="FREE_RUN"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register contains the current value of the Free Running Timer.">
               <bitfield name="TMR"
                         caption="This register contains the current value of the Free Running Timer."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CAP0"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0.">
               <bitfield name="CAP_0"
                         caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CAP1"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT1.">
               <bitfield name="CAP_1"
                         caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT1."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CAP2"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0.">
               <bitfield name="CAP_2"
                         caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT2."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CAP3"
                      offset="0x1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0.">
               <bitfield name="CAP_3"
                         caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT3."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CAP4"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT4.">
               <bitfield name="CAP_4"
                         caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT4."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CAP5"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT5.">
               <bitfield name="CAP_5"
                         caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT5."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="COMP0"
                      offset="0x28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer.">
               <bitfield name="COMP_0"
                         caption="A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="COMP1"
                      offset="0x2C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer.">
               <bitfield name="COMP_1"
                         caption="A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer."
                         mask="0xFFFFFFFF"/>
            </register>
         </register-group>
      </module>
      <module name="HTM"
              id="29"
              version="1.0"
              caption="The Hibernation Timer can generate a wake event to the Embedded Controller (EC) when it is in a hibernation mode.\n        This block supports wake events up to 2 hours in duration. The timer is a 16-bit binary count-down timer that can be programmed\n        in 30.5us and 0.125 second increments for period ranges of 30.5us to 2s or 0.125s to 136.5 minutes, respectively.">
         <register-group name="HTM"
                         caption="The Hibernation Timer can generate a wake event to the Embedded Controller (EC) when it is in a hibernation mode.\n         This block supports wake events up to 2 hours in duration. The timer is a 16-bit binary count-down timer that can be programmed\n          in 30.5us and 0.125 second increments for period ranges of 30.5us to 2s or 0.125s to 136.5 minutes, respectively.">
            <register name="PRLD"
                      offset="0x0"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="[15:0] This register is used to set the Hibernation Timer Preload value.">
        </register>
            <register name="CTRL"
                      offset="0x4"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="HTimer Control Register">
               <bitfield name="CTRL"
                         caption="1= The Hibernation Timer has a resolution of 0.125s per LSB, which yields a maximum time in excess of 2 hours.\n            0= The Hibernation Timer has a resolution of 30.5us per LSB, which yields a maximum time of ~2seconds."
                         mask="0x1"/>
            </register>
            <register name="CNT"
                      offset="0x8"
                      rw="R"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="The current state of the Hibernation Timer.">
        </register>
         </register-group>
      </module>
      <module name="RTOS"
              id="140"
              version="1.0"
              caption="The RTOS Timer is a low-power, 32-bit timer designed to operate on the 32kHz oscillator which is available during all\n      chip sleep states. This allows firmware the option to sleep the processor, enter heavy or deep chip sleep states, and\n      wake after a programmed amount of time. The timer may be used as a one-shot timer or a continuous timer. When the\n      timer transitions to 0 it is capable of generating a wake-capable interrupt to the embedded controller. This timer may be\n      halted during debug by hardware or via a software control bit.">
         <register-group name="RTOS"
                         caption="The RTOS Timer is a low-power, 32-bit timer designed to operate on the 32kHz oscillator which is available during all\n      chip sleep states. This allows firmware the option to sleep the processor, enter heavy or deep chip sleep states, and\n      wake after a programmed amount of time. The timer may be used as a one-shot timer or a continuous timer. When the\n      timer transitions to 0 it is capable of generating a wake-capable interrupt to the embedded controller. This timer may be\n      halted during debug by hardware or via a software control bit.">
            <register name="CNT"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="RTOS Timer Count Register.">
               <bitfield name="CNTR"
                         caption="This register contains the current value of the RTOS Timer counter. This register should be read as a DWORD. There is no latching mechanism \n      of the upper bytes implemented if the register is accessed as a byte or word. Reading the register with byte or word operations may give incorrect results."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="PRLD"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="RTOS Timer Preload Register">
               <bitfield name="PRELOAD"
                         caption="The this register is loaded into the RTOS Timer counter either when the TIMER_START bit is written with a 1, or when the timer counter counts down to 0 and the AUTO_RELOAD bit is 1.\n       This register must be programmed with a new count value before the TIMER_START bit is set to 1. If this register is updated while the counter is operating, the new count value will only take effect if\n       the counter transitions form 1 to 0 while the AUTO_RELOAD bit is set."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="CTRL"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="RTOS Timer Control Register">
               <bitfield name="BLK_EN"
                         caption="1=RTOS timer counter is enabled\n      0=RTOS timer disabled. All register bits are reset to their default state"
                         mask="0x1"/>
               <bitfield name="AU_RELOAD"
                         caption="1=The the RTOS Timer Preload Register is loaded into the timer counter and the counter is restarted when the counter transitions from 1 to 0\n      0=The timer counter halts when it transitions from 1 to 0 and will not restart."
                         mask="0x2"/>
               <bitfield name="TMR_STRT"
                         caption="Writing a 1 to this bit will load the timer counter with the RTOS Timer Preload Register and start counting.\n       If the Preload Register is 0, counting will not start and this bit will be cleared to 0.\n      Writing a 0 to this bit will halt the counter and clear its contents to 0. The RTOS timer interrupt will not be generated. This bit is automatically cleared if the AUTO_RELOAD bit is 0 and the\n      timer counter transitions from 1 to 0."
                         mask="0x4"/>
               <bitfield name="EXT_HW_HALT_EN"
                         caption="1=The timer counter is halted when the external HALT signal is asserted. Counting is always enabled if HALT is de-asserted.\n      0=The HALT signal does not affect the RTOS Timer"
                         mask="0x8"/>
               <bitfield name="FW_TMR_HALT"
                         caption="1=The timer counter is halted. If the counter was running, clearing this bit will restart the counter from the value at which it halted\n      0=The timer counter, if enabled, will continue to run"
                         mask="0x10"/>
            </register>
            <register name="SOFTIRQ"
                      offset="0xC"
                      rw="W"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Soft Interrupt Register">
               <bitfield name="SWI0"
                         caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."
                         mask="0x1"/>
               <bitfield name="SWI1"
                         caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."
                         mask="0x2"/>
               <bitfield name="SWI2"
                         caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."
                         mask="0x4"/>
               <bitfield name="SWI3"
                         caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."
                         mask="0x8"/>
            </register>
         </register-group>
      </module>
      <module name="RTC"
              id="126"
              version="1.0"
              caption="This is the set of registers that are automatically counted by hardware every 1 second while the block is enabled\n      to run and to update. These registers are: Seconds, Minutes, Hours, Day of Week, Day of Month, Month, and Year.">
         <register-group name="RTC"
                         caption="This is the set of registers that are automatically counted by hardware every 1 second while the block is enabled\n      to run and to update. These registers are: Seconds, Minutes, Hours, Day of Week, Day of Month, Month, and Year.">
            <register name="SEC"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Seconds Register">
        </register>
            <register name="SEC_ALARM"
                      offset="0x1"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Seconds Alarm Register">
        </register>
            <register name="MIN"
                      offset="0x2"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Minutes Register">
        </register>
            <register name="MIN_ALARM"
                      offset="0x3"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Minutes Alarm Register">
        </register>
            <register name="HR"
                      offset="0x4"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Hours Register">
        </register>
            <register name="HR_ALARM"
                      offset="0x5"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Hours Alarm Register">
        </register>
            <register name="DAY_OF_WK"
                      offset="0x6"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Day of Week Register">
        </register>
            <register name="DAY_OF_MON"
                      offset="0x7"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Day of Month Register">
        </register>
            <register name="MONTH"
                      offset="0x8"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Month Register">
        </register>
            <register name="YEAR"
                      offset="0x9"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Year Register">
        </register>
            <register name="REGA"
                      offset="0xA"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Register A">
        </register>
            <register name="REGB"
                      offset="0xB"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Register B">
        </register>
            <register name="REGC"
                      offset="0xC"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Register C">
        </register>
            <register name="REGD"
                      offset="0xD"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Register D">
        </register>
            <register name="CTRL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="RTC Control Register">
               <bitfield name="BLK_EN"
                         caption="BLK_EN This bit must be '1' in order for the block to function internally. Registers may be initialized first, before\n      setting this bit to '1' to start operation."
                         mask="0x1"/>
               <bitfield name="SOFT_RST"
                         caption="SOFT_RST A '1' written to this bit position will trigger the RTC_RST reset, resetting the block and all registers except\n      this one and the Test Register. This bit is self-clearing at the end of the reset, one cycle of Host Bus Clock later, and so requires\n      no waiting."
                         mask="0x2"/>
               <bitfield name="TEST" caption="TEST" mask="0x4"/>
               <bitfield name="ALM_EN"
                         caption="ALM_EN  1=Enables the Alarm features, 0=Disables the Alarm features"
                         mask="0x8"/>
            </register>
            <register name="WK_ALARM"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Week Alarm Register[7:0] - ALARM_DAY_OF_WEEK This register, if written to a value in the range 1- -7, will inhibit the Alarm\n      interrupt unless this field matches the contents of the Day of Week Register also.">
        </register>
            <register name="DAYLT_SAVF"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Daylight Savings Forward Register">
               <bitfield name="DST_MON"
                         caption="This field matches the Month Register."
                         mask="0xFF"/>
               <bitfield name="DST_DAY_OF_WK"
                         caption="This field matches the Day of Week Register bits[2:0]."
                         mask="0x700"/>
               <bitfield name="DST_WK"
                         caption="5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month"
                         mask="0x70000"/>
               <bitfield name="DST_HR"
                         caption="This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n      to the 24/12 Hour mode and DM mode settings at the time of writing."
                         mask="0x7F000000"/>
               <bitfield name="DST_AM_PM"
                         caption="This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n      of writing."
                         mask="0x80000000"/>
            </register>
            <register name="DAYLT_SAVB"
                      offset="0x1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Daylight Savings Backward Register">
               <bitfield name="DST_MON"
                         caption="This field matches the Month Register."
                         mask="0xFF"/>
               <bitfield name="DST_DAY_OF_WK"
                         caption="This field matches the Day of Week Register bits[2:0]."
                         mask="0x700"/>
               <bitfield name="DST_WK"
                         caption="5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month"
                         mask="0x70000"/>
               <bitfield name="DST_HR"
                         caption="This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n      to the 24/12 Hour mode and DM mode settings at the time of writing."
                         mask="0x7F000000"/>
               <bitfield name="DST_AM_PM"
                         caption="This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n      of writing."
                         mask="0x80000000"/>
            </register>
         </register-group>
      </module>
      <module name="WEEK"
              id="76"
              version="1.0"
              caption="The Week Alarm Interface provides two timekeeping functions: a Week Timer and a Sub-Week Timer. Both the Week Timer\n        and the Sub-Week Timer assert the Power-Up Event Output which automatically powers-up the system from the G3 state.">
         <register-group name="WEEK"
                         caption="The Week Alarm Interface provides two timekeeping functions: a Week Timer and a Sub-Week Timer. Both the Week Timer\n        and the Sub-Week Timer assert the Power-Up Event Output which automatically powers-up the system from the G3 state.">
            <register name="CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000001"
                      caption="Control Register">
               <bitfield name="WT_EN"
                         caption="The WT_EN bit is used to start and stop the Week Alarm Counter Register and the Clock Divider Register.\n           The value in the Counter Register is held when the WT_ENABLE bit is not asserted (0) and the count is resumed from the last value when the bit is asserted (1).\n             The 15-Bit Clock Divider is reset to 00h and the Week Alarm Interface is in its lowest power consumption state when the WT_ENABLE bit is not asserted."
                         mask="0x1"/>
               <bitfield name="PWRUP_EN"
                         caption="This bit controls the state of the Power-Up Event Output and enables Week POWER-UP Event decoding in the VBAT-Powered Control Interface.\n        1=Power-Up Event Output Enabled\n       0=Power-Up Event Output Disabled and Reset"
                         mask="0x40"/>
            </register>
            <register name="ALARM_CNT"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Week Alarm Counter Register">
               <bitfield name="WK_CNTR"
                         caption="While the WT_ENABLE bit is 1, this register is incremented at a 1 Hz rate. Writes of this register may require one second\n            to take effect. Reads return the current state of the register. Reads and writes complete independently of the state of WT_ENABLE."
                         mask="0xFFFFFFF"/>
            </register>
            <register name="TMR_COMP"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0FFFFFFF"
                      caption="Week Timer Compare Register">
               <bitfield name="WK_COMP"
                         caption="A Week Alarm Interrupt and a Week Alarm Power-Up Event are asserted when the Week Alarm Counter Register is greater than\n         or equal to the contents of this register. Reads and writes complete independently of the state of WT_ENABLE."
                         mask="0xFFFFFFF"/>
            </register>
            <register name="CLKDIV"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Clock Divider Register">
               <bitfield name="DIV"
                         caption="Reads of this register return the current state of the Week Timer 15- bit clock divider."
                         mask="0x7FFF"/>
            </register>
            <register name="SS_INTR_SEL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sub-Second Programmable Interrupt Select Register">
               <bitfield name="SPISR"
                         caption="This field determines the rate at which Sub-Second interrupt events are generated."
                         mask="0xF"/>
            </register>
            <register name="SWK_CTRL"
                      offset="0x14"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sub-Week Control Register">
               <bitfield name="SWKTMR_PWRUP_EVT_STS"
                         caption="This bit is set to 1 when the Sub-Week Alarm Counter Register decrements from 1 to 0 and the POWERUP_EN is 1.\n          Writes of 1 clear this bit. Writes of 0 have no effect. Note: This bit MUST be cleared to remove a Sub-Week Timer Power-Up Event."
                         mask="0x1"/>
               <bitfield name="WKTMR_PWRUP_EVT_STS"
                         caption="This bit is set to 1 when the Week Alarm Counter Register is greater than or equal the contents of the Week Timer Compare\n       Register and the POWERUP_EN is 1. Writes of 1 clear this bit. Writes of 0 have no effect.\n              Note: This bit does not have to be cleared to remove a Week Timer Power-Up Event."
                         mask="0x2"/>
               <bitfield name="TEST" caption="Test" mask="0x10"/>
               <bitfield name="TEST0" caption="Test" mask="0x20"/>
               <bitfield name="AU_RLD"
                         caption="1= No reload occurs when the Sub-Week Counter expires\n       0= Reloads the SUBWEEK_COUNTER_LOAD field into the Sub- Week Counter when the counter expires."
                         mask="0x40"/>
               <bitfield name="SWK_TICK"
                         caption="This field selects the clock source for the Sub-Week Counter."
                         mask="0x380"/>
            </register>
            <register name="SWK_ALARM"
                      offset="0x18"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Sub-Week Alarm Counter Register">
               <bitfield name="CNTR_LOAD"
                         caption="Writes with a non-zero value to this field reload the 9-bit Sub-Week Alarm counter. Writes of 0 disable the counter.\n       If the Sub-Week Alarm counter decrements to 0 and the AUTO_RELOAD bit is set, the value in this field is automatically loaded into the Sub-Week Alarm counter."
                         mask="0x1FF"/>
               <bitfield name="CNTR_STS"
                         caption="Reads of this register return the current state of the 9-bit Sub-Week Alarm counter."
                         mask="0x1FF0000"/>
            </register>
            <register name="BGPO_DATA"
                      offset="0x1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="BGPO Data Register">
               <bitfield name="BGPO"
                         caption="Battery powered General Purpose Output. Each output pin may be individually configured to be either a VBAT-power BGPO or a VTR\n          powered GPIO, based on the corresponding settings in the BGPO Power Register. Additionally, each output pin may be individually configured\n                 to reset to 0 on either RESET_VTR or RESET_SYS, based on the corresponding settings in the BGPO Reset Register.\n                  For each bit [i] in the field: 1=BGPO[i] output is high; 0=BGPO[i] output is low."
                         mask="0x3FF"/>
            </register>
            <register name="BGPO_PWR"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000003E"
                      caption="BGPO Power Register">
               <bitfield name="BGPO_POWER"
                         caption="Battery powered General Purpose Output power source. For each bit [i] in the field:\n         1=BGPO[i] is powered by VBAT. The BGPO[i] pin is always determined by the corresponding bit in the BGPO Data Register. The GPIO Input register\n            for the GPIO that is multiplexed with the BGPO always returns a '1b'.\n              0=The pin for BGPO[i] functions as a GPIO. When VTR is powered, the pin associated with BGPO[i] is determined by the GPIO associated with the pin.\n            When VTR is unpowered, the pin is tristated."
                         mask="0x3E"/>
            </register>
            <register name="BGPO_RST"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      atomic-op="set:BGPO_RST"
                      initval="0x00000000"
                      caption="BGPO Reset Register">
               <bitfield name="BGPO_RESET"
                         caption="Battery powered General Purpose Output reset event. For each bit [i] in the field:\n                1=BGPO[i] is reset to 0 on RESET_VTR; 0=BGPO[i] is reset to 0 on RESET_SYS."
                         mask="0x3FF"/>
            </register>
         </register-group>
      </module>
      <module name="TACH"
              id="66"
              version="1.0"
              caption="This block monitors TACH output signals (or locked rotor signals) from\n       various types of fans, and determines their speed.">
         <register-group name="TACH"
                         caption="This block monitors TACH output signals (or locked rotor signals) from\n        various types of fans, and determines their speed.">
            <register name="CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="TACHx Control Register">
               <bitfield name="OUTOF_LIM_EN"
                         caption="OUTOF_LIM_EN  This bit is used to enable the TACH_OUT_OF_LIMIT_STATUS bit in the TACHx Status Register to generate an interrupt event.\n        1=Enable interrupt output from Tach block\n             0=Disable interrupt output from Tach block (default)"
                         mask="0x1"/>
               <bitfield name="EN"
                         caption="EN  1= TACH Monitoring enabled, clocks enabled. 0= TACH Idle, clocks gated"
                         mask="0x2"/>
               <bitfield name="FILT_EN"
                         caption="FILT_EN  This filter is used to remove high frequency glitches from Tach Input. When this filter is enabled, Tach input pulses less than two 100kHz_- Clk periods wide get filtered.\n         1= Filter enabled\n                0= Filter disabled (default)\n        It is recommended that the Tach input filter always be enabled."
                         mask="0x100"/>
               <bitfield name="RD_MOD_SEL"
                         caption="RD_MOD_SEL\n        1=Counter is incremented on the rising edge of the 100kHz_Clk input. The counter is latched into the TACHX_COUNTER field and reset when the programmed number of edges is detected.\n         0=Counter is incremented when Tach Input transitions from low-tohigh state (default)"
                         mask="0x400"/>
               <bitfield name="EDGES"
                         caption="EDGES A Tach signal is a square wave with a 50% duty cycle. Typically, two Tach periods represents one revolution of the fan. A Tach period consists of three Tach edges.\n       This programmed value represents the number of Tach edges that will be used to determine the interval for which the number of 100kHz_Clk pulses will be counted\n        11b=9 Tach edges (4 Tach periods)\n              10b=5 Tach edges (2 Tach periods)\n                  01b=3 Tach edges (1 Tach period)\n                  00b=2 Tach edges (1/2 Tach period)"
                         mask="0x1800"/>
               <bitfield name="CNT_RDY_INT_EN"
                         caption="CNT_RDY_INT_EN 1=Enable Count Ready interrupt from Tach block, 0=Disable Count Ready interrupt from Tach block"
                         mask="0x4000"/>
               <bitfield name="IN_INT_EN"
                         caption="IN_INT_EN 1=Enable Tach Input toggle interrupt from Tach block, 0=Disable Tach Input toggle interrupt from Tach block"
                         mask="0x8000"/>
               <bitfield name="CNTR"
                         caption="This 16-bit field contains the latched value of the internal Tach pulse counter, which may be configured by the \n       Tach Reading Mode Select field to operate as a free-running counter or to be gated by the Tach input signal."
                         mask="0xFFFF0000"/>
            </register>
            <register name="STS"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="TACHx Status Register">
               <bitfield name="OUTOF_LIM_STS"
                         caption="OUTOF_LIM_STS  1=Tach is outside of limits, 0=Tach is within limits (R/WC)"
                         mask="0x1"/>
               <bitfield name="PIN_STS"
                         caption="PIN_STS  1= Tach Input is high, 0= Tach Input is low"
                         mask="0x2"/>
               <bitfield name="TOG_STS"
                         caption="TOG_STS  1=Tach Input changed state (this bit is set on a low-to-high or high-tolow transition), 0=Tach stable (R/WC)"
                         mask="0x4"/>
               <bitfield name="CNT_RDY_STS"
                         caption="CNT_RDY_STS  1=Reading ready, 0=Reading not ready"
                         mask="0x8"/>
            </register>
            <register name="LIM_HI"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000FFFF"
                      caption="TACH HIGH LIMIT Register">
               <bitfield name="T_HIGH"
                         caption="This value is compared with the value in the TACHX_COUNTER field. If the value in the counter is greater than the value\n            programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS status event may be enabled\n               to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx Control Register."
                         mask="0xFFFF"/>
            </register>
            <register name="LIM_LO"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="TACHx Low Limit Register">
               <bitfield name="T_LOW"
                         caption="This value is compared with the value in the TACHX_COUNTER field of the TACHx Control Register. If the value in the counter\n          is less than the value programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS\n              status event may be enabled to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx\n         Control Register To disable the TACH_OUT_OF_LIMIT_STATUS low event, program 0000h into this register."
                         mask="0xFFFF"/>
            </register>
         </register-group>
      </module>
      <module name="PWM"
              id="54"
              version="1.0"
              caption="This block generates a PWM output that can be used to control 4-wire fans, blinking LEDs, and other\n      similar devices. Each PWM can generate an arbitrary duty cycle output at frequencies from less than 0.1 Hz to 24 MHz.\n      The PWM controller can also used to generate the PROCHOT output and Speaker output.">
         <register-group name="PWM"
                         caption="This block generates a PWM output that can be used to control 4-wire fans, blinking LEDs, and other\n      similar devices. Each PWM can generate an arbitrary duty cycle output at frequencies from less than 0.1 Hz to 24 MHz.\n      The PWM controller can also used to generate the PROCHOT output and Speaker output.">
            <register name="CNT_ON"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This field determines both the frequency and duty cycle of the PWM signal.\n       Setting this field to a value of n will\n      cause the On time of the PWM to be n+1 cycles of the PWM Clock Source.\n      When this field is set to zero and the PWMX_COUNTER_OFF_TIME is not set to zero, the PWM_OUTPUT is held low (Full Off).">
        </register>
            <register name="CNT_OFF"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This field determine both the frequency and duty cycle of the PWM signal.\n       Setting this field to a value of n will\n      cause the Off time of the PWM to be n+1 cycles of the PWM Clock Source.\n      When this field is set to zero, the PWM_OUTPUT is held high (Full On).">
        </register>
            <register name="CFG"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="PWMx CFGURATION REGISTER">
               <bitfield name="PWM_EN"
                         caption="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."
                         mask="0x1"/>
               <bitfield name="CLK_SEL"
                         caption="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"
                         mask="0x2"/>
               <bitfield name="INV"
                         caption="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."
                         mask="0x4"/>
               <bitfield name="CLK_PRE_DIV"
                         caption="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."
                         mask="0x78"/>
            </register>
         </register-group>
      </module>
      <module name="ADC"
              id="4"
              version="1.0"
              caption="This block is designed to convert external analog voltage readings into digital values.">
         <register-group name="ADC"
                         caption="This block is designed to convert external analog voltage readings into digital values.">
            <register name="CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="The ADC Control Register is used to control the behavior of the Analog to Digital Converter.">
               <bitfield name="ACT"
                         caption="0: The ADC is disabled and placed in its lowest power state. 1: ADC block is enabled for operation."
                         mask="0x1"/>
               <bitfield name="STRT_SIN"
                         caption="(STRT_SIN) 0: The ADC Single Mode is disabled. 1: The ADC Single Mode is enabled. Note: This bit is self-clearing"
                         mask="0x2"/>
               <bitfield name="STRT_RPT"
                         caption="0: The ADC Repeat Mode is disabled. 1: The ADC Repeat Mode is enabled."
                         mask="0x4"/>
               <bitfield name="PWR_SAV_DIS"
                         caption="0: Power saving feature is enabled. 1: Power saving feature is disabled."
                         mask="0x8"/>
               <bitfield name="SFT_RST"
                         caption="(SFT_RST) 1: writing one causes a reset of the ADC block hardware (not the registers) 0: writing zero takes the ADC block out of reset"
                         mask="0x10"/>
               <bitfield name="RPT_DONE_STS"
                         caption="0: ADC repeat-sample conversion is not complete. 1: ADC repeat-sample conversion is completed. (R/WC)"
                         mask="0x40"/>
               <bitfield name="SIN_DONE_STS"
                         caption="0: ADC single-sample conversion is not complete. 1: ADC single-sample conversion is completed. (R/WC)"
                         mask="0x80"/>
            </register>
            <register name="DELAY"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="The ADC Delay register determines the delay from setting Start_Repeat in the \n       ADC Control Register and the start of a conversion cycle. This register also controls the interval between conversion cycles in repeat mode.">
               <bitfield name="STRT_DLY"
                         caption="This field determines the starting delay before a conversion cycle is begun when Start_Repeat is written with a 1."
                         mask="0xFFFF"/>
               <bitfield name="RPT_DLY"
                         caption="This field determines the interval between conversion cycles when Start_Repeat is 1."
                         mask="0xFFFF0000"/>
            </register>
            <register name="CHAN_STS"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="The ADC Status Register indicates whether the ADC has completed a conversion cycle.\n       All bits are cleared by being written with a 1. \n             0: conversion of the corresponding ADC channel is not complete\n        1: conversion of the corresponding ADC channel is complete">
               <bitfield name="STS"
                         caption="All bits are cleared by being written with a '1'. 1=conversion of the corresponding ADC channel is complete;\n          0=conversion of the corresponding ADC channel is not complete. For enabled single cycles, the SINGLE_DONE_STATUS bit in the\n              ADC Control Register is also set after all enabled channel conversion are done; for enabled repeat cycles, the REPEAT_DONE_STATUS\n          in the ADC Control Register is also set after all enabled channel conversion are done."
                         mask="0xFFFF"/>
            </register>
            <register name="SNG_EN"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="The ADC Single Register is used to control which ADC channel \n       is captured during a Single-Sample conversion cycle initiated by the Start_Single bit in the ADC Control Register. \n           APPLICATION NOTE: Do not change the bits in this register in the middle of a conversion cycle to insure proper operation.\n           0: single cycle conversions for this channel are disabled\n          1: single cycle conversions for this channel are enabled">
               <bitfield name="S_EN"
                         caption="Each bit in this field enables the corresponding ADC channel when a single cycle of conversions is started when the\n            START_SINGLE bit in the ADC Control Register is written with a 1. 1=single cycle conversions for this channel are enabled\n               0=single cycle conversions for this channel are disabled. Note: If this register is changed while a conversion."
                         mask="0xFFFF"/>
            </register>
            <register name="REPT_EN"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="The ADC Repeat Register is used to control which ADC channels \n       are captured during a repeat conversion cycle initiated by the Start_Repeat bit in the ADC Control Register.">
               <bitfield name="R_EN"
                         caption="Each bit in this field enables the corresponding ADC channel for each pass of the Repeated ADC Conversion that is\n         controlled by bit START_REPEAT in the ADC Control Register. 1=repeat conversions for this channel are enabled;\n               0=repeat conversions for this channel are disabled"
                         mask="0xFFFF"/>
            </register>
            <register name="CHAN_RD"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="16"
                      initval="0x00000000"
                      caption="All 16 ADC channels return their results into \n       a 32-bit reading register. In each case the low 10 bits of the reading register\n       return the result of the Analog to Digital conversion and the upper 22 bits return 0.">
        </register>
         </register-group>
      </module>
      <module name="FAN"
              id="107"
              version="1.0"
              caption="The RPM-PWM Interface is an RPM based Fan Control Algorithm that monitors the fan's speed and automatically adjusts\n       the drive to maintain the desired fan speed. This RPM based Fan Control Algorithm controls a PWM output based on a tachometer input.">
         <register-group name="FAN"
                         caption="The RPM-PWM Interface is an RPM based Fan Control Algorithm that monitors the fan's speed and automatically adjusts\n          the drive to maintain the desired fan speed. This RPM based Fan Control Algorithm controls a PWM output based on a tachometer input.">
            <register name="FAN_SET"
                      offset="0x0"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="The Fan Driver Setting used to control the output of the Fan Driver.">
               <bitfield name="FAN_SETTING"
                         caption="The Fan Driver Setting used to control the output of the Fan Driver."
                         mask="0xFFC0"/>
            </register>
            <register name="CFG"
                      offset="0x2"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x342B"
                      caption="The Fan Configuration Register controls the general operation of the RPM based Fan Control Algorithm used by the fan driver.">
               <bitfield name="UPDATE"
                         caption="Determines the base time between fan driver updates. The Update Time, along with the Fan Step Register, is used to control\n       the ramp rate of the drive response to provide a cleaner transition of the actual fan operation as the desired fan speed changes.\n           7=1600ms\n          6=1200ms\n                  5=800ms\n            4=500ms\n            3=400ms\n                   2=300ms\n                 1=200ms\n                 0=100ms\n              Note: This ramp rate control applies for all changes to the active PWM output including when the RPM based Fan Speed Control Algorithm\n       is disabled."
                         mask="0x7"
                         values="FAN_CFG__UPDATE"/>
               <bitfield name="EDGES"
                         caption="Determines the minimum number of edges that must be detected on the TACH signal to determine a single rotation. A typical\n      fan measured 5 edges (for a 2-pole fan). Increasing the number of edges measured with respect to the number of poles of the fan will\n         cause the TACH Reading registers to indicate a fan speed that is higher or lower than the actual speed. In order for the FSC Algorithm\n       to operate correctly, the TACH Target must be updated by the user to accommodate this shift. The Effective Tach Multiplier is used as\n        a direct multiplier term that is applied to the Actual RPM to achieve the Reported RPM. It should only be applied if the number of\n        edges measured does not match the number of edges expected based on the number of poles of the fan (which is fixed for any given fan)."
                         mask="0x18"/>
               <bitfield name="RANGE"
                         caption="Adjusts the range of reported and programmed tachometer reading values. The RANGE bits determine the weighting of all\n        TACH values (including the Valid TACH Count, TACH Target, and TACH reading).\n                   3=Reported Minimum RPM: 4000. Tach Count Multiplier: 1\n               2=Reported Minimum RPM: 2000. Tach Count Multiplier: 2\n                1=Reported Minimum RPM: 1000. Tach Count Multiplier: 4\n                0=Reported Minimum RPM: 500. Tach Count Multiplier: 8"
                         mask="0x60"
                         values="FAN_CFG__RANGE"/>
               <bitfield name="EN_ALGO"
                         caption="Enables the RPM based Fan Control Algorithm.\n                  1=The control circuitry is enabled and the Fan Driver output will be automatically updated to maintain the programmed fan speed\n        as indicated by the TACH Target Register.\n        0=The control circuitry is disabled and the fan driver output is determined by the Fan Driver Setting Register."
                         mask="0x80"/>
               <bitfield name="POLARITY"
                         caption="Determines the polarity of the PWM driver. This does NOT affect the drive setting registers. A setting of 0% drive will\n      still correspond to 0% drive independent of the polarity.\n      1 - The Polarity of the PWM driver is inverted. A drive setting of 00h will cause the output to be set at 100% duty cycle and\n       a drive setting of FFh will cause the output to be set at 0% duty cycle.\n       0 - the Polarity of the PWM driver is normal. A drive setting of 00h will cause the output to be set at 0% duty cycle and\n      a drive setting of FFh will cause the output to be set at 100% duty cycle."
                         mask="0x200"/>
               <bitfield name="ERR_RNG"
                         caption="Control some of the advanced options that affect the error window. When the measured fan speed is within the programmed\n         error window around the target speed, the fan drive setting is not updated. These bits only apply if the Fan Speed Control Algorithm is used.\n            3=200 RPM\n               2=100 RPM\n               1=50 RPM\n              0=0 RPM"
                         mask="0xC00"
                         values="FAN_CFG__ERR_RNG"/>
               <bitfield name="DER_OPT"
                         caption="Control some of the advanced options that affect the derivative portion of the RPM based fan control algorithm.\n        These bits only apply if the Fan Speed Control Algorithm is used."
                         mask="0x3000"/>
               <bitfield name="DIS_GLITCH"
                         caption="Disables the low pass glitch filter that removes high frequency noise injected on the TACH pin.\n       1 - The glitch filter is disabled.\n      0 - The glitch filter is enabled."
                         mask="0x4000"/>
               <bitfield name="EN_RRC"
                         caption="Enables the ramp rate control circuitry during the Manual Mode of operation.\n        1=The ramp rate control circuitry for the Manual Mode of operation is enabled. The PWM setting will follow the ramp rate controls\n       as determined by the Fan Step and Update Time settings. The maximum PWM step is capped at the Fan Step setting and is updated\n        based on the Update Time as given by the field UPDATE.\n         0=The ramp rate control circuitry for the Manual Mode of operation is disabled. When the Fan Drive Setting values are changed\n        and the RPM based Fan Control Algorithm is disabled, the fan driver will be set to the new setting immediately."
                         mask="0x8000"/>
            </register>
            <register name="PWM_DIV"
                      offset="0x4"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x01"
                      caption="PWM Divide">
               <bitfield name="PWM_DIV"
                         caption="The PWM Divide value determines the final frequency of the PWM driver. The driver base frequency is divided by the\n      PWM Divide value to determine the final frequency."
                         mask="0xFF"/>
            </register>
            <register name="GAIN"
                      offset="0x5"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x2A"
                      caption="Gain Register stores the gain terms used by the proportional and integral portions of the RPM based Fan Control Algorithm.">
               <bitfield name="GAINP"
                         caption="The proportional gain term.\n       Gain Factor:\n          3=8x\n             2=4x\n              1=2x\n             0=1x"
                         mask="0x3"
                         values="FAN_GAIN__GAINP"/>
               <bitfield name="GAINI"
                         caption="The integral gain term.\n        Gain Factor:\n                3=8x\n               2=4x\n                 1=2x\n                 0=1x"
                         mask="0xC"
                         values="FAN_GAIN__GAINI"/>
               <bitfield name="GAIND"
                         caption="The derivative gain term.\n      Gain Factor:\n       3=8x\n           2=4x\n           1=2x\n              0=1x"
                         mask="0x30"
                         values="FAN_GAIN__GAIND"/>
            </register>
            <register name="SPIN_UP_CFG"
                      offset="0x6"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x19"
                      caption="The Fan Spin Up Configuration Register controls the settings of Spin Up Routine.">
               <bitfield name="SPINUP_TIME"
                         caption="Determines the maximum Spin Time that the Spin Up Routine will run for. If a valid tachometer measurement is not\n           detected before the Spin Time has elapsed, an interrupt will be generated. When the RPM based Fan Control Algorithm is active,\n         the fan driver will attempt to re-start the fan immediately after the end of the last spin up attempt.\n               3=2 seconds\n               2=1 second\n                 1=500 ms\n               0=250 ms"
                         mask="0x3"
                         values="FAN_SPIN_UP_CFG__SPINUP_TIME"/>
               <bitfield name="SPIN_LVL"
                         caption="Determines the final drive level that is used by the Spin Up Routine.\n       7=65%\n             6=60%\n           5=55%\n            4=50%\n               3=45%\n            2=40%\n            1=35%\n           0=30%"
                         mask="0x1C"
                         values="FAN_SPIN_UP_CFG__SPIN_LVL"/>
               <bitfield name="NOKICK"
                         caption="Determines if the Spin Up Routine will drive the fan to 100% duty cycle for 1/4 of the programmed spin up time before\n            driving it at the programmed level.\n              1=The Spin Up Routine will not drive the PWM to 100%. It will set the drive at the programmed spin level for the entire duration of\n         the programmed spin up time\n         0=The Spin Up Routine will drive the PWM to 100% for 1/4 of the programmed spin up time before reverting to the programmed spin level."
                         mask="0x20"/>
               <bitfield name="DRIVE_FAIL_CNT"
                         caption="Determines how many update cycles are used for the Drive Fail detection function. This circuitry determines whether the\n      fan can be driven to the desired Tach target. These settings only apply if the Fan Speed Control Algorithm is enabled.\n        3=Drive Fail detection circuitry will count for 64 update periods\n       2=Drive Fail detection circuitry will count for 32 update periods\n         1=Drive Fail detection circuitry will count for 16 update periods\n          0=Drive Fail detection circuitry is disabled."
                         mask="0xC0"
                         values="FAN_SPIN_UP_CFG__DRIVE_FAIL_CNT"/>
            </register>
            <register name="FAN_STEP"
                      offset="0x7"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x10"
                      caption="FAN_STEP The Fan Step value represents the maximum step size the fan driver will take between update times">
               <bitfield name="FAN_STEP"
                         caption="The Fan Step value represents the maximum step size the fan driver will take between update times.\n      When the PWM_BASE frequency range field in the PWM Driver Base Frequency Register is set to the value 1, 2 or 3, this 8-bit field\n        is added to the 10-bit PWM duty cycle, for a maximum step size of 25%. When the PWM_BASE field is set to 0, the PWM operates in\n        an 8-bit mode. In 8-bit mode, this 8-bit field is added to the 8-bit duty cycle, for a maximum step size of 100%."
                         mask="0xFF"/>
            </register>
            <register name="MIN_DRIVE"
                      offset="0x8"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x66"
                      caption="the minimum drive setting for the RPM based Fan Control Algorithm.">
               <bitfield name="MIN_DRIVE" caption="The minimum drive setting." mask="0xFF"/>
            </register>
            <register name="VAL_TACH_CNT"
                      offset="0x9"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0xF5"
                      caption="The maximum TACH Reading Register value to indicate that the fan is spinning properly.">
               <bitfield name="VALID_TACH_CNT"
                         caption="The maximum TACH Reading Register value to indicate that the fan is spinning properly."
                         mask="0xFF"/>
            </register>
            <register name="FAN_DRIVE_FAIL_BAND"
                      offset="0xA"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="The number of Tach counts used by the Fan Drive Fail detection circuitry">
               <bitfield name="FAN_DRIVE_FAIL_BAND"
                         caption="The number of Tach counts used by the Fan Drive Fail detection circuitry."
                         mask="0xFFF8"/>
            </register>
            <register name="TACH_TGT"
                      offset="0xC"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="The target tachometer value.">
               <bitfield name="TACH_TGT"
                         caption="The target tachometer value."
                         mask="0xFFF8"/>
            </register>
            <register name="TACH_RD"
                      offset="0xE"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="[15:3] The current tachometer reading value.">
               <bitfield name="TACH_RD"
                         caption="The current tachometer reading value."
                         mask="0xFFF8"/>
            </register>
            <register name="DRIV_BASE_FREQ"
                      offset="0x10"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="[1:0] Determines the frequency range of the PWM fan driver">
               <bitfield name="PWM_BASE"
                         caption="Determines the frequency range of the PWM fan driver (when enabled). PWM resolution is 10-bit, except when this field\n        is set to '0b', when it is 8-bit.\n                 3=2.34KHz\n                 2=4.67KHz\n                 1=23.4KHz\n                0=26.8KHz"
                         mask="0x3"
                         values="FAN_DRIV_BASE_FREQ__PWM_BASE"/>
            </register>
            <register name="STS"
                      offset="0x11"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="The bits in this register are routed to interrupts.">
               <bitfield name="FAN_STALL"
                         caption="The bit Indicates that the tachometer measurement on the Fan detects a stalled fan.  (R/WC)\n       0 - Stalled fan not detected.\n               1 - Stalled fan detected."
                         mask="0x1"/>
               <bitfield name="FAN_SPIN"
                         caption="The bit Indicates that the Spin up Routine for the Fan could not detect a valid tachometer reading within its maximum\n           time window. (R/WC)\n            1 - The Spin up Routine for the Fan could not detect a valid tachometer reading within its maximum time window.\n          0 - The Spin up Routine for the Fan detected a valid tachometer reading within its maximum time window."
                         mask="0x2"/>
               <bitfield name="DRIVE_FAIL"
                         caption="The bit Indicates that the RPM-based Fan Speed Control Algorithm cannot drive the Fan to the desired target setting at\n       maximum drive. (R/WC)\n        1- The RPM-based Fan Speed Control Algorithm cannot drive Fan to the desired target setting at maximum drive.\n                0- The RPM-based Fan Speed Control Algorithm can drive Fan to the desired target setting."
                         mask="0x20"/>
            </register>
         </register-group>
         <value-group caption="" name="FAN_CFG__UPDATE">
            <value caption="7=1600ms" name="BASE_TIME_1600ms" value="0x7"/>
            <value caption="6=1200ms" name="BASE_TIME_1200ms" value="0x6"/>
            <value caption="5=800ms " name="BASE_TIME_800ms " value="0x6"/>
            <value caption="4=500ms " name="BASE_TIME_500ms " value="0x5"/>
            <value caption="3=400ms " name="BASE_TIME_400ms " value="0x4"/>
            <value caption="2=300ms " name="BASE_TIME_300ms " value="0x3"/>
            <value caption="1=200ms " name="BASE_TIME_200ms " value="0x2"/>
            <value caption="0=100ms " name="BASE_TIME_100ms " value="0x1"/>
         </value-group>
         <value-group caption="" name="FAN_CFG__RANGE">
            <value caption="3=Reported Minimum RPM: 4000. Tach Count Multiplier: 8"
                   name="TACH_COUNT_MULTIPLIER_8"
                   value="0x3"/>
            <value caption="2=Reported Minimum RPM: 2000. Tach Count Multiplier: 4"
                   name="TACH_COUNT_MULTIPLIER_4"
                   value="0x2"/>
            <value caption="1=Reported Minimum RPM: 1000. Tach Count Multiplier: 2"
                   name="TACH_COUNT_MULTIPLIER_2"
                   value="0x1"/>
            <value caption="0=Reported Minimum RPM:  500. Tach Count Multiplier: 1"
                   name="TACH_COUNT_MULTIPLIER_1"
                   value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_CFG__ERR_RNG">
            <value caption="3=200 RPM" name="RPM_200" value="0x3"/>
            <value caption="2=100 RPM" name="RPM_100" value="0x2"/>
            <value caption="1=50 RPM " name="RPM_50 " value="0x1"/>
            <value caption="0=0 RPM  " name="RPM_0  " value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_GAIN__GAINP">
            <value caption="Gain Factor: 3=8x" name="GAINP_8X" value="0x3"/>
            <value caption="Gain Factor: 2=4x" name="GAINP_4X" value="0x2"/>
            <value caption="Gain Factor: 1=2x" name="GAINP_2X" value="0x1"/>
            <value caption="Gain Factor: 0=1x" name="GAINP_1X" value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_GAIN__GAINI">
            <value caption="Gain Factor: 3=8x" name="GAINI_8X" value="0x3"/>
            <value caption="Gain Factor: 2=4x" name="GAINI_4X" value="0x2"/>
            <value caption="Gain Factor: 1=2x" name="GAINI_2X" value="0x1"/>
            <value caption="Gain Factor: 0=1x" name="GAINI_1X" value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_GAIN__GAIND">
            <value caption="Gain Factor: 3=8x" name="GAIND_8X" value="0x3"/>
            <value caption="Gain Factor: 2=4x" name="GAIND_4X" value="0x2"/>
            <value caption="Gain Factor: 1=2x" name="GAIND_2X" value="0x1"/>
            <value caption="Gain Factor: 0=1x" name="GAIND_1X" value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_SPIN_UP_CFG__SPINUP_TIME">
            <value caption="3=2 seconds" name="SPINUP_2_SEC" value="0x3"/>
            <value caption="2=1 second " name="SPINUP_1_SEC" value="0x2"/>
            <value caption="1=500 ms" name="SPINUP_500_MSEC" value="0x1"/>
            <value caption="0=250 ms" name="SPINUP_250_MSEC" value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_SPIN_UP_CFG__SPIN_LVL">
            <value caption="7=65%" name="SPIN_LVL_65" value="0x7"/>
            <value caption="6=60%" name="SPIN_LVL_60" value="0x6"/>
            <value caption="5=55%" name="SPIN_LVL_55" value="0x5"/>
            <value caption="4=50%" name="SPIN_LVL_50" value="0x4"/>
            <value caption="3=45%" name="SPIN_LVL_45" value="0x3"/>
            <value caption="2=40%" name="SPIN_LVL_40" value="0x2"/>
            <value caption="1=35%" name="SPIN_LVL_35" value="0x1"/>
            <value caption="0=30%" name="SPIN_LVL_30" value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_SPIN_UP_CFG__DRIVE_FAIL_CNT">
            <value caption="3=Drive Fail detection circuitry will count for 64 update periods"
                   name="DRIVE_FAIL_CNT_64_PERIOD"
                   value="0x3"/>
            <value caption="2=Drive Fail detection circuitry will count for 32 update periods"
                   name="DRIVE_FAIL_CNT_32_PERIOD"
                   value="0x2"/>
            <value caption="1=Drive Fail detection circuitry will count for 16 update periods"
                   name="DRIVE_FAIL_CNT_16_PERIOD"
                   value="0x1"/>
            <value caption="0=Drive Fail detection circuitry is disabled."
                   name="DRIVE_FAIL_CNT_DIS"
                   value="0x0"/>
         </value-group>
         <value-group caption="" name="FAN_DRIV_BASE_FREQ__PWM_BASE">
            <value caption="3=2.34KHz" name="PWM_FAN_FREQ_2KHZ" value="0x3"/>
            <value caption="2=4.67KHz" name="PWM_FAN_FREQ_4KHZ" value="0x2"/>
            <value caption="1=23.4KHz" name="PWM_FAN_FREQ_23KHZ" value="0x1"/>
            <value caption="0=26.8KHz" name="PWM_FAN_FREQ_26KHZ" value="0x0"/>
         </value-group>
      </module>
      <module name="LED"
              id="111"
              version="1.0"
              caption="The blinking/breathing hardware is implemented using a PWM. The PWM can be driven either by the 48 MHz\n      clock or by a 32.768 KHz clock input. When driven by the 48 MHz clock, the PWM can be used as a standard 8-bit\n      PWM in order to control a fan. When used to drive blinking or breathing LEDs, the 32.768 KHz clock source is used.">
         <register-group name="LED"
                         caption="The blinking/breathing hardware is implemented using a PWM. The PWM can be driven either by the 48 MHz\n      clock or by a 32.768 KHz clock input. When driven by the 48 MHz clock, the PWM can be used as a standard 8-bit\n      PWM in order to control a fan. When used to drive blinking or breathing LEDs, the 32.768 KHz clock source is used.">
            <register name="CFG"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="LED Configuration">
               <bitfield name="CTRL"
                         caption="CTRL 3=PWM is always on\n      2=LED blinking (standard PWM)\n      1=LED breathing configuration\n      0=PWM is always off. All internal registers and counters are reset to 0. Clocks are gated"
                         mask="0x3"/>
               <bitfield name="CLK_SRC"
                         caption="1=Clock source is the 48 MHz clock, 0=Clock source is the 32.768 KHz clock"
                         mask="0x4"/>
               <bitfield name="SYNCH"
                         caption="SYNCH  When this bit is '1', all counters for all LEDs are reset to their initial values.\n       When this bit is '0' in the LED Configuration Register for all LEDs, then all counters for LEDs that are configured to blink or breathe will increment or decrement, as required."
                         mask="0x8"/>
               <bitfield name="PWM_SIZE"
                         caption="PWM_SIZE This bit controls the behavior of PWM:\n      3=Reserved\n      2=PWM is configured as a 6-bit PWM\n      1=PWM is configured as a 7-bit PWM\n      0=PWM is configured as an 8-bit PWM"
                         mask="0x30"/>
               <bitfield name="EN_UPDATE"
                         caption="EN_UPDATE  This bit is set to 1 when written with a '1'. Writes of '0' have no effect.\n       Hardware clears this bit to 0 when the breathing configuration registers are updated at the end of a PWM period. The current state of the bit is readable any time."
                         mask="0x40"/>
               <bitfield name="RST"
                         caption="RST  Writes of '1' to this bit resets the PWM registers to their default values. This bit is self clearing.\n       Writes of '0' to this bit have no effect."
                         mask="0x80"/>
               <bitfield name="WDT_RELOAD"
                         caption="WDT_RELOAD  The PWM Watchdog Timer counter reload value. On system reset, it defaults to 14h, which corresponds to a 4 second Watchdog timeout value."
                         mask="0xFF00"/>
               <bitfield name="SYMMETRY"
                         caption="SYMMETRY  1=The rising and falling ramp times are in Asymmetric mode.\n      0=The rising and falling ramp times are in Symmetric mode."
                         mask="0x10000"/>
            </register>
            <register name="LIMIT"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="LED Limits This register may be written at any time.\n       Values written into the register are held in an holding register, which is transferred into the actual register at the end of a PWM period.\n       The two byte fields may be written independently. Reads of this register return the current contents and not the value of the holding register.">
               <bitfield name="MIN"
                         caption="In breathing mode, when the current duty cycle is less than or equal to this value the breathing apparatus holds \n       the current duty cycle for the period specified by the field LD in register LED_DELAY, then starts incrementing the current duty cycle In blinking mode,\n       this field defines the duty cycle of the blink function."
                         mask="0xFF"/>
               <bitfield name="MAX"
                         caption="In breathing mode, when the current duty cycle is greater than or equal to this value the breathing apparatus holds \n       the current duty cycle for the period specified by the field HD in register LED_DELAY, then starts decrementing the current duty cycle"
                         mask="0xFF00"/>
            </register>
            <register name="DLY"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="LED Delay">
               <bitfield name="LOW_PULSE"
                         caption="The number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal \n       to the value MIN in register LED_LIMIT."
                         mask="0xFFF"/>
               <bitfield name="HIGH_PULSE"
                         caption="In breathing mode, the number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater\n       than or equal to the value MAX in register LED_LIMIT."
                         mask="0xFFF000"/>
            </register>
            <register name="STEP"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="This register has eight segment fields which provide the amount the current duty cycle \n       is adjusted at the end of every PWM period. Segment field selection is decoded based on the segment index. The segment index equation utilized depends on the SYMMETRY bit in the LED Configuration Register Register)      . In Symmetric Mode the Segment_Index[2:0] = Duty Cycle Bits[7:5]\n      . In Asymmetric Mode the Segment_Index[2:0] is the bit concatenation of following: Segment_Index[2] = (FALLING RAMP TIME in Figure 30-3, Clipping Example) and Segment_Index[1:0] = Duty Cycle Bits[7:6].">
               <bitfield name="S0"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 000."
                         mask="0xF"/>
               <bitfield name="S1"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 001."
                         mask="0xF0"/>
               <bitfield name="S2"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 010."
                         mask="0xF00"/>
               <bitfield name="S3"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 011."
                         mask="0xF000"/>
               <bitfield name="S4"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 100."
                         mask="0xF0000"/>
               <bitfield name="S5"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 101"
                         mask="0xF00000"/>
               <bitfield name="S6"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 110."
                         mask="0xF000000"/>
               <bitfield name="S7"
                         caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 111."
                         mask="0xF0000000"/>
            </register>
            <register name="INTRVL"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="LED Update Interval">
               <bitfield name="I0"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 000b."
                         mask="0xF"/>
               <bitfield name="I1"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 001b."
                         mask="0xF0"/>
               <bitfield name="I2"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 010b."
                         mask="0xF00"/>
               <bitfield name="I3"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 011b."
                         mask="0xF000"/>
               <bitfield name="I4"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 100b."
                         mask="0xF0000"/>
               <bitfield name="I5"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 101b."
                         mask="0xF00000"/>
               <bitfield name="I6"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 110b."
                         mask="0xF000000"/>
               <bitfield name="I7"
                         caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 111b."
                         mask="0xF0000000"/>
            </register>
            <register name="OUTDLY"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="LED Output Delay">
               <bitfield name="DELAY"
                         caption="The delay, in counts of the clock defined in Clock Source (CLKSRC), in which output transitions are delayed.\n      When this field is 0, there is no added transition delay. When the LED is programmed to be Always On or Always Off, the\n      Output Delay field has no effect."
                         mask="0xFF"/>
            </register>
         </register-group>
      </module>
      <module name="RC_ID"
              id="55"
              version="1.0"
              caption="This interface provides a single pin interface which can discriminate a number of quantized RC constants.">
         <register-group name="RC_ID"
                         caption="This interface provides a single pin interface which can discriminate a number of quantized RC constants.">
            <register name="RC_ID_CTRL"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="RC_ID Control Register">
               <bitfield name="DONE"
                         caption="This bit is cleared to 0 when the RC_ID interface is in the Reset phase, and set to 1 when the interface completes an RC_ID measurement."
                         mask="0x1"/>
               <bitfield name="TC"
                         caption="This bit is cleared to 0 when the RC_ID interface is in the Reset phase, and set to 1 when the interface completes the Discharged phase of an RC_ID measurement."
                         mask="0x2"/>
               <bitfield name="CY_ER"
                         caption="This bit is 1 if an RC_ID measurement encountered an error and the reading in the RC_ID Data Register is invalid. This bit is cleared to 0 when the RC_ID interface is in the Reset phase."
                         mask="0x4"/>
               <bitfield name="START"
                         caption="Setting this bit to 1 initiates the Discharged phase of an RC_ID measurement."
                         mask="0x40"/>
               <bitfield name="ENABLE"
                         caption="Clearing the bit to 0 causes the RC_ID interface to enter the Reset state, gating its clocks, clearing the status bits in this register and entering \n       into its lowest power state. Setting this bit to 1 causes the RC_ID interface to enter the Armed phase of an RC_ID measurement."
                         mask="0x80"/>
               <bitfield name="CLOCK_SET"
                         caption="This field selects the frequency of the Counter circuit clock. This field must retain the same value as long as the ENABLE bit in this register is 1."
                         mask="0x300"/>
            </register>
            <register name="RC_ID_DAT"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Reads of this register provide the result of an RC_ID measurement.">
               <bitfield name="RCID_DATA"
                         caption="Reads of this register provide the result of an RC_ID measurement."
                         mask="0xFFFF"/>
            </register>
         </register-group>
      </module>
      <module name="KMS"
              id="33"
              version="1.0"
              caption="The Keyboard Scan Interface block provides a register interface to the EC\n      to directly scan an external keyboard matrix of size up to 18x8.">
         <register-group name="KMS"
                         caption="The Keyboard Scan Interface block provides a register interface to the EC\n      to directly scan an external keyboard matrix of size up to 18x8.">
            <register name="KSO_SEL"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="KSO Select and control">
               <bitfield name="SEL"
                         caption="This field selects a KSO line (00000b = KSO[0] etc.) for output according to the value off KSO_INVERT in this register."
                         mask="0x1F"/>
               <bitfield name="ALL"
                         caption="0=When key scan is enabled, KSO output controlled by the KSO_SELECT field.\n      1=KSO[x] driven high when selected."
                         mask="0x20"/>
               <bitfield name="KSEN"
                         caption="0= Keyboard scan enabled, 1= Keyboard scan disabled. All KSO output buffers disabled."
                         mask="0x40"/>
               <bitfield name="INV"
                         caption="0= KSO[x] driven low when selected, 1= KSO[x] driven high when selected."
                         mask="0x80"/>
            </register>
            <register name="KSI"
                      offset="0x8"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="[7:0] This field returns the current state of the KSI pins.">
        </register>
            <register name="KSI_STS"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="[7:0] Each bit in this field is set on the falling edge of the corresponding KSI input pin.\n      A KSI interrupt is generated when its corresponding status bit and interrupt enable bit are both set. KSI interrupts are logically ORed together to produce KSC_INT and KSC_INT_WAKE.\n      Writing a '1' to a bit will clear it. Writing a '0' to a bit has no effect.">
        </register>
            <register name="KSI_IEN"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="[7:0] Each bit in KSI_IEN enables interrupt generation due to highto-low transition on a KSI input.\n       An interrupt is generated when the corresponding bits in KSI_STATUS and KSI_INT_EN are both set.">
        </register>
            <register name="EXT_CTRL"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="[0:0] PREDRIVE_ENABLE enables the \n       PREDRIVE mode to actively drive the KSO pins high for approximately 100ns before switching to open-drain operation.\n      0=Disable predrive on KSO pins\n      1=Enable predrive on KSO pins.">
        </register>
         </register-group>
      </module>
      <module name="SMB"
              id="31"
              version="1.0"
              caption="The SMBus interface can handle standard SMBus 2.0 protocols as well as I2C interface.">
         <register-group name="SMB"
                         caption="The SMBus interface can handle standard SMBus 2.0 protocols as well as I2C interface.">
            <register name="WCTRL"
                      offset="0x0"
                      rw="W"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Control Register">
               <bitfield name="ACK"
                         caption="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device."
                         mask="0x1"/>
               <bitfield name="STO" caption="See STA description" mask="0x2"/>
               <bitfield name="STA"
                         caption="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition"
                         mask="0x4"/>
               <bitfield name="ENI"
                         caption="Enable Interrupt bit (ENI) controls the Interrupt Interface"
                         mask="0x8"/>
               <bitfield name="ESO"
                         caption="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)"
                         mask="0x40"/>
               <bitfield name="PIN"
                         caption="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect."
                         mask="0x80"/>
            </register>
            <register name="RSTS"
                      offset="0x0"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Status Register">
               <bitfield name="NBB"
                         caption="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible."
                         mask="0x1"/>
               <bitfield name="LAB"
                         caption="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus"
                         mask="0x2"/>
               <bitfield name="AAS"
                         caption="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received"
                         mask="0x4"/>
               <bitfield name="LRB_AD0"
                         caption="The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave."
                         mask="0x8"/>
               <bitfield name="BER"
                         caption="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected."
                         mask="0x10"/>
               <bitfield name="STS"
                         caption="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode."
                         mask="0x20"/>
               <bitfield name="SAD" caption="SMBus Address Decoded (SAD)" mask="0x40"/>
               <bitfield name="PIN" caption="Pending Interrupt bit" mask="0x80"/>
            </register>
            <register name="OWN_ADDR"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Own Address Register\n           Note that the Data Register and Own Address fields are offset by one bit, so that programming Own Address 1 with a value of 55h will result in the value AAh being recognized as the SMB Controller Core slave address.">
               <bitfield name="ADDR1"
                         caption="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."
                         mask="0x7F"/>
               <bitfield name="ADDR2"
                         caption="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."
                         mask="0x7F00"/>
            </register>
            <register name="I2CDATA"
                      offset="0x8"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="This register holds the data that are either shifted out to or shifted in from the I2C port.">
        </register>
            <register name="RSVD1"
                      offset="0x9"
                      rw="R"
                      size="1"
                      access-size="1"
                      count="3"
                      initval="0x00"
                      caption="Reserved">
        </register>
            <register name="MCMD_u32"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SMBus Master Command Register">
               <bitfield name="MRUN"
                         caption="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."
                         mask="0x1"/>
               <bitfield name="MPROCEED"
                         caption="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."
                         mask="0x2"/>
               <bitfield name="START0"
                         caption="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."
                         mask="0x100"/>
               <bitfield name="STARTN"
                         caption="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."
                         mask="0x200"/>
               <bitfield name="STOP"
                         caption="If this bit is 1, send a Stop bit after the transaction completes."
                         mask="0x400"/>
               <bitfield name="PEC_TERM"
                         caption="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."
                         mask="0x800"/>
               <bitfield name="READM"
                         caption="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."
                         mask="0x1000"/>
               <bitfield name="RD_PEC"
                         caption="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."
                         mask="0x2000"/>
               <bitfield name="WR_CNT"
                         caption="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."
                         mask="0xFF0000"/>
               <bitfield name="RD_CNT"
                         caption="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."
                         mask="0xFF000000"/>
            </register>
            <register name="MCMD_u16"
                      offset="0xC"
                      rw="RW"
                      size="2"
                      access-size="2"
                      count="2"
                      initval="0x00000000"
                      caption="SMBus Master Command Register">
               <bitfield name="MRUN"
                         caption="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."
                         mask="0x1"/>
               <bitfield name="MPROCEED"
                         caption="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."
                         mask="0x2"/>
               <bitfield name="START0"
                         caption="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."
                         mask="0x100"/>
               <bitfield name="STARTN"
                         caption="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."
                         mask="0x200"/>
               <bitfield name="STOP"
                         caption="If this bit is 1, send a Stop bit after the transaction completes."
                         mask="0x400"/>
               <bitfield name="PEC_TERM"
                         caption="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."
                         mask="0x800"/>
               <bitfield name="READM"
                         caption="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."
                         mask="0x1000"/>
               <bitfield name="READ_PEC"
                         caption="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."
                         mask="0x2000"/>
               <bitfield name="WR_CNT"
                         caption="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."
                         mask="0xFF0000"/>
               <bitfield name="RD_CNT"
                         caption="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."
                         mask="0xFF000000"/>
            </register>
            <register name="MCMD_u08"
                      offset="0xC"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="4"
                      initval="0x00000000"
                      caption="SMBus Master Command Register">
               <bitfield name="MRUN"
                         caption="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."
                         mask="0x1"/>
               <bitfield name="MPROCEED"
                         caption="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."
                         mask="0x2"/>
               <bitfield name="START0"
                         caption="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."
                         mask="0x100"/>
               <bitfield name="STARTN"
                         caption="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."
                         mask="0x200"/>
               <bitfield name="STOP"
                         caption="If this bit is 1, send a Stop bit after the transaction completes."
                         mask="0x400"/>
               <bitfield name="PEC_TERM"
                         caption="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."
                         mask="0x800"/>
               <bitfield name="READM"
                         caption="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."
                         mask="0x1000"/>
               <bitfield name="READ_PEC"
                         caption="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."
                         mask="0x2000"/>
               <bitfield name="WR_CNT"
                         caption="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."
                         mask="0xFF0000"/>
               <bitfield name="RD_CNT"
                         caption="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."
                         mask="0xFF000000"/>
            </register>
            <register name="SCMD_u32"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SMBus Slave Command Register">
               <bitfield name="SRUN"
                         caption="Setting this bit to 1 enables the Slave State Machine to operate."
                         mask="0x1"/>
               <bitfield name="SPROCEED"
                         caption="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."
                         mask="0x2"/>
               <bitfield name="PEC"
                         caption="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."
                         mask="0x4"/>
               <bitfield name="WR_CNT"
                         caption="This field is set to the number of bytes software expects to send to the Master."
                         mask="0xFF00"/>
               <bitfield name="RD_CNT"
                         caption="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."
                         mask="0xFF0000"/>
            </register>
            <register name="SCMD_u16"
                      offset="0x10"
                      rw="RW"
                      size="2"
                      access-size="2"
                      count="2"
                      initval="0x00000000"
                      caption="SMBus Slave Command Register">
               <bitfield name="SRUN"
                         caption="Setting this bit to 1 enables the Slave State Machine to operate."
                         mask="0x1"/>
               <bitfield name="SPROCEED"
                         caption="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."
                         mask="0x2"/>
               <bitfield name="PEC"
                         caption="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."
                         mask="0x4"/>
               <bitfield name="WR_CNT"
                         caption="This field is set to the number of bytes software expects to send to the Master."
                         mask="0xFF00"/>
               <bitfield name="RD_CNT"
                         caption="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."
                         mask="0xFF0000"/>
            </register>
            <register name="SCMD_u08"
                      offset="0x10"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="4"
                      initval="0x00000000"
                      caption="SMBus Slave Command Register">
               <bitfield name="SRUN"
                         caption="Setting this bit to 1 enables the Slave State Machine to operate."
                         mask="0x1"/>
               <bitfield name="SPROCEED"
                         caption="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."
                         mask="0x2"/>
               <bitfield name="PEC"
                         caption="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."
                         mask="0x4"/>
               <bitfield name="WR_CNT"
                         caption="This field is set to the number of bytes software expects to send to the Master."
                         mask="0xFF00"/>
               <bitfield name="RD_CNT"
                         caption="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."
                         mask="0xFF0000"/>
            </register>
            <register name="PEC"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Packet Error Check (PEC) Register">
               <bitfield name="PEC"
                         caption="The SMBus Packet Error Check (PEC) byte."
                         mask="0xFF"/>
            </register>
            <register name="RSHTM"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000004D"
                      caption="Repeated Start Hold Time Register">
               <bitfield name="RSHTM"
                         caption="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied."
                         mask="0xFF"/>
            </register>
            <register name="RSVD2"
                      offset="0x1C"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00"
                      caption="Reserved">
        </register>
            <register name="COMPL_u32"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Completion Register">
               <bitfield name="DTEN"
                         caption="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."
                         mask="0x4"/>
               <bitfield name="MCEN"
                         caption="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."
                         mask="0x8"/>
               <bitfield name="SCEN"
                         caption="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."
                         mask="0x10"/>
               <bitfield name="BIDEN"
                         caption="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."
                         mask="0x20"/>
               <bitfield name="TIMERR"
                         caption="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."
                         mask="0x40"/>
               <bitfield name="DTO"
                         caption="DTO is the Device Time-out bit. (R/WC)"
                         mask="0x100"/>
               <bitfield name="MCTO"
                         caption="MCTO is the Master Cumulative Time-out bit. (R/WC)"
                         mask="0x200"/>
               <bitfield name="SCTO"
                         caption="SCTO is the Slave Cumulative Time-out bit(R/WC)"
                         mask="0x400"/>
               <bitfield name="CHDL"
                         caption="CHDL is the clock high time-out detect bit(R/WC)"
                         mask="0x800"/>
               <bitfield name="CHDH"
                         caption="CHDH is the bus idle time-out detect bit(R/WC)"
                         mask="0x1000"/>
               <bitfield name="BER"
                         caption="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"
                         mask="0x2000"/>
               <bitfield name="LAB"
                         caption="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"
                         mask="0x4000"/>
               <bitfield name="SNAKR"
                         caption="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."
                         mask="0x10000"/>
               <bitfield name="STR"
                         caption="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."
                         mask="0x20000"/>
               <bitfield name="SPROT"
                         caption="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."
                         mask="0x80000"/>
               <bitfield name="REP_RD"
                         caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."
                         mask="0x100000"/>
               <bitfield name="REP_WR"
                         caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."
                         mask="0x200000"/>
               <bitfield name="MNAKX"
                         caption="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"
                         mask="0x1000000"/>
               <bitfield name="MTR"
                         caption="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."
                         mask="0x2000000"/>
               <bitfield name="IDLE"
                         caption="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"
                         mask="0x20000000"/>
               <bitfield name="MDONE"
                         caption="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"
                         mask="0x40000000"/>
               <bitfield name="SDONE"
                         caption="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"
                         mask="0x80000000"/>
            </register>
            <register name="COMPL_u16"
                      offset="0x20"
                      rw="RW"
                      size="2"
                      access-size="2"
                      count="2"
                      initval="0x00000000"
                      caption="Completion Register">
               <bitfield name="DTEN"
                         caption="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."
                         mask="0x4"/>
               <bitfield name="MCEN"
                         caption="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."
                         mask="0x8"/>
               <bitfield name="SCEN"
                         caption="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."
                         mask="0x10"/>
               <bitfield name="BIDEN"
                         caption="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."
                         mask="0x20"/>
               <bitfield name="TIMERR"
                         caption="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."
                         mask="0x40"/>
               <bitfield name="DTO"
                         caption="DTO is the Device Time-out bit. (R/WC)"
                         mask="0x100"/>
               <bitfield name="MCTO"
                         caption="MCTO is the Master Cumulative Time-out bit. (R/WC)"
                         mask="0x200"/>
               <bitfield name="SCTO"
                         caption="SCTO is the Slave Cumulative Time-out bit(R/WC)"
                         mask="0x400"/>
               <bitfield name="CHDL"
                         caption="CHDL is the clock high time-out detect bit(R/WC)"
                         mask="0x800"/>
               <bitfield name="CHDH"
                         caption="CHDH is the bus idle time-out detect bit(R/WC)"
                         mask="0x1000"/>
               <bitfield name="BER"
                         caption="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"
                         mask="0x2000"/>
               <bitfield name="LAB"
                         caption="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"
                         mask="0x4000"/>
               <bitfield name="SNAKR"
                         caption="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."
                         mask="0x10000"/>
               <bitfield name="STR"
                         caption="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."
                         mask="0x20000"/>
               <bitfield name="SPROT"
                         caption="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."
                         mask="0x80000"/>
               <bitfield name="REP_RD"
                         caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."
                         mask="0x100000"/>
               <bitfield name="REP_WR"
                         caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."
                         mask="0x200000"/>
               <bitfield name="MNAKX"
                         caption="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"
                         mask="0x1000000"/>
               <bitfield name="MTR"
                         caption="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."
                         mask="0x2000000"/>
               <bitfield name="IDLE"
                         caption="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"
                         mask="0x20000000"/>
               <bitfield name="MDONE"
                         caption="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"
                         mask="0x40000000"/>
               <bitfield name="SDONE"
                         caption="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"
                         mask="0x80000000"/>
            </register>
            <register name="COMPL_u08"
                      offset="0x20"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="4"
                      initval="0x00000000"
                      caption="Completion Register">
               <bitfield name="DTEN"
                         caption="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."
                         mask="0x4"/>
               <bitfield name="MCEN"
                         caption="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."
                         mask="0x8"/>
               <bitfield name="SCEN"
                         caption="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."
                         mask="0x10"/>
               <bitfield name="BIDEN"
                         caption="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."
                         mask="0x20"/>
               <bitfield name="TIMERR"
                         caption="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."
                         mask="0x40"/>
               <bitfield name="DTO"
                         caption="DTO is the Device Time-out bit. (R/WC)"
                         mask="0x100"/>
               <bitfield name="MCTO"
                         caption="MCTO is the Master Cumulative Time-out bit. (R/WC)"
                         mask="0x200"/>
               <bitfield name="SCTO"
                         caption="SCTO is the Slave Cumulative Time-out bit(R/WC)"
                         mask="0x400"/>
               <bitfield name="CHDL"
                         caption="CHDL is the clock high time-out detect bit(R/WC)"
                         mask="0x800"/>
               <bitfield name="CHDH"
                         caption="CHDH is the bus idle time-out detect bit(R/WC)"
                         mask="0x1000"/>
               <bitfield name="BER"
                         caption="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"
                         mask="0x2000"/>
               <bitfield name="LAB"
                         caption="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"
                         mask="0x4000"/>
               <bitfield name="SNAKR"
                         caption="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."
                         mask="0x10000"/>
               <bitfield name="STR"
                         caption="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."
                         mask="0x20000"/>
               <bitfield name="SPROT"
                         caption="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."
                         mask="0x80000"/>
               <bitfield name="REP_RD"
                         caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."
                         mask="0x100000"/>
               <bitfield name="REP_WR"
                         caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."
                         mask="0x200000"/>
               <bitfield name="MNAKX"
                         caption="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"
                         mask="0x1000000"/>
               <bitfield name="MTR"
                         caption="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."
                         mask="0x2000000"/>
               <bitfield name="IDLE"
                         caption="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"
                         mask="0x20000000"/>
               <bitfield name="MDONE"
                         caption="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"
                         mask="0x40000000"/>
               <bitfield name="SDONE"
                         caption="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"
                         mask="0x80000000"/>
            </register>
            <register name="IDLSC"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x01FC01ED"
                      caption="Idle Scaling Register">
               <bitfield name="FAIR_BUS_IDL_MIN"
                         caption="This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus"
                         mask="0xFFF"/>
               <bitfield name="FAIR_IDL_DLY"
                         caption="This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus"
                         mask="0xFFF0000"/>
            </register>
            <register name="CFG_u32"
                      offset="0x28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Configuration Register">
               <bitfield name="PORT_SEL"
                         caption="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."
                         mask="0xF"/>
               <bitfield name="TCEN"
                         caption="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"
                         mask="0x10"/>
               <bitfield name="SLOW_CLK"
                         caption="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."
                         mask="0x20"/>
               <bitfield name="TEST" caption="Must be always written with 0." mask="0x40"/>
               <bitfield name="PECEN"
                         caption="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"
                         mask="0x80"/>
               <bitfield name="FEN"
                         caption="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."
                         mask="0x100"/>
               <bitfield name="RST"
                         caption="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."
                         mask="0x200"/>
               <bitfield name="EN"
                         caption="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."
                         mask="0x400"/>
               <bitfield name="DSA"
                         caption="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"
                         mask="0x800"/>
               <bitfield name="FAIR"
                         caption="If this bit is 1, the MCTP Fairness protocol is in effect."
                         mask="0x1000"/>
               <bitfield name="TEST0" caption="Must be always written with 0." mask="0x2000"/>
               <bitfield name="GC_DIS"
                         caption="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."
                         mask="0x4000"/>
               <bitfield name="FLUSH_SXBUF"
                         caption="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x10000"/>
               <bitfield name="FLUSH_SRBUF"
                         caption="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x20000"/>
               <bitfield name="FLUSH_MXBUF"
                         caption="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x40000"/>
               <bitfield name="FLUSH_MRBUF"
                         caption="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x80000"/>
               <bitfield name="EN_AAS"
                         caption="0: Disable the AAS, 1: Enable the AAS Interrupt"
                         mask="0x10000000"/>
               <bitfield name="ENIDI"
                         caption="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."
                         mask="0x20000000"/>
               <bitfield name="ENMI"
                         caption="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."
                         mask="0x40000000"/>
               <bitfield name="ENSI"
                         caption="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"
                         mask="0x80000000"/>
            </register>
            <register name="CFG_u16"
                      offset="0x28"
                      rw="RW"
                      size="2"
                      access-size="2"
                      count="2"
                      initval="0x00000000"
                      caption="Configuration Register">
               <bitfield name="PORT_SEL"
                         caption="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."
                         mask="0xF"/>
               <bitfield name="TCEN"
                         caption="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"
                         mask="0x10"/>
               <bitfield name="SLOW_CLK"
                         caption="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."
                         mask="0x20"/>
               <bitfield name="TEST" caption="Must be always written with 0." mask="0x40"/>
               <bitfield name="PECEN"
                         caption="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"
                         mask="0x80"/>
               <bitfield name="FEN"
                         caption="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."
                         mask="0x100"/>
               <bitfield name="RST"
                         caption="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."
                         mask="0x200"/>
               <bitfield name="EN"
                         caption="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."
                         mask="0x400"/>
               <bitfield name="DSA"
                         caption="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"
                         mask="0x800"/>
               <bitfield name="FAIR"
                         caption="If this bit is 1, the MCTP Fairness protocol is in effect."
                         mask="0x1000"/>
               <bitfield name="TEST0" caption="Must be always written with 0." mask="0x2000"/>
               <bitfield name="GC_DIS"
                         caption="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."
                         mask="0x4000"/>
               <bitfield name="FLUSH_SXBUF"
                         caption="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x10000"/>
               <bitfield name="FLUSH_SRBUF"
                         caption="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x20000"/>
               <bitfield name="FLUSH_MXBUF"
                         caption="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x40000"/>
               <bitfield name="FLUSH_MRBUF"
                         caption="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x80000"/>
               <bitfield name="EN_AAS"
                         caption="0: Disable the AAS, 1: Enable the AAS Interrupt"
                         mask="0x10000000"/>
               <bitfield name="ENIDI"
                         caption="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."
                         mask="0x20000000"/>
               <bitfield name="ENMI"
                         caption="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."
                         mask="0x40000000"/>
               <bitfield name="ENSI"
                         caption="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"
                         mask="0x80000000"/>
            </register>
            <register name="CFG_u08"
                      offset="0x28"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="4"
                      initval="0x00000000"
                      caption="Configuration Register">
               <bitfield name="PORT_SEL"
                         caption="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."
                         mask="0xF"/>
               <bitfield name="TCEN"
                         caption="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"
                         mask="0x10"/>
               <bitfield name="SLOW_CLK"
                         caption="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."
                         mask="0x20"/>
               <bitfield name="TEST" caption="Must be always written with 0." mask="0x40"/>
               <bitfield name="PECEN"
                         caption="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"
                         mask="0x80"/>
               <bitfield name="FEN"
                         caption="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."
                         mask="0x100"/>
               <bitfield name="RST"
                         caption="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."
                         mask="0x200"/>
               <bitfield name="EN"
                         caption="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."
                         mask="0x400"/>
               <bitfield name="DSA"
                         caption="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"
                         mask="0x800"/>
               <bitfield name="FAIR"
                         caption="If this bit is 1, the MCTP Fairness protocol is in effect."
                         mask="0x1000"/>
               <bitfield name="TEST0" caption="Must be always written with 0." mask="0x2000"/>
               <bitfield name="GC_DIS"
                         caption="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."
                         mask="0x4000"/>
               <bitfield name="FLUSH_SXBUF"
                         caption="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x10000"/>
               <bitfield name="FLUSH_SRBUF"
                         caption="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x20000"/>
               <bitfield name="FLUSH_MXBUF"
                         caption="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x40000"/>
               <bitfield name="FLUSH_MRBUF"
                         caption="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."
                         mask="0x80000"/>
               <bitfield name="EN_AAS"
                         caption="0: Disable the AAS, 1: Enable the AAS Interrupt"
                         mask="0x10000000"/>
               <bitfield name="ENIDI"
                         caption="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."
                         mask="0x20000000"/>
               <bitfield name="ENMI"
                         caption="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."
                         mask="0x40000000"/>
               <bitfield name="ENSI"
                         caption="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"
                         mask="0x80000000"/>
            </register>
            <register name="BUSCLK"
                      offset="0x2C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00004F4F"
                      caption="Bus Clock Register">
               <bitfield name="LOW_PER"
                         caption="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock."
                         mask="0xFF"/>
               <bitfield name="HIGH_PER"
                         caption="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock."
                         mask="0xFF00"/>
            </register>
            <register name="BLKID"
                      offset="0x30"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Block ID Register">
               <bitfield name="ID" caption="Block ID." mask="0xFF"/>
            </register>
            <register name="BLKREV"
                      offset="0x34"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Revision Register">
               <bitfield name="REV" caption="Block Revision Number" mask="0xFF"/>
            </register>
            <register name="BBCTRL"
                      offset="0x38"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000060"
                      caption="Bit-Bang Control Register">
               <bitfield name="BBEN"
                         caption="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled"
                         mask="0x1"/>
               <bitfield name="CLDIR"
                         caption="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output"
                         mask="0x2"/>
               <bitfield name="DADIR"
                         caption="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output"
                         mask="0x4"/>
               <bitfield name="BBCLK"
                         caption="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'"
                         mask="0x8"/>
               <bitfield name="BBDAT"
                         caption="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'"
                         mask="0x10"/>
               <bitfield name="BBCLKI"
                         caption="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK."
                         mask="0x20"/>
               <bitfield name="BBDATI"
                         caption="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT"
                         mask="0x40"/>
            </register>
            <register name="TEST"
                      offset="0x3C"
                      rw="R"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Test">
               <bitfield name="TEST"
                         caption="This register must not be written, or undesirable results may occur."
                         mask="0xFF"/>
            </register>
            <register name="DATATM"
                      offset="0x40"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0C4D5006"
                      caption="Data Timing Register">
               <bitfield name="DATA_HOLD"
                         caption="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low."
                         mask="0xFF"/>
               <bitfield name="RESTART_SETUP"
                         caption="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition."
                         mask="0xFF00"/>
               <bitfield name="STOP_SETUP"
                         caption="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition."
                         mask="0xFF0000"/>
               <bitfield name="FIRST_START_HOLD"
                         caption="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register."
                         mask="0xFF000000"/>
            </register>
            <register name="TMOUTSC"
                      offset="0x44"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x4B9CC2C7"
                      caption="Time-Out Scaling Register">
               <bitfield name="CLK_HIGH_TIM_OUT"
                         caption="Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2"
                         mask="0xFF"/>
               <bitfield name="SLV_CUM_TIM_OUT"
                         caption="Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024"
                         mask="0xFF00"/>
               <bitfield name="MAST_CUM_TIM_OUT"
                         caption="Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512"
                         mask="0xFF0000"/>
               <bitfield name="BUS_IDLE_MIN"
                         caption="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period"
                         mask="0xFF000000"/>
            </register>
            <register name="SLV_TXB"
                      offset="0x48"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SMBus Slave Transmit Buffer Register">
               <bitfield name="STXB" caption="STXB" mask="0xFF"/>
            </register>
            <register name="SLV_RXB"
                      offset="0x4C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SMBus Slave Receive Buffer Register">
               <bitfield name="SRXB" caption="SRXB" mask="0xFF"/>
            </register>
            <register name="MTR_TXB"
                      offset="0x50"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SMBus Master Transmit Buffer Register">
               <bitfield name="MTXB" caption="MTXB" mask="0xFF"/>
            </register>
            <register name="MTR_RXB"
                      offset="0x54"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SMBus Master Receive Buffer Register">
               <bitfield name="MRXB" caption="MRXB" mask="0xFF"/>
            </register>
            <register name="WAKE_STS"
                      offset="0x60"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="WAKE STATUS Register">
               <bitfield name="START_BIT_DET"
                         caption="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)"
                         mask="0x1"/>
            </register>
            <register name="WAKE_EN"
                      offset="0x64"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="WAKE ENABLE Register">
               <bitfield name="START_DET_INT_EN"
                         caption="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n      1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled"
                         mask="0x1"/>
            </register>
         </register-group>
      </module>
      <module name="GP_SPI"
              id="62"
              version="1.0"
              caption="The General Purpose Serial Peripheral Interface (GP-SPI) may be used\n       to communicate with various peripheral devices, e.g., EEPROMS, DACs, ADCs, that use a\n         standard Serial Peripheral Interface.">
         <register-group name="GP_SPI"
                         caption="The General Purpose Serial Peripheral Interface (GP-SPI) may be used\n          to communicate with various peripheral devices, e.g., EEPROMS, DACs, ADCs, that use a\n           standard Serial Peripheral Interface.">
            <register name="ENABLE"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000000F"
                      caption="[0:0]  1=Enabled. The device is fully operational\n          0=Disabled. Clocks are gated to conserve power and the SPDOUT and SPI_CLK signals are set to their inactive state">
        </register>
            <register name="CTRL"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000002"
                      caption="SPI Control">
               <bitfield name="LSBF"
                         caption="Least Significant Bit First\n             1= The data is transferred in LSB-first order.\n        0= The data is transferred in MSB-first order. (default)"
                         mask="0x1"/>
               <bitfield name="BIOEN"
                         caption="Bidirectional Output Enable control.\n             1=The SPDOUT_Direction signal configures the SPDOUT signal as an output.\n         0=The SPDOUT_Direction signal configures the SPDOUT signal as an input."
                         mask="0x2"/>
               <bitfield name="SPDIN_SEL"
                         caption="[3:2] 1xb=SPDIN1 and SPDIN2. Select this option for Dual Mode\n        [3:2] 01b=SPDIN2 only. Select this option for Half Duplex\n                   [3:2] 00b=SPDIN1 only. Select this option for Full Duplex"
                         mask="0xC"/>
               <bitfield name="SOFT_RST"
                         caption="Soft Reset is a self-clearing bit. Writing zero to this bit has no effect. \n      Writing a one to this bit resets the entire SPI Interface, including all counters and registers back to their initial state."
                         mask="0x10"/>
               <bitfield name="AUTO_RD"
                         caption="Auto Read Enable.\n             1=A read of the SPI RX_DATA Register will clear both the RXBF status bit and the TXBE status bit\n          0=A read of the SPI RX_DATA Register will clear the RXBF status bit. The TXBE status bit will not be modified"
                         mask="0x20"/>
               <bitfield name="CE"
                         caption="SPI Chip Select Enable.\n                 1= SPI_CS# output signal is asserted, i.e., driven to logic '0' \n                    0= SPI_CS# output signal is deasserted, i.e., driven to logic '1'"
                         mask="0x40"/>
            </register>
            <register name="STS"
                      offset="0x8"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SPI Status">
               <bitfield name="TXBE"
                         caption="1=TX_Data buffer is empty, 0=TX_Data buffer is not empty"
                         mask="0x1"/>
               <bitfield name="RXBF"
                         caption="1=RX_Data buffer is full, 0=RX_Data buffer is not full"
                         mask="0x2"/>
               <bitfield name="ACTIVE" caption="ACTIVE status" mask="0x4"/>
            </register>
            <register name="TX_DAT"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="[7:0]  A write to this register when the \n       Tx_Data buffer is empty (TXBE in the SPI Status Register is '1') initiates a SPI transaction.">
        </register>
            <register name="RX_DAT"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="[7:0] This register is used to read the value returned by the external SPI device.">
        </register>
            <register name="CLK_CTRL"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="SPI Clock Control. This register should not be changed during an active SPI transaction.">
               <bitfield name="TCLKPH"
                         caption="1=Valid data is clocked out on the first SPI_CLK edge on SPDOUT signal. The slave device should sample this data on the second and \n       following even SPI_CLK edges (i.e., sample data on falling edge) 0=Valid data is clocked out on the SPDOUT signal prior to the first SPI_CLK edge. \n       The slave device should sample this data on the first and following odd SPI_CLK edges (i.e., sample data on rising edge)"
                         mask="0x1"/>
               <bitfield name="RCLKPH"
                         caption="1=Valid data on SPDIN signal is expected after the first SPI_CLK edge. This data is sampled on the second and \n       following even SPI_CLK edges (i.e., sample data on falling edge) 0=Valid data is expected on the SPDIN signal on the first SPI_CLK edge. \n       This data is sampled on the first and following odd SPI_-CLK edges (i.e., sample data on rising edge)"
                         mask="0x2"/>
               <bitfield name="CLKPOL"
                         caption="1=The SPI_CLK signal is high when the interface is idle and the first clock edge is a falling edge\n            0=The SPI_CLK is low when the interface is idle and the first clock edge is a rising edge"
                         mask="0x4"/>
               <bitfield name="CLKSRC"
                         caption="1=2MHz, 0=48 MHz Ring Oscillator"
                         mask="0x10"/>
            </register>
            <register name="CLK_GEN"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000002"
                      caption="[5:0] PRELOAD SPI Clock Generator Preload value.">
               <bitfield name="PRLD" caption="SPI Clock Generator Preload Value" mask="0x3F"/>
            </register>
         </register-group>
      </module>
      <module name="QMSPI"
              id="147"
              version="1.0"
              caption="The Quad SPI Master Controller may be used to communicate with various \n        peripheral devices that use a Serial Peripheral Interface, such as EEPROMS, DACs and ADCs.\n        The controller can be configured to support advanced SPI Flash devices with multi-phase access protocols.">
         <register-group name="QMSPI"
                         caption="The Quad SPI Master Controller may be used to communicate with various \n           peripheral devices that use a Serial Peripheral Interface, such as EEPROMS, DACs and ADCs.\n        The controller can be configured to support advanced SPI Flash devices with multi-phase access protocols.">
            <register name="MODE"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000000F"
                      caption="QMSPI Mode Register">
               <bitfield name="ACT"
                         caption="This bit is used to activate the QMSPI block.\n             1=Enabled. The block is fully operational\n           0=Disabled. Clocks are gated to conserve power and the output signals are set to their inactive state."
                         mask="0x1"/>
               <bitfield name="SOFT_RST"
                         caption="Writing this bit with a 1 will reset the Quad SPI block. It is self-clearing."
                         mask="0x2"/>
               <bitfield name="CPOL"
                         caption="Polarity of the SPI clock line when there are no transactions in process. 1=SPI Clock starts High; 0=SPI Clock starts Low."
                         mask="0x100"/>
               <bitfield name="CHPA_MOSI"
                         caption="Clock phase of the Master data out. Common SPI modes require this field to be programmed with the same value as CHPA_MISO in this register.\n         e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n              If CPOL=1: 1=Data changes on the falling edge of the SPI clock; 0=Data changes on the rising edge of the SPI clock\n             If CPOL=0: 1=Data changes on the rising edge of the SPI clock; 0=Data changes on the falling edge of the SPI clock"
                         mask="0x200"/>
               <bitfield name="CHPA_MISO"
                         caption="Clock phase of the Master data in. Common SPI modes require this field to be programmed with the same value as CHPA_MOSI in this register.\n        e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n           If CPOL=1: 1=Data are captured on the rising edge of the SPI clock; 0=Data are captured on the falling edge of the SPI clock\n                If CPOL=0: 1=Data are captured on the falling edge of the SPI clock; 0=Data are captured on the rising edge of the SPI clock"
                         mask="0x400"/>
               <bitfield name="CLK_DIV"
                         caption="The SPI clock divide in number of system clocks. A value of 1 divides the master clock by 1, a value of 255 divides the master clock by 255.\n       A value of 0 divides the master clock by 256."
                         mask="0x1FF0000"/>
            </register>
            <register name="CTRL"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000200"
                      caption="QMSPI SPI Control">
               <bitfield name="TX_MODE"
                         caption="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either \n            TX_TRANSFER_ENABLE or RX_TRANSFER_ENABLE must be 0.\n                  3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."
                         mask="0x3"/>
               <bitfield name="TX_TRANS_EN"
                         caption="This field bit selects the transmit function of the SPI interface.\n                3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used.\n                2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n               1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                 0=Transmit is Disabled. Not data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."
                         mask="0xC"/>
               <bitfield name="TX_DMA_EN"
                         caption="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either\n        the interface reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n           1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                 3=DMA is enabled and set to 4 Bytes.\n          0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware"
                         mask="0x30"/>
               <bitfield name="RX_TRANS_EN"
                         caption="This bit enables the receive function of the SPI interface.\n             1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer\n             0=Receive is disabled"
                         mask="0x40"/>
               <bitfield name="RX_DMA_EN"
                         caption="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO until either the interface\n          reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n         1=DMA is enabled.and set to 1 Byte\n                2=DMA is enabled and set to 2 Bytes\n              3=DMA is enabled and set to 4 Bytes\n              0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware"
                         mask="0x180"/>
               <bitfield name="CLOSE_TRANS_EN"
                         caption="This selects what action is taken at the end of a transfer. When the transaction closes, the Chip Select de-asserts, the SPI \n       interface returns to IDLE and the DMA interface terminates When Description Buffers are in use this bit must be set only on the Last Buffer.\n         1=The transaction is terminated\n                 0=The transaction is not terminated"
                         mask="0x200"/>
               <bitfield name="TRANS_UNITS"
                         caption="3=TRANSFER_LENGTH defined in units of 16-byte segments\n            2=TRANSFER_LENGTH defined in units of 4-byte segments\n              1=TRANSFER_LENGTH defined in units of bytes\n          0=TRANSFER_LENGTH defined in units of bits."
                         mask="0xC00"/>
               <bitfield name="DESCR_BUFF_PTR"
                         caption="This field selects the first buffer used if Description Buffers are enabled."
                         mask="0xF000"/>
               <bitfield name="DESCR_BUFF_EN"
                         caption="This enables the Description Buffers to be used.\n                1=Description Buffers in use. The first buffer is defined in DESCRIPTION_BUFFER_POINTER\n          0=Description Buffers disabled."
                         mask="0x10000"/>
               <bitfield name="TRANS_LEN"
                         caption="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TRANS_LEN_BITS.\n          A value of 0 means an infinite length transfer."
                         mask="0xFFFE0000"/>
            </register>
            <register name="EXE"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000001"
                      caption="QMSPI Execute Register">
               <bitfield name="START"
                         caption="Writing a 1 to this bit will start the SPI transfer. Writing a 0 to this bit has no effect. This bit is self-clearing.\n          This bit must not be set to 1 if the field STOP in this register is set to 1."
                         mask="0x1"/>
               <bitfield name="STOP"
                         caption="Writing a 1 to this bit will stop any transfer in progress at the next byte boundary. Writing a 0 to this bit has no effect.\n       This bit is self clearing. This bit must not be set to 1 if the field START in this register is set to 1."
                         mask="0x2"/>
               <bitfield name="CLR_DAT_BUFF"
                         caption="Writing a 1 to this bit will clear out the Transmit and Receive FIFOs.\n       Any data stored in the FIFOs is discarded and all count fields are reset.\n            Writing a 0 to this bit has no effect. This bit is self clearing."
                         mask="0x4"/>
            </register>
            <register name="IFCTRL"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000025"
                      caption="QMSPI Interface Control Register">
               <bitfield name="WR_PRCT_OUT_VAL"
                         caption="This bit sets the value on the WRITE PROTECT SPI Output Port if it is driven.\n       1=WRITE PROTECT is driven to 1; 0=WRITE PROTECT is driven to 0"
                         mask="0x1"/>
               <bitfield name="WR_PRCT_OUT_EN"
                         caption="1=WRITE PROTECT SPI Output Port is driven\n       0=WRITE PROTECT SPI Output Port is not driven"
                         mask="0x2"/>
               <bitfield name="HLD_OUT_VAL"
                         caption="This bit sets the value on the HOLD SPI Output Port if it is driven.\n        1=HOLD is driven to 1; 0=HOLD is driven to 0."
                         mask="0x4"/>
               <bitfield name="HLD_OUT_EN"
                         caption="1=HOLD SPI Output Port is driven\n           0=HOLD SPI Output Port is not driven."
                         mask="0x8"/>
               <bitfield name="PD_ON_NOT_SEL"
                         caption="1=Enable pull-down resistors on Receive pins while the SPI Chip Select signal is not asserted\n       0=No pull-down resistors enabled on Receive pins"
                         mask="0x10"/>
               <bitfield name="PU_ON_NOTSEL"
                         caption="1=Enable pull-up resistors on Receive pins while the SPI Chip Select signal is not asserted\n       0=No pull-up resistors enabled on Receive pins."
                         mask="0x20"/>
               <bitfield name="PD_ON_NOTDRIVEN"
                         caption="1=Enable pull-down resistors on Transmit pins while the pins are not driven\n                 0=No pull-down resistors enabled ion Transmit pins."
                         mask="0x40"/>
               <bitfield name="PU_ON_NOTDRIVEN"
                         caption="1=Enable pull-up resistors on Transmit pins while the pins are not driven\n          0=No pull-up resistors enabled ion Transmit pins."
                         mask="0x80"/>
            </register>
            <register name="STS"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00002000"
                      caption="QMSPI Status Register">
               <bitfield name="TRANS_COMPL"
                         caption="In Manual Mode (neither DMA nor Description Buffers are enabled), this bit will be set to 1 when the transfer matches TRANSFER_LENGTH.\n      If DMA Mode is enabled, this bit will be set to 1 when DMA_COMPLETE is set to 1. In Description Buffer Mode, this bit will be set to 1 only when the Last Buffer completes its transfer.\n      In all cases, this bit will be set to 1 if the STOP bit is set to 1 and the controller has completed the current 8 bits being copied.\n               1=Transfer completed; 0=Transfer not complete."
                         mask="0x1"/>
               <bitfield name="DMA_COMPL"
                         caption="This field has no meaning if DMA is not enabled. This bit will be set to 1 when the DMA controller asserts the DONE signal to the SPI controller.\n      This occurs either when the SPI controller has closed the DMA transfer, or the DMA channel has completed its count. If both Transmit and Receive DMA transfers are\n              active, then this bit will only assert after both have completed. If CLOSE_TRANSFER_ENABLE is enabled, DMA_COMPLETE and TRANSFER_COMPLETE will be asserted simultaneously.\n          This status is not inhibited by the description buffers, so it can fire on all valid description buffers while operating in that mode.\n                 1=DMA completed; 0=DMA not completed."
                         mask="0x2"/>
               <bitfield name="TX_BUFF_ERR"
                         caption="1=Overflow error occurred (attempt to write to a full Transmit Buffer)\n             0=No overflow occurred."
                         mask="0x4"/>
               <bitfield name="RX_BUFF_ERR"
                         caption="1=Underflow error occurred (attempt to read from an empty Receive Buffer)\n         0=No underflow occurred."
                         mask="0x8"/>
               <bitfield name="PRGM_ERR"
                         caption="This bit if a programming error is detected.\n             1=Programming Error detected; 0=No programming error detected."
                         mask="0x10"/>
               <bitfield name="TX_BUFF_FULL"
                         caption="1=The Transmit Buffer is full\n                   0=The Transmit Buffer is not full."
                         mask="0x100"/>
               <bitfield name="TX_BUFF_EMP"
                         caption="1=The Transmit Buffer is empty\n            0=The Transmit Buffer is not empty."
                         mask="0x200"/>
               <bitfield name="TX_BUFF_REQ"
                         caption="This status is asserted if the Transmit Buffer reaches a high water mark established by the TRANSMIT_BUFFER_TRIGGER field.\n              1=TRANSMIT_BUFFER_COUNT is less than or equal to TRANSMIT_BUFFER_TRIGGER; 0=TRANSMIT_BUFFER_COUNT is greater than TRANSMIT_BUFFER_TRIGGER."
                         mask="0x400"/>
               <bitfield name="TX_BUFF_STALL"
                         caption="1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to read from an empty Transmit Buffer)\n        0=No stalls occurred."
                         mask="0x800"/>
               <bitfield name="RX_BUFF_FULL"
                         caption="1=The Receive Buffer is full\n               0=The Receive Buffer is not full."
                         mask="0x1000"/>
               <bitfield name="RX_BUFF_EMP"
                         caption="1=The Receive Buffer is empty\n             0=The Receive Buffer is not empty."
                         mask="0x2000"/>
               <bitfield name="RX_BUFF_REQ"
                         caption="This status is asserted if the Receive Buffer reaches a high water mark established by the RECEIVE_BUFFER_TRIGGER field.\n             1=RECEIVE_BUFFER_COUNT is greater than or equal to RECEIVE_BUFFER_TRIGGER\n                 0=RECEIVE_BUFFER_COUNT is less than RECEIVE_BUFFER_TRIGGER."
                         mask="0x4000"/>
               <bitfield name="RX_BUFF_STALL"
                         caption="1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to write to a full Receive Buffer)\n          0=No stalls occurred."
                         mask="0x8000"/>
               <bitfield name="TRANS_ACTIV"
                         caption="1=A transfer is currently executing\n            0=No transfer currently in progress."
                         mask="0x10000"/>
               <bitfield name="CUR_DESCR_BUF"
                         caption="This field shows the Description Buffer currently active. This field has no meaning if Description Buffers are not enabled."
                         mask="0xF000000"/>
            </register>
            <register name="BUF_CNT_STS"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="QMSPI Buffer Count Status Register">
               <bitfield name="TX_BUFF_CNT"
                         caption="This is a count of the number of bytes currently valid in the Transmit Buffer."
                         mask="0xFFFF"/>
               <bitfield name="RX_BUFF_CNT"
                         caption="This is a count of the number of bytes currently valid in the Receive Buffer."
                         mask="0xFFFF0000"/>
            </register>
            <register name="IEN"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00002000"
                      caption="QMSPI Interrupt Enable Register">
               <bitfield name="TRANS_COMPL_EN"
                         caption="1=Enable an interrupt if TRANSFER_COMPLETE is asserted\n         0=Disable the interrupt."
                         mask="0x1"/>
               <bitfield name="DMA_COMPL_EN"
                         caption="1=Enable an interrupt if DMA_COMPLETE is asserted\n           0=Disable the interrupt."
                         mask="0x2"/>
               <bitfield name="TX_BUF_ERR_EN"
                         caption="1=Enable an interrupt if TRANSMIT_BUFFER_ERROR is asserted\n         0=Disable the interrupt."
                         mask="0x4"/>
               <bitfield name="RX_BUF_ERR_EN"
                         caption="1=Enable an interrupt if RECEIVE_BUFFER_ERROR is asserted\n        0=Disable the interrupt."
                         mask="0x8"/>
               <bitfield name="PRGM_ERR_EN"
                         caption="1=Enable an interrupt if PROGRAMMING_ERROR is asserted\n              0=Disable the interrupt."
                         mask="0x10"/>
               <bitfield name="TX_BUF_FULL_EN"
                         caption="1=Enable an interrupt if TRANSMIT_BUFFER_FULL is asserted\n         0=Disable the interrupt."
                         mask="0x100"/>
               <bitfield name="TX_BUF_EMPTY_EN"
                         caption="1=Enable an interrupt if TRANSMIT_BUFFER_EMPTY is asserted\n           0=Disable the interrupt."
                         mask="0x200"/>
               <bitfield name="TX_BUF_REQ_EN"
                         caption="1=Enable an interrupt if TRANSMIT_BUFFER_REQUEST is asserted\n         0=Disable the interrupt."
                         mask="0x400"/>
               <bitfield name="RX_BUF_FUL_EN"
                         caption="1=Enable an interrupt if RECEIVE_BUFFER_FULL is asserted\n              0=Disable the interrupt."
                         mask="0x1000"/>
               <bitfield name="RX_BUF_EMPTY_EN"
                         caption="1=Enable an interrupt if RECEIVE_BUFFER_EMPTY is asserted\n            0=Disable the interrupt."
                         mask="0x2000"/>
               <bitfield name="RX_BUF_REQ_EN"
                         caption="1=Enable an interrupt if RECEIVE_BUFFER_REQUEST is asserted\n         0=Disable the interrupt."
                         mask="0x4000"/>
            </register>
            <register name="BUF_CNT_TRIG"
                      offset="0x1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="QMSPI Buffer Count Trigger Register">
               <bitfield name="TX_BUF_TRIG"
                         caption="An interrupt is triggered if the TRANSMIT_BUFFER_COUNT field is less than or equal to this value. A value of 0 disables the interrupt."
                         mask="0xFFFF"/>
               <bitfield name="RX_BUF_TRIG"
                         caption="An interrupt is triggered if the RECEIVE_BUFFER_COUNT field is greater than or equal to this value. A value of 0 disables the interrupt."
                         mask="0xFFFF0000"/>
            </register>
            <register name="TX_FIFO_u32"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="QMSPI Transmit Buffer Register">
               <bitfield name="TX_BUF"
                         caption="Writes to this register store data to be transmitted from the SPI Master to the external SPI Slave.\n              Writes to this block will be written to the Transmit FIFO. A 1 Byte write fills 1 byte of the FIFO. A Word write fills 2 Bytes and a Doubleword write fills 4 bytes.\n         The data must always be aligned to the bottom most byte (so 1 byte write is on bits [7:0] and Word write is on [15:0]).\n         An overflow condition, TRANSMIT_BUFFER_ERROR, if a write to a full FIFO occurs.\n       Write accesses to this register increment the TRANSMIT_BUFFER_COUNT field."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="TX_FIFO_u16"
                      offset="0x20"
                      rw="RW"
                      size="2"
                      access-size="2"
                      count="2"
                      initval="0x00000000"
                      caption="QMSPI Transmit Buffer Register">
               <bitfield name="TX_BUF"
                         caption="Writes to this register store data to be transmitted from the SPI Master to the external SPI Slave.\n              Writes to this block will be written to the Transmit FIFO. A 1 Byte write fills 1 byte of the FIFO. A Word write fills 2 Bytes and a Doubleword write fills 4 bytes.\n         The data must always be aligned to the bottom most byte (so 1 byte write is on bits [7:0] and Word write is on [15:0]).\n         An overflow condition, TRANSMIT_BUFFER_ERROR, if a write to a full FIFO occurs.\n       Write accesses to this register increment the TRANSMIT_BUFFER_COUNT field."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="TX_FIFO_u08"
                      offset="0x20"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="4"
                      initval="0x00000000"
                      caption="QMSPI Transmit Buffer Register">
               <bitfield name="TX_BUF"
                         caption="Writes to this register store data to be transmitted from the SPI Master to the external SPI Slave.\n              Writes to this block will be written to the Transmit FIFO. A 1 Byte write fills 1 byte of the FIFO. A Word write fills 2 Bytes and a Doubleword write fills 4 bytes.\n         The data must always be aligned to the bottom most byte (so 1 byte write is on bits [7:0] and Word write is on [15:0]).\n         An overflow condition, TRANSMIT_BUFFER_ERROR, if a write to a full FIFO occurs.\n       Write accesses to this register increment the TRANSMIT_BUFFER_COUNT field."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="RX_FIFO_u32"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="QMSPI Receive Buffer Register">
               <bitfield name="RX_BUF"
                         caption="Buffer that stores data from the external SPI Slave device to the SPI Master (this block), which is received over MISO or IO.\n        Reads from this register will empty the Rx FIFO. A 1 Byte read will have valid data on bits [7:0] and a Word read will have data on bits [15:0].\n                 It is possible to request more data than the FIFO has (underflow condition), but this will cause an error (Rx Buffer Error).\n             Read accesses to this register decrement the RECEIVE_BUFFER_COUNT field."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="RX_FIFO_u16"
                      offset="0x24"
                      rw="RW"
                      size="2"
                      access-size="2"
                      count="2"
                      initval="0x00000000"
                      caption="QMSPI Receive Buffer Register">
               <bitfield name="RX_BUF"
                         caption="Buffer that stores data from the external SPI Slave device to the SPI Master (this block), which is received over MISO or IO.\n        Reads from this register will empty the Rx FIFO. A 1 Byte read will have valid data on bits [7:0] and a Word read will have data on bits [15:0].\n                 It is possible to request more data than the FIFO has (underflow condition), but this will cause an error (Rx Buffer Error).\n             Read accesses to this register decrement the RECEIVE_BUFFER_COUNT field."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="RX_FIFO_u08"
                      offset="0x24"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="4"
                      initval="0x00000000"
                      caption="QMSPI Receive Buffer Register">
               <bitfield name="RX_BUF"
                         caption="Buffer that stores data from the external SPI Slave device to the SPI Master (this block), which is received over MISO or IO.\n        Reads from this register will empty the Rx FIFO. A 1 Byte read will have valid data on bits [7:0] and a Word read will have data on bits [15:0].\n                 It is possible to request more data than the FIFO has (underflow condition), but this will cause an error (Rx Buffer Error).\n             Read accesses to this register decrement the RECEIVE_BUFFER_COUNT field."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="DESCR"
                      offset="0x30"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="5"
                      initval="0x00000200"
                      caption="QMSPI Description Buffer Register">
               <bitfield name="INFACE_MOD"
                         caption="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE \n       or RX_TRANSFER_ENABLE must be 0.3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."
                         mask="0x3"/>
               <bitfield name="TX_TRANS_EN"
                         caption="This field bit selects the transmit function of the SPI interface.\n          3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n            2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n          1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."
                         mask="0xC"/>
               <bitfield name="TX_DMA_EN"
                         caption="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n               reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                  3=DMA is enabled and set to 4 Bytes                    0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware."
                         mask="0x30"/>
               <bitfield name="RX_TRANS_EN"
                         caption="This bit enables the receive function of the SPI interface.\n           1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled."
                         mask="0x40"/>
               <bitfield name="RX_DMA_EN"
                         caption="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO \n       until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n          2=DMA is enabled and set to 2 Bytes\n          3=DMA is enabled and set to 4 Bytes\n           0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware."
                         mask="0x180"/>
               <bitfield name="CLOSE_TRANS_EN"
                         caption="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n          1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n                0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active"
                         mask="0x200"/>
               <bitfield name="TRANS_LEN_BITS"
                         caption="1=TRANSFER_LENGTH defined in bits\n             0=TRANSFER_LENGTH defined in bytes"
                         mask="0x400"/>
               <bitfield name="DESCR_BUF_LAST"
                         caption="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer \n       completes the TRANSFER_ COMPLETE status will be set to 1. If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer \n       will be activated, and no additional status will be asserted."
                         mask="0x800"/>
               <bitfield name="DESCR_BUF_NXT_PTR"
                         caption="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. \n       This can point to the current buffer, creating an infinite loop."
                         mask="0xF000"/>
               <bitfield name="TX_LEN"
                         caption="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TX_LEN_BITS. \n       A value of 0 means an infinite length transfer."
                         mask="0xFFFF0000"/>
            </register>
         </register-group>
      </module>
      <module name="TFDP"
              id="68"
              version="1.0"
              caption="The TFDP serially transmits Embedded Controller (EC)-originated \n         diagnostic vectors to an external debug trace system.">
         <register-group name="TFDP"
                         caption="The TFDP serially transmits Embedded Controller (EC)-originated \n        diagnostic vectors to an external debug trace system.">
            <register name="MSDATA"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Debug data to be shifted out on the TFDP Debug port.\n       While data is being shifted out, the Host Interface will 'hold-off' additional writes to the data register until the transfer is complete.">
        </register>
            <register name="CTRL"
                      offset="0x4"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x00"
                      caption="Debug Control Register">
               <bitfield name="EN"
                         caption="Enable. 1=Clock enabled, 0=Clock is disabled (Default)"
                         mask="0x1"/>
               <bitfield name="EDGE_SEL"
                         caption="1= Data is shifted out on the falling edge of the debug clock, 0= Data is shifted out on the rising edge of the debug clock (Default)"
                         mask="0x2"/>
               <bitfield name="DIVSEL" caption="Clock Divider Select." mask="0xC"/>
               <bitfield name="IP_DLY"
                         caption="Inter-packet Delay. The delay is in terms of TFDP Debug output clocks."
                         mask="0x70"/>
            </register>
         </register-group>
      </module>
      <module name="VCI"
              id="75"
              version="1.0"
              caption="The VBAT-Powered Control Interface has VBAT-powered combinational logic and input and output signal pins.\n       The block interfaces with the RTC With Date and DST Adjustment as well as the Week Alarm.">
         <register-group name="VCI"
                         caption="The VBAT-Powered Control Interface has VBAT-powered combinational logic and input and output signal pins.\n       The block interfaces with the RTC With Date and DST Adjustment as well as the Week Alarm.">
            <register name="VCI_CTRL_STS"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="VCI Register">
               <bitfield name="VCI_IN"
                         caption="These bits provide the latched state of the associated VCI_IN# pin, if latching is enabled or the current state of the pin\n          if latching is not enabled. In both cases, the value is determined after the action of the VCI Polarity Register.\n          Note: The VCI_IN[6:0]# bits default to the state of their respective input pins."
                         mask="0x7F"/>
               <bitfield name="VCI_OVRD_IN"
                         caption="This bit provides the current status of the VCI_OVRD_IN pin.\n                   Note: The VCI_OVRD_IN bit defaults to the state of the respective input pin."
                         mask="0x100"/>
               <bitfield name="VCI_OUT"
                         caption="This bit provides the current status of the VCI_OUT pin."
                         mask="0x200"/>
               <bitfield name="VCI_FW_CTRL"
                         caption="This bit can allow EC firmware to control the state of the VCI_OUT pin. For example, when VTR_PWRGD is asserted and the\n          FW_EXT bit is 1, clearing the VCI_FW_CNTRL bit de-asserts the active high VCI_OUT pin. BIOS must set this bit to 1 prior to setting\n                the FW_EXT bit to 1 on power up, in order to avoid glitches on the VCI_OUT pin."
                         mask="0x400"/>
               <bitfield name="FW_EXT"
                         caption="This bit controls selecting between the external VBAT-Powered Control Interface inputs, or the VCI_FW_CNTRL bit output to control the VCI_OUT pin.\n        1=VCI_OUT is determined by the VCI_FW_CNTRL field, when VTR is active\n                   0=VCI_OUT is determined by the external inputs.\n               Note: This bit used to be called GPO/nEXT. The name was changed to distinguish it from the BGPOs, which are elsewhere, and to remove a / in a bit name."
                         mask="0x800"/>
               <bitfield name="FLTRS_BYPASS"
                         caption="The Filters Bypass bit is used to enable and disable the input filters on the VCI_IN# pins.\n         1=Filters disabled; 0=Filters enabled (default)."
                         mask="0x1000"/>
               <bitfield name="WK_ALRM"
                         caption="If enabled by WK_ALRM_LE, this bit is set to 1 if the Week Alarm signal is asserted. It is reset by writes to WK_ALRM_LS."
                         mask="0x10000"/>
               <bitfield name="RTC_ALRM"
                         caption="If enabled by RTC_ALRM_LE, this bit is set to 1 if the RTC Alarm signal is asserted. It is reset by writes to RTC_ALRM_LS."
                         mask="0x20000"/>
            </register>
            <register name="LATCH_EN"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000030"
                      caption="Latch Enable Register">
               <bitfield name="LE"
                         caption="Latching Enables. Latching occurs after the Polarity configuration, so a VCI_INi# pin is asserted when it is '0' if VCI_IN_POL is '0',\n       and asserted when it is '1' if VCI_IN_POL is '1'. For each bit in the field: \n          1=Enabled. Assertions of the VCI_INi# pin are held until the latch is reset by writing the corresponding LS bit\n          0=Not Enabled. The VCI_INi# signal is not latched but passed directly to the VCI_OUT logic"
                         mask="0x7F"/>
               <bitfield name="WK_ALRM_LE"
                         caption="Latch enable for the Week Alarm Power-Up signal.\n          1=Enabled. Assertions of the Week Alarm are held until the latch is reset by writing the corresponding LS bit\n        0=Not Enabled. The Week Alarm signal is not latched but passed directly to the VCI_OUT logic"
                         mask="0x10000"/>
               <bitfield name="RTC_ALRM_LE"
                         caption="Latch enable for the RTC Power-Up signal.\n             1=Enabled. Assertions of the RTC Alarm are held until the latch is reset by writing the corresponding LS bit\n           0=Not Enabled. The RTC Alarm signal is not latched but passed directly to the VCI_OUT logic"
                         mask="0x20000"/>
            </register>
            <register name="LATCH_RST"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Latch Resets Register">
               <bitfield name="LS"
                         caption="Latch Resets. When a Latch Resets bit is written with a '1', the corresponding VCI_INi# latch is de-asserted ('1'). The VCI_INi#\n         input to the latch has priority over the Latch Reset input, so firmware cannot reset the latch while the VCI_INi# pin is asserted. Firmware\n                 should sample the state of the pin in the VCI Register before attempting to reset the latch. As noted in the Latch Enable Register,\n                 the assertion level is determined by the VCI_IN_POL bit. Reads of this register are undefined."
                         mask="0x7F"/>
               <bitfield name="WK_ALRM_LS"
                         caption="Week Alarm Latch Reset. When this bit is written with a '1', the Week Alarm Event latch is reset.\n          The Week Alarm input to the latch has priority over the Reset input Reads of this register are undefined."
                         mask="0x10000"/>
               <bitfield name="RTC_ALRM_LS"
                         caption="RTC Alarm Latch Reset. When this bit is written with a '1', the RTC Alarm Event latch is reset.\n           The RTC Alarm input to the latch has priority over the Reset input Reads of this register are undefined."
                         mask="0x20000"/>
            </register>
            <register name="INPUT_EN"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000000F"
                      caption="VCI Input Enable Register">
               <bitfield name="IE"
                         caption="Input Enables for VCI_IN# signals. After changing the input enable for a VCI input, firmware should reset the input latch and clear\n         any potential interrupt that may have been triggered by the input, as changing the enable may cause the internal status to change.\n                For each bit in the field:\n             1=Enabled. The corresponding VCI_IN# input is not gated and toggling the pin will affect the VCI_OUT pin\n        0=Not Enabled. the corresponding VCI_IN# input does not affect the VCI_OUT pin, even if the input is '0'. Unless the corresponding bit\n            in the VCI Buffer Enable Register is 1, latches are not asserted, even if the VCI_IN# pin is low, during a VBAT power transition"
                         mask="0x7F"/>
            </register>
            <register name="HLDOFF_CNT"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Holdoff Count Register">
               <bitfield name="TIME"
                         caption="These bits determine the period of time the VCI_OUT logic is inhibited from re-asserting VCI_OUT after a SYS_SHDN# event.\n        FFh-01h=The Power On Inhibit Holdoff Time is set to a period between 125ms and 31.875 seconds.\n             0=The Power On Inhibit function is disabled."
                         mask="0xFF"/>
            </register>
            <register name="POLARITY"
                      offset="0x14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="VCI Polarity Register">
               <bitfield name="VCI_IN"
                         caption="These bits determine the polarity of the VCI_IN input signals: For each bit in the field:\n          1=Active High. The value on the pins is inverted before use\n                0=Active Low (default)."
                         mask="0x7F"/>
            </register>
            <register name="PEDGE_DET"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="VCI Posedge Detect Register">
               <bitfield name="VCI_IN"
                         caption="These bits record a low to high transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n          1=Positive Edge Detected; 0=No edge detected."
                         mask="0x7F"/>
            </register>
            <register name="NEDGE_DET"
                      offset="0x1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="VCI Negedge Detect Register">
               <bitfield name="VCI_IN"
                         caption="These bits record a high to low transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n       1=Negative Edge Detected; 0=No edge detected."
                         mask="0x7F"/>
            </register>
            <register name="BUFFER_EN"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="VCI Buffer Enable Register">
               <bitfield name="V_BUF"
                         caption="Input Buffer enable. After changing the buffer enable for a VCI input, firmware should reset the input latch and clear any\n       potential interrupt that may have been triggered by the input, as changing the buffer may cause the internal status to change. This register\n           has no effect when VTR is powered. When VTR is on, the input buffers are enabled only by the IE bit. For each bit in the field:\n                1=VCI_IN# input buffer enabled independent of the IE bit. The edge detection latches for this input are always enabled\n              0=VCI_IN# input buffer enabled by the IE bit. The edge detection latches are only enabled when the IE bit is 1 (default)."
                         mask="0x7F"/>
            </register>
         </register-group>
      </module>
      <module name="VBAT_RAM"
              id="93"
              version="1.0"
              caption="The VBAT Powered RAM provides a 128 Byte Random Accessed Memory that is operational while the main \n        power rail is operational, and will retain its values powered by battery power while the main rail is unpowered.">
         <register-group name="VBAT_RAM"
                         caption="The VBAT Powered RAM provides a 128 Byte Random Accessed Memory that is operational while the main \n       power rail is operational, and will retain its values powered by battery power while the main rail is unpowered.">
            <register name="MEM_u32"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="32"
                      initval="0x00000000"
                      caption="32-bits of VBAT powered RAM.">
        </register>
         </register-group>
      </module>
      <module name="VBAT"
              id="94"
              version="1.0"
              caption="The VBAT Register Bank block is a block implemented for aggregating miscellaneous\n         battery-backed registers required the host and by the Embedded Controller (EC) Subsystem that are\n       not unique to a block implemented in the EC subsystem.">
         <register-group name="VBAT"
                         caption="The VBAT Register Bank block is a block implemented for aggregating miscellaneous\n      battery-backed registers required the host and by the Embedded Controller (EC) Subsystem that are\n             not unique to a block implemented in the EC subsystem.">
            <register name="PFRS"
                      offset="0x0"
                      rw="RW"
                      size="1"
                      access-size="1"
                      initval="0x80"
                      caption="The Power-Fail and Reset Status Register collects and retains \n       the VBAT RST and WDT event status when VCC1 is unpowered.">
               <bitfield name="SOFT"
                         caption="This bit is set to '1b' if a was triggered by an assertion of the SOFT_SYS_RESET bit in the System Reset Register.\n            This bit is cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)"
                         mask="0x4"/>
               <bitfield name="TEST" caption="Test" mask="0x8"/>
               <bitfield name="RSTI"
                         caption="This bit is set to '1b' if a RESET_SYS was triggered by a low signal on the RSTI# input pin. This bit is\n             cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)"
                         mask="0x10"/>
               <bitfield name="WDT_EVT"
                         caption="This bit is set to '1b' if a RESET_SYS was triggered by a Watchdog Timer event. This bit is cleared to '0b' when\n            written with a '1b'; writes of a '0b' have no effect. (R/WC)"
                         mask="0x20"/>
               <bitfield name="SYS_RSTREQ"
                         caption="This bit is set to '1b' if a RESET_SYS was triggered by an ARM SYS_RSTREQ event. This bit is cleared to '0b' when\n         written with a '1b'; writes of a '0b' have no effect. (R/WC)"
                         mask="0x40"/>
               <bitfield name="VBAT_RST"
                         caption="The VBAT RST bit is set to '1' by hardware when a RESET_VBAT is detected. This is the register default value.\n          To clear VBAT RST EC firmware must write a '1' to this bit; writing a '0' to VBAT RST has no affect.(R/WC)"
                         mask="0x80"/>
            </register>
            <register name="CLK32_EN"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="CLOCK ENABLE">
               <bitfield name="C32K_SUPPRESS"
                         caption="1=32KHz clock domain is off while VTR is off (i.e., while on VBAT only). The 32KHz domain is always on\n          while VTR is on, so the PLL always has a reference.\n         0=32KHz clock domain is enabled while VTR is off (i.e., while on VBAT only). The clock source for the 32KHz domain is\n         determined by the other bits in this register"
                         mask="0x1"/>
               <bitfield name="EXT_32K"
                         caption="This bit selects the source for the 32KHz clock domain.\n             1=The 32KHZ_IN VTR-powered pin is used as a source for the 32KHz clock domain. If an activity detector does not detect a\n           clock on the selected source, the always-on 32KHz internal clock source is automatically selected\n                0=The always-on32Khz clock source is used as the source for the 32KHz clock domain."
                         mask="0x2"/>
               <bitfield name="C32KHZ_SRC"
                         caption="This field determines the source for the always-on 32KHz internal clock source. If set to '1b', this bit\n       will only take effect if an active clock has been detected on the crystal pins. Once the 32KHz source has been switched,\n          activity detection on the crystal no longer functions. Therefore, if the crystal oscillator uses a single-ended\n                 input, once started that input must not stop while this bit is '1b'.\n                  1=Crystal Oscillator. The selection between a singled-ended input or a resonant crystal is determined by XOSEL in this register\n         0=Silicon Oscillator."
                         mask="0x4"/>
               <bitfield name="XOSEL"
                         caption="This bit selects between a single-ended clock source for the crystal oscillator or an external parallel crystal.\n             1= the Crystal Oscillator is driven by a single-ended 32KHz clock source connected to the XTAL2 pin. \n                 0= the Crystal Oscillator requires a 32KHz parallel resonant crystal connected between the XTAL1 and XTAL2 pins (default)."
                         mask="0x8"/>
            </register>
            <register name="MCNT_LO"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="MONOTONIC COUNTER">
               <bitfield name="MON_CNT"
                         caption="Read-only register that increments by 1 every time it is read. It is reset to 0 on a VBAT Power On Reset."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="MCNT_HI"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="COUNTER HIWORD">
               <bitfield name="CNT_HWRD"
                         caption="Thirty-two bit read/write register. If software sets this register to an incrementing value, based on an external\n         non-volatile store, this register may be combined with the Monotonic Counter Register to form a 64-bit monotonic counter."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="VWR_BCKP"
                      offset="0x28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="VWR_BCKP">
               <bitfield name="M2S_2H_BACKUP"
                         caption="The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n        that corresponds to Virtual Wire Index 2h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n               edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic."
                         mask="0xF"/>
               <bitfield name="M2S_42H_BACKUP"
                         caption="The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n        that corresponds to Virtual Wire Index 42h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n                  edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic."
                         mask="0xF0"/>
            </register>
         </register-group>
      </module>
      <module name="EC_REG_BANK"
              id="95"
              version="1.0"
              caption="This block is designed to be accessed internally by the EC via the register interface.">
         <register-group name="EC_REG_BANK"
                         caption="This block is designed to be accessed internally by the EC via the register interface.">
            <register name="AHB_ERR_ADDR"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="AHB Error Address [0:0] AHB_ERR_ADDR, In priority order:\n        1. AHB address is registered when an AHB error occurs on the processor's AHB master port and the register value was\n          already 0. This way only the first address to generate an exception is captured.\n         2. The processor can clear this register by writing any 32-bit value to this register.">
        </register>
            <register name="AHB_ERR_CTRL"
                      offset="0x14"
                      rw="RW"
                      size="1"
                      access-size="4"
                      initval="0x00"
                      caption="AHB Error Control [0:0] AHB_ERROR_DISABLE,\n       0: EC memory exceptions are enabled. 1: EC memory exceptions are disabled.">
        </register>
            <register name="INTR_CTRL"
                      offset="0x18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000001"
                      caption="Interrupt Control [0:0] NVIC_EN (NVIC_EN) \n       This bit enables Alternate NVIC IRQ's Vectors. The Alternate NVIC Vectors provides each interrupt event with a dedicated (direct) NVIC vector.\n         0 = Alternate NVIC vectors disabled, 1= Alternate NVIC vectors enabled">
        </register>
            <register name="ETM_CTRL"
                      offset="0x1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="ETM TRACE Enable [0:0] TRACE_EN (TRACE_EN) \n       This bit enables the ARM TRACE debug port (ETM/ITM). The Trace Debug Interface pins are forced to the TRACE functions.\n       0 = ARM TRACE port disabled, 1= ARM TRACE port enabled">
        </register>
            <register name="DEBUG_CTRL"
                      offset="0x20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="Debug Enable Register">
               <bitfield name="EN"
                         caption="EN (JTAG_EN) This bit enables the JTAG/SWD debug port.\n           0= JTAG/SWD port disabled. JTAG/SWD cannot be enabled (i.e., the TRST# pin is ignored and the JTAG signals remain in their non-JTAG state)\n        1= JTAG/SWD port enabled. A high on TRST# enables JTAG or SWD, as determined by SWD_EN."
                         mask="0x1"/>
               <bitfield name="PIN_CFG"
                         caption="This field determines which pins are affected by the TRST# debug enable pin.3=Reserved\n           2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins\n           associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial\n          Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required\n                1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin\n           associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug\n             (SWD) and Serial Wire Viewer (SWV) are both required for debugging\n          0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.\n         This setting should be used when the JTAG TAP controller is required for debugging."
                         mask="0x6"
                         values="EC_REG_BANK_DEBUG_CTRL__PIN_CFG"/>
               <bitfield name="PU_EN"
                         caption="If this bit is set to '1b' internal pull-up resistors are automatically enabled on the appropriate debugging port\n         wires whenever the debug port is enabled (the DEBUG_EN bit in this register is '1b' and the JTAG_RST# pin is high). The setting\n              of DEBUG_PIN_CFG determines which pins have pull-ups enabled when the debug port is enabled."
                         mask="0x8"/>
            </register>
            <register name="OTP_LOCK"
                      offset="0x24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="OTP Lock">
               <bitfield name="TEST" caption="Test" mask="0x1"/>
               <bitfield name="MCHIP_LOCK"
                         caption="This bit controls access to Microchip region of the eFuse memory, bytes 32 to 127. Once written, this bit becomes Read Only.\n          If the JTAG_EN bit is 1 (enabled), the Private Key is inaccessible, independent of the state of this bit.\n             1=The Microchip region is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The Microchip region is accessible."
                         mask="0x2"/>
               <bitfield name="PRIV_KEY_LOCK"
                         caption="This bit controls access to Private Key region of the eFuse memory, bytes 0 to 31. Once written, this bit becomes Read Only.\n        If the JTAG_EN bit is 1 (enabled), the Private Key is inaccessible, independent of the state of this bit.\n           1=The Private Key is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The Private Key is accessible."
                         mask="0x4"/>
               <bitfield name="USER_OTP_LOCK"
                         caption="This bit controls access to the User region of the eFuse memory, bytes 192 to 511. Once written, this bit becomes Read Only.\n           If the JTAG_EN bit is 1 (enabled), the User region is inaccessible, independent of the state of this bit.\n          1=The User region is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The User region is accessible"
                         mask="0x8"/>
               <bitfield name="PUB_KEY_LOCK"
                         caption="This bit controls access to the Public Key region of the eFuse memory, bytes 128 to 191. Once written, this bit becomes Read Only.\n          If the JTAG_EN bit is 1 (enabled), the Public Key is inaccessible, independent of the state of this bit.\n            1=The Public Key is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The Public Key is accessible"
                         mask="0x10"/>
            </register>
            <register name="WDT_CNT"
                      offset="0x28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="WDT Event Count [3:0] WDT_COUNT (WDT_COUNT) These EC R/W bits are cleared to 0 on VCC1 POR,\n       but not on a WDT Note: This field is written by Boot ROM firmware to indicate the number of times a WDT fired before loading a good EC code image.">
        </register>
            <register name="AESH_BSWAP_CTRL"
                      offset="0x2C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="AES HASH Byte Swap Control Register.">
               <bitfield name="IP_BYTE_SWAP_EN"
                         caption="Used to enable byte swap on a DWORD during AHB read from AES / HASH block: 1=Enable; 0=Disable."
                         mask="0x1"/>
               <bitfield name="OP_BYTE_SWAP_EN"
                         caption="Used to enable byte swap on a DWORD during AHB write from AES / HASH block: 1=Enable; 0=Disable."
                         mask="0x2"/>
               <bitfield name="IP_BLK_SWAP_EN"
                         caption="Used to enable word swap on a DWORD during AHB read from AES / HASH block\n              4=Swap 32-bit doublewords in 128-byte blocks\n            3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...\n              2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...\n          1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n           0=Disable."
                         mask="0x1C"
                         values="EC_REG_BANK_AESH_BSWAP_CTRL__IP_BLK_SWAP_EN"/>
               <bitfield name="OP_BLK_SWAP_EN"
                         caption="Used to enable word swap on a DWORD during AHB write from AES / HASH block\n           4=Swap 32-bit doublewords in 128-byte blocks\n                  3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n              0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...\n               2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...\n         1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n            0=Disable."
                         mask="0xE0"
                         values="EC_REG_BANK_AESH_BSWAP_CTRL__OP_BLK_SWAP_EN"/>
            </register>
            <register name="SYS_SHUTDWN_RST"
                      offset="0x38"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="AES HASH Byte Swap Control Register.">
               <bitfield name="SYS_SHDN_RST"
                         caption="When this bit is asserted 1, the SYS_SHDN# output is deasserted"
                         mask="0x1"/>
            </register>
            <register name="PECI_DIS"
                      offset="0x40"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="PECI Disable">
               <bitfield name="PECI_DISABLE"
                         caption="When this bit is asserted 1, it disables the PECI pads to reduce leakage."
                         mask="0x1"/>
            </register>
            <register name="CRYPTO_SRST"
                      offset="0x5C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      atomic-op="set:CRYPTO_SRST"
                      initval="0x00000000"
                      caption="System Shutdown Reset">
               <bitfield name="RNG_SFT_RST"
                         caption="When this bit is asserted 1, the Random Number Generator block is reset."
                         mask="0x1"/>
               <bitfield name="PUB_KEY_SFT_RST"
                         caption="When this bit is asserted 1, the Public Key block is reset."
                         mask="0x2"/>
               <bitfield name="AES_HASH_SFT_RST"
                         caption="When this bit is asserted 1, the AES and Hash blocks are reset."
                         mask="0x4"/>
            </register>
            <register name="GPIO_BANK_PWR"
                      offset="0x64"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="GPIO Bank Power Register">
               <bitfield name="VTR_LVL1"
                         caption="Voltage value on VTR1. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n               It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n          1=VTR1 is powered by 3.3V\n               0=VTR1 is powered by 1.8V."
                         mask="0x1"/>
               <bitfield name="VTR_LVL2"
                         caption="Voltage value on VTR2. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n        It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n       1=VTR2 is powered by 3.3V\n                0=VTR2 is powered by 1.8V."
                         mask="0x2"/>
               <bitfield name="VTR_LVL3"
                         caption="Voltage value on VTR3. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n           It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n              1=VTR3 is powered by 3.3V\n                 0=VTR3 is powered by 1.8V."
                         mask="0x4"/>
               <bitfield name="GPIO_BANK_PWR_LOCK"
                         caption="GPIO Bank Power Lock. 0: VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are R/W\n        1 = VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are Read Only."
                         mask="0x80"/>
            </register>
            <register name="JTAG_MCFG"
                      offset="0x70"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000003"
                      caption="JTAG Master Configuration Register">
               <bitfield name="JTM_CLK"
                         caption="This field determines the JTAG Master clock rate, derived from the 48MHz master clock.\n                7=375KHz; 6=750KHz; 5=1.5Mhz; 4=3Mhz; 3=6Mhz; 2=12Mhz; 1=24MHz; 0=Reserved."
                         mask="0x7"
                         values="EC_REG_BANK_JTAG_MCFG__JTM_CLK"/>
               <bitfield name="MAS_SLV"
                         caption="This bit controls the direction of the JTAG port. 1=The JTAG Port is configured as a Master\n          0=The JTAG Port is configures as a Slave."
                         mask="0x8"/>
            </register>
            <register name="JTAG_MSTS"
                      offset="0x74"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="JTAG Master Status Register">
               <bitfield name="JTM_DONE"
                         caption="This bit is set to '1b' when the JTAG Master Command Register is written. It becomes '0b' when shifting has completed.\n         Software can poll this bit to determine when a command has completed and it is therefore safe to remove the data in the JTAG Master TDO\n        Register and load new data into the JTAG Master TMS Register and the JTAG Master TDI Register."
                         mask="0x1"/>
            </register>
            <register name="JTAG_MTDO"
                      offset="0x78"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="JTAG Master TDO Register">
               <bitfield name="JTM_TDO"
                         caption="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted into this register, starting with bit 0,\n        from the JTAG_TDO pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="JTAG_MTDI"
                      offset="0x7C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="JTAG Master TDI Register">
               <bitfield name="JTM_TDI"
                         caption="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n       onto the JTAG_TDI pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="JTAG_MTMS"
                      offset="0x80"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="JTAG Master TMS Register">
               <bitfield name="JTM_TMS"
                         caption="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n         onto the JTAG_TMS pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register."
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="JTAG_MCMD"
                      offset="0x84"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="JTAG Master Command Register">
               <bitfield name="JTM_COUNT"
                         caption="If the JTAG Port is configured as a Master, writing this register starts clocking and shifting on the JTAG port. The JTAG\n         Master port will shift JTM_COUNT+1 times, so writing a '0h' will shift 1 bit, and writing '31h' will shift 32 bits. The signal JTAG_CLK\n             will cycle JTM_COUNT+1 times. The contents of the JTAG Master TMS Register and the JTAG Master TDI Register will be shifted out on\n         the falling edge of JTAG_CLK and the.JTAG Master TDO Register will get shifted in on the rising edge of JTAG_CLK.\n                 If the JTAG Port is configured as a Slave, writing this register has no effect."
                         mask="0x1F"/>
            </register>
         </register-group>
         <value-group caption="" name="EC_REG_BANK_DEBUG_CTRL__PIN_CFG">
            <value caption="2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins\n           associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial\n          Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required "
                   name="JTAG_TCK_TMS"
                   value="0x2"/>
            <value caption="1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin\n           associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug\n             (SWD) and Serial Wire Viewer (SWV) are both required for debugging"
                   name="JTAG_TCK_TMS_TDO"
                   value="0x1"/>
            <value caption="0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.\n         This setting should be used when the JTAG TAP controller is required for debugging."
                   name="JTAG_TCK_TMS_TDO_TDI"
                   value="0x0"/>
         </value-group>
         <value-group caption="" name="EC_REG_BANK_AESH_BSWAP_CTRL__IP_BLK_SWAP_EN">
            <value caption="4=Swap 32-bit doublewords in 128-byte blocks "
                   name="SWAP_128_BYTE_BLOCK"
                   value="0x4"/>
            <value caption="3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,..."
                   name="SWAP_64_BYTE_BLOCK"
                   value="0x3"/>
            <value caption="2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,..."
                   name="SWAP_16_BYTE_BLOCK"
                   value="0x2"/>
            <value caption="1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n"
                   name="SWAP_8_BYTE_BLOCK"
                   value="0x1"/>
            <value caption="0=Disable." name="DIS" value="0x0"/>
         </value-group>
         <value-group caption="" name="EC_REG_BANK_AESH_BSWAP_CTRL__OP_BLK_SWAP_EN">
            <value caption="4=Swap 32-bit doublewords in 128-byte blocks "
                   name="SWAP_128_BYTE_BLOCK"
                   value="0x4"/>
            <value caption="3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,..."
                   name="SWAP_64_BYTE_BLOCK"
                   value="0x3"/>
            <value caption="2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,..."
                   name="SWAP_16_BYTE_BLOCK"
                   value="0x2"/>
            <value caption="1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n"
                   name="SWAP_8_BYTE_BLOCK"
                   value="0x1"/>
            <value caption="0=Disable." name="DIS" value="0x0"/>
         </value-group>
         <value-group caption="" name="EC_REG_BANK_JTAG_MCFG__JTM_CLK">
            <value caption="7=375KHz" name="JTM_CLK_375KHz" value="0x7"/>
            <value caption="6=750KHz" name="JTM_CLK_750KHz" value="0x6"/>
            <value caption="5=1.5Mhz" name="JTM_CLK_1MHz" value="0x5"/>
            <value caption="4=3Mhz" name="JTM_CLK_3Mhz" value="0x4"/>
            <value caption="3=6Mhz" name="JTM_CLK_6Mhz" value="0x3"/>
            <value caption="2=12Mhz" name="JTM_CLK_12Mhz" value="0x2"/>
            <value caption="1=24MHz" name="JTM_CLK_24MHz" value="0x1"/>
         </value-group>
      </module>
      <module name="EFUSE"
              id="96"
              version="1.0"
              caption="The eFUSE block provides a means of programming and accessing the eFUSE bits.">
         <register-group name="EFUSE"
                         caption="The eFUSE block provides a means of programming and accessing the eFUSE bits.">
            <register name="CTRL"
                      offset="0x0"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x00000010"
                      caption="eFUSE CTRL Register">
               <bitfield name="EN"
                         caption="Block enable: 1=block is enabled for operation; 0=block is disabled and in lowest power state."
                         mask="0x1"/>
               <bitfield name="RST"
                         caption="Block reset: 1=Block is reset; 0=Normal operation. This bit self-clears and always reads back 0."
                         mask="0x2"/>
               <bitfield name="EXT_PGM"
                         caption="External programming enable: 1=eFUSE programming is done via external pin interface 0=Manual/Normal mode.\n         eFUSE programming is done via this block's register set."
                         mask="0x4"/>
               <bitfield name="FSOURCE_EN_PRGM"
                         caption="FSOURCE pin enable for programming: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for PROGRAM mode.\n         Only set this bit when FSOURCE_EN_READ bit is already 0 to avoid shorting the power pad to ground;\n                  0=FSOURCE switch logic isolates eFUSE FSOURCE pin from power pad."
                         mask="0x8"/>
               <bitfield name="FSOURCE_EN_READ"
                         caption="FSOURCE pin enable for reading: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for read mode.\n        Only set this bit when FSOURCE_EN_PRGM bit is already 0 to avoid shorting the power pad to ground;\n          0=FSOURCE switch logic isolates eFUSE FSOURCE pin from ground."
                         mask="0x10"/>
            </register>
            <register name="MAN_CTRL"
                      offset="0x4"
                      rw="RW"
                      size="2"
                      access-size="2"
                      initval="0x0000"
                      caption="Manual Control Register">
               <bitfield name="MAN_ENABLE"
                         caption="Manual mode enable bit: 1=Manual mode is enabled and this register interfaces to the eFUSE;\n         0=Normal mode, internal controller interfaces to eFUSE IP. This bit only takes affect when REG_CTRL.EXT_PRGM bit is 0."
                         mask="0x1"/>
               <bitfield name="IP_CS"
                         caption="eFUSE chip select (CS) pin: 1=eFUSE is enabled for PROGRAM/READ modes; 0=eFUSE is disabled and in low power state."
                         mask="0x2"/>
               <bitfield name="IP_PRGM_EN"
                         caption="eFUSE program enable. Can also be considered the write signal: 1=eFUSE is programming; 0=eFUSE is in read mode."
                         mask="0x4"/>
               <bitfield name="IP_PRCHG"
                         caption="eFUSE precharge: 1=outputs are being precharged; 0=outputs are not precharged."
                         mask="0x8"/>
               <bitfield name="IP_SENSE_PULSE"
                         caption="eFUSE sense, outputs are valid on falling edge of this bit."
                         mask="0x10"/>
               <bitfield name="IP_OE"
                         caption="eFUSE output enable. The IP might tri-state at various times, so this bit isolates the outputs to avoid potential crowbar.\n        1=eFUSE outputs enabled for read; 0=eFUSE outputs isolated"
                         mask="0x20"/>
            </register>
            <register name="MAN_MOD_ADDR"
                      offset="0x6"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x0000"
                      caption="MANUAL MODE ADDRESS REGISTER">
               <bitfield name="IP_ADDR_LO"
                         caption="Manual mode address, selecting the bit address within a 1K bit block."
                         mask="0x3FF"/>
               <bitfield name="IP_ADDR_HI"
                         caption="Manual mode address, selecting a 1K bit block of eFuse data"
                         mask="0xC00"/>
            </register>
            <register name="MAN_MOD_DATA"
                      offset="0xC"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000000"
                      caption="MANUAL MODE DATA REGISTER">
               <bitfield name="IP_DATA"
                         caption="Manual mode data: This field connects to the eFUSE data output pins."
                         mask="0xFFFF"/>
            </register>
            <register name="EFUSE_MEM_DW"
                      offset="0x10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="128"
                      initval="0x00000000"
                      caption="512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block.">
        </register>
         </register-group>
      </module>
      <module name="MPU" caption="Memory Protection Unit Registers">
         <register-group name="MPU" caption="Memory Protection Unit">
            <register name="TYPE"
                      offset="0x00000000"
                      size="4"
                      initval="0x00000800"
                      caption="MPU Type Register"
                      rw="R">
               <bitfield name="SEPARATE"
                         mask="0x00000001"
                         caption="Indicates support for unified or separate instruction and date memory maps."/>
               <bitfield name="DREGION"
                         mask="0x0000FF00"
                         caption="Indicates the number of supported MPU instruction regions."/>
               <bitfield name="IREGION"
                         mask="0x00FF0000"
                         caption="Indicates the number of supported MPU data regions."/>
            </register>
            <register name="CTRL"
                      offset="0x00000004"
                      size="4"
                      initval="0x00000000"
                      caption="MPU Control Register"
                      rw="RW">
               <bitfield name="ENABLE" mask="0x00000001" caption="Enables the MPU"/>
               <bitfield name="HFNMIENA"
                         mask="0x00000002"
                         caption="Enables the operation of MPU during hard fault, NMI, and FAULTMASK handlers."/>
               <bitfield name="PRIVDEFENA"
                         mask="0x00000004"
                         caption="Enables privileged software access to the default memory map."/>
            </register>
            <register name="RNR"
                      offset="0x00000008"
                      size="4"
                      initval="0x00000000"
                      caption="MPU Region Number Register"
                      rw="RW">
               <bitfield name="REGION"
                         mask="0x000000FF"
                         caption="Indicates the MPU region referenced by the MPU_RBAR and MPU_RASR registers."/>
            </register>
            <register name="RBAR"
                      offset="0x0000000C"
                      size="4"
                      initval="0x00000000"
                      caption="MPU Region Base Address Register"
                      rw="RW">
               <bitfield name="REGION" mask="0x0000000F" caption="MPU region field."/>
               <bitfield name="VALID"
                         mask="0x00000010"
                         caption="MPU Region Number valid bit."/>
               <bitfield name="ADDR" mask="0xFFFFFFE0" caption="Region base address field."/>
            </register>
            <register name="RASR"
                      offset="0x00000010"
                      size="4"
                      initval="0x00000000"
                      caption="MPU Region Attribute and Size Register"
                      rw="RW">
               <bitfield name="ENABLE" mask="0x00000001" caption="Region enable bit."/>
               <bitfield name="SIZE"
                         mask="0x0000003E"
                         caption="Specifies the size of the MPU protection region."/>
               <bitfield name="SRD" mask="0x0000FF00" caption="Subregion disable bits."/>
               <bitfield name="B"
                         mask="0x00010000"
                         caption="MPU access permission attributes."/>
               <bitfield name="C"
                         mask="0x00020000"
                         caption="MPU access permission attributes."/>
               <bitfield name="S" mask="0x00040000" caption="Shareable bit."/>
               <bitfield name="TEX"
                         mask="0x00380000"
                         caption="MPU access permission attributes."/>
               <bitfield name="AP" mask="0x07000000" caption="Access permission field."/>
               <bitfield name="XN"
                         mask="0x10000000"
                         caption="Instruction access disable bit."/>
            </register>
         </register-group>
      </module>
      <module name="NVIC"
              version="1.0.0"
              caption="Nested Vectored Interrupt Controller">
         <register-group name="NVIC" caption="Nested Vectored Interrupt Controller">
            <register name="ISER"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="1"
                      initval="0"
                      caption="Interrupt Set Enable Register">
               <bitfield name="SETENA" caption="Interrupt set enable bits" mask="0xFFFFFFFF"/>
            </register>
            <register name="ICER"
                      offset="0x80"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="1"
                      initval="0"
                      caption="Interrupt Clear Enable Register">
               <bitfield name="CLRENA"
                         caption="Interrupt clear-enable bits"
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="ISPR"
                      offset="0x100"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="1"
                      initval="0"
                      caption="Interrupt Set Pending Register">
               <bitfield name="SETPEND"
                         caption="Interrupt set-pending bits"
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="ICPR"
                      offset="0x180"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="1"
                      initval="0"
                      caption="Interrupt Clear Pending Register">
               <bitfield name="CLRPEND"
                         caption="Interrupt clear-pending bits"
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="IABR"
                      offset="0x200"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="1"
                      initval="0"
                      caption="Interrupt Active Bit Register">
               <bitfield name="ACTIVE" caption="Interrupt active bits" mask="0xFFFFFFFF"/>
            </register>
            <register name="IP"
                      offset="0x300"
                      rw="RW"
                      size="1"
                      access-size="1"
                      count="8"
                      initval="0"
                      caption="Interrupt Priority Register n">
               <bitfield name="PRI0" caption="Priority of interrupt n" mask="0x7"/>
            </register>
            <register name="STIR"
                      offset="0xE00"
                      rw="W"
                      size="4"
                      access-size="4"
                      caption="Software Trigger Interrupt Register">
               <bitfield name="INTID" caption="Interrupt ID to trigger" mask="0x1FF"/>
            </register>
         </register-group>
      </module>
      <module name="SysTick" version="1.0.0" caption="System timer">
         <register-group name="SysTick" caption="System timer">
            <register name="CSR"
                      offset="0x0"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x4"
                      caption="SysTick Control and Status Register">
               <bitfield name="ENABLE"
                         caption="SysTick Counter Enable"
                         mask="0x1"
                         values="SysTick_CSR__ENABLE"/>
               <bitfield name="TICKINT"
                         caption="SysTick Exception Request Enable"
                         mask="0x2"
                         values="SysTick_CSR__TICKINT"/>
               <bitfield name="CLKSOURCE"
                         caption="Clock Source 0=external, 1=processor"
                         mask="0x4"
                         values="SysTick_CSR__CLKSOURCE"/>
               <bitfield name="COUNTFLAG"
                         caption="Timer counted to 0 since last read of register"
                         mask="0x10000"/>
            </register>
            <register name="RVR"
                      offset="0x4"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="SysTick Reload Value Register">
               <bitfield name="RELOAD"
                         caption="Value to load into the SysTick Current Value Register when the counter reaches 0"
                         mask="0xFFFFFF"/>
            </register>
            <register name="CVR"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="SysTick Current Value Register">
               <bitfield name="CURRENT"
                         caption="Current value at the time the register is accessed"
                         mask="0xFFFFFF"/>
            </register>
            <register name="CALIB"
                      offset="0xC"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0"
                      caption="SysTick Calibration Value Register">
               <bitfield name="TENMS"
                         caption="Reload value to use for 10ms timing"
                         mask="0xFFFFFF"/>
               <bitfield name="SKEW"
                         caption="TENMS is rounded from non-integer ratio"
                         mask="0x40000000"
                         values="SysTick_CALIB__SKEW"/>
               <bitfield name="NOREF"
                         caption="No Separate Reference Clock"
                         mask="0x80000000"
                         values="SysTick_CALIB__NOREF"/>
            </register>
         </register-group>
         <value-group name="SysTick_CSR__CLKSOURCE">
            <value name="VALUE_0" caption="External clock" value="0"/>
            <value name="VALUE_1" caption="Processor clock" value="1"/>
         </value-group>
         <value-group name="SysTick_CSR__ENABLE">
            <value name="VALUE_0" caption="Counter disabled" value="0"/>
            <value name="VALUE_1" caption="Counter enabled" value="1"/>
         </value-group>
         <value-group name="SysTick_CSR__TICKINT">
            <value name="VALUE_0"
                   caption="Counting down to 0 does not assert the SysTick exception request"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Counting down to 0 asserts the SysTick exception request"
                   value="1"/>
         </value-group>
         <value-group name="SysTick_CALIB__NOREF">
            <value name="VALUE_0" caption="The reference clock is provided" value="0"/>
            <value name="VALUE_1"
                   caption="The reference clock is not provided"
                   value="1"/>
         </value-group>
         <value-group name="SysTick_CALIB__SKEW">
            <value name="VALUE_0" caption="10ms calibration value is exact" value="0"/>
            <value name="VALUE_1"
                   caption="10ms calibration value is inexact, because of the clock frequency"
                   value="1"/>
         </value-group>
      </module>
      <module name="SystemControl"
              version="1.0.0"
              caption="System Control Registers">
         <register-group name="SystemControl" caption="System Control Registers">
            <register name="ICTR"
                      offset="0x4"
                      rw="R"
                      size="4"
                      access-size="4"
                      caption="Interrupt Controller Type Register">
               <bitfield name="INTLINESNUM" caption="" mask="0xF"/>
            </register>
            <register name="ACTLR"
                      offset="0x8"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="Auxiliary Control Register">
               <bitfield name="DISMCYCINT"
                         caption="Disable interruption of LDM/STM instructions"
                         mask="0x1"/>
               <bitfield name="DISDEFWBUF"
                         caption="Disable wruite buffer use during default memory map accesses"
                         mask="0x2"/>
               <bitfield name="DISFOLD" caption="Disable IT folding" mask="0x4"/>
               <bitfield name="DISFPCA"
                         caption="Disable automatic update of CONTROL.FPCA"
                         mask="0x100"/>
               <bitfield name="DISOOFP"
                         caption="Disable out-of-order FP instructions"
                         mask="0x200"/>
            </register>
            <register name="CPUID"
                      offset="0xD00"
                      rw="R"
                      size="4"
                      access-size="4"
                      initval="0x410FC240"
                      caption="CPUID Base Register">
               <bitfield name="REVISION" caption="Processor revision number" mask="0xF"/>
               <bitfield name="PARTNO"
                         caption="Process Part Number, 0xC24=Cortex-M4"
                         mask="0xFFF0"/>
               <bitfield name="CONSTANT" caption="Constant" mask="0xF0000"/>
               <bitfield name="VARIANT" caption="Variant number" mask="0xF00000"/>
               <bitfield name="IMPLEMENTER"
                         caption="Implementer code, 0x41=ARM"
                         mask="0xFF000000"/>
            </register>
            <register name="ICSR"
                      offset="0xD04"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0"
                      caption="Interrupt Control and State Register">
               <bitfield name="VECTACTIVE" caption="Active exception number" mask="0x1FF"/>
               <bitfield name="RETTOBASE"
                         caption="No preempted active exceptions to execute"
                         mask="0x800"/>
               <bitfield name="VECTPENDING"
                         caption="Exception number of the highest priority pending enabled exception"
                         mask="0x3F000"/>
               <bitfield name="ISRPENDING" caption="Interrupt pending flag" mask="0x400000"/>
               <bitfield name="ISRPREEMPT" caption="Debug only" mask="0x800000"/>
               <bitfield name="PENDSTCLR"
                         caption="SysTick clear-pending bit"
                         mask="0x2000000"
                         values="SystemControl_ICSR__PENDSTCLR"/>
               <bitfield name="PENDSTSET"
                         caption="SysTick set-pending bit"
                         mask="0x4000000"
                         values="SystemControl_ICSR__PENDSTSET"/>
               <bitfield name="PENDSVCLR"
                         caption="PendSV clear-pending bit"
                         mask="0x8000000"
                         values="SystemControl_ICSR__PENDSVCLR"/>
               <bitfield name="PENDSVSET"
                         caption="PendSV set-pending bit"
                         mask="0x10000000"
                         values="SystemControl_ICSR__PENDSVSET"/>
               <bitfield name="NMIPENDSET"
                         caption="NMI set-pending bit"
                         mask="0x80000000"
                         values="SystemControl_ICSR__NMIPENDSET"/>
            </register>
            <register name="AIRCR"
                      offset="0xD0C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0xFA050000"
                      caption="Application Interrupt and Reset Control Register">
               <bitfield name="VECTRESET" caption="Must write 0" mask="0x1"/>
               <bitfield name="VECTCLRACTIVE" caption="Must write 0" mask="0x2"/>
               <bitfield name="SYSRESETREQ"
                         caption="System Reset Request"
                         mask="0x4"
                         values="SystemControl_AIRCR__SYSRESETREQ"/>
               <bitfield name="PRIGROUP" caption="Interrupt priority grouping" mask="0x700"/>
               <bitfield name="ENDIANNESS"
                         caption="Data endianness, 0=little, 1=big"
                         mask="0x8000"
                         values="SystemControl_AIRCR__ENDIANNESS"/>
               <bitfield name="VECTKEY" caption="Register key" mask="0xFFFF0000"/>
            </register>
            <register name="SCR"
                      offset="0xD10"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0"
                      caption="System Control Register">
               <bitfield name="SLEEPONEXIT"
                         caption="Sleep-on-exit on handler return"
                         mask="0x2"
                         values="SystemControl_SCR__SLEEPONEXIT"/>
               <bitfield name="SLEEPDEEP"
                         caption="Deep Sleep used as low power mode"
                         mask="0x4"
                         values="SystemControl_SCR__SLEEPDEEP"/>
               <bitfield name="SEVONPEND"
                         caption="Send Event on Pending bit"
                         mask="0x10"
                         values="SystemControl_SCR__SEVONPEND"/>
            </register>
            <register name="CCR"
                      offset="0xD14"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0x00000200"
                      caption="Configuration and Control Register">
               <bitfield name="NONBASETHRDENA"
                         caption="Indicates how processor enters Thread mode"
                         mask="0x1"/>
               <bitfield name="USERSETMPEND"
                         caption="Enables unprivileged software access to STIR register"
                         mask="0x2"/>
               <bitfield name="UNALIGN_TRP"
                         caption="Enables unaligned access traps"
                         mask="0x8"
                         values="SystemControl_CCR__UNALIGN_TRP"/>
               <bitfield name="DIV_0_TRP" caption="Enables divide by 0 trap" mask="0x10"/>
               <bitfield name="BFHFNMIGN"
                         caption="Ignore LDM/STM BusFault for -1/-2 priority handlers"
                         mask="0x100"/>
               <bitfield name="STKALIGN"
                         caption="Indicates stack alignment on exception entry"
                         mask="0x200"
                         values="SystemControl_CCR__STKALIGN"/>
            </register>
            <register name="SHPR1"
                      offset="0xD18"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="System Handler Priority Register 1">
               <bitfield name="PRI_4"
                         caption="Priority of system handler 4, MemManage"
                         mask="0xFF"/>
               <bitfield name="PRI_5"
                         caption="Priority of system handler 5, BusFault"
                         mask="0xFF00"/>
               <bitfield name="PRI_6"
                         caption="Priority of system handler 6, UsageFault"
                         mask="0xFF0000"/>
            </register>
            <register name="SHPR2"
                      offset="0xD1C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0"
                      caption="System Handler Priority Register 2">
               <bitfield name="PRI_11"
                         caption="Priority of system handler 11, SVCall"
                         mask="0xFF000000"/>
            </register>
            <register name="SHPR3"
                      offset="0xD20"
                      rw="RW"
                      size="4"
                      access-size="4"
                      initval="0"
                      caption="System Handler Priority Register 3">
               <bitfield name="PRI_14"
                         caption="Priority of system handler 14, PendSV"
                         mask="0xFF0000"/>
               <bitfield name="PRI_15"
                         caption="Priority of system handler 15, SysTick exception"
                         mask="0xFF000000"/>
            </register>
            <register name="SHCSR"
                      offset="0xD24"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="System Handler Control and State Register">
               <bitfield name="MEMFAULTACT"
                         caption="MemManage exception active bit"
                         mask="0x1"/>
               <bitfield name="BUSFAULTACT"
                         caption="BusFault exception active bit"
                         mask="0x2"/>
               <bitfield name="USGFAULTACT"
                         caption="UsageFault exception active bit"
                         mask="0x8"/>
               <bitfield name="SVCALLACT" caption="SVCall active bit" mask="0x80"/>
               <bitfield name="MONITORACT"
                         caption="DebugMonitor exception active bit"
                         mask="0x100"/>
               <bitfield name="PENDSVACT" caption="PendSV exception active bit" mask="0x400"/>
               <bitfield name="SYSTICKACT"
                         caption="SysTick exception active bit"
                         mask="0x800"/>
               <bitfield name="USGFAULTPENDED"
                         caption="UsageFault exception pending bit"
                         mask="0x1000"/>
               <bitfield name="MEMFAULTPENDED"
                         caption="MemManage exception pending bit"
                         mask="0x2000"/>
               <bitfield name="BUSFAULTPENDED"
                         caption="BusFault exception pending bit"
                         mask="0x4000"/>
               <bitfield name="SVCALLPENDED" caption="SVCall pending bit" mask="0x8000"/>
               <bitfield name="MEMFAULTENA" caption="MemManage enable bit" mask="0x10000"/>
               <bitfield name="BUSFAULTENA" caption="BusFault enable bit" mask="0x20000"/>
               <bitfield name="USGFAULTENA" caption="UsageFault enable bit" mask="0x40000"/>
            </register>
            <register name="CFSR"
                      offset="0xD28"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="Configurable Fault Status Register">
               <bitfield name="IACCVIOL" caption="Instruction access violation" mask="0x1"/>
               <bitfield name="DACCVIOL" caption="Data access violation" mask="0x2"/>
               <bitfield name="MUNSTKERR"
                         caption="MemManage Fault on unstacking for exception return"
                         mask="0x8"/>
               <bitfield name="MSTKERR"
                         caption="MemManage Fault on stacking for exception entry"
                         mask="0x10"/>
               <bitfield name="MLSPERR"
                         caption="MemManager Fault occured during FP lazy state preservation"
                         mask="0x20"/>
               <bitfield name="MMARVALID"
                         caption="MemManage Fault Address Register valid"
                         mask="0x80"/>
               <bitfield name="IBUSERR" caption="Instruction bus error" mask="0x100"/>
               <bitfield name="PRECISERR" caption="Precise data bus error" mask="0x200"/>
               <bitfield name="IMPRECISERR" caption="Imprecise data bus error" mask="0x400"/>
               <bitfield name="UNSTKERR"
                         caption="BusFault on unstacking for exception return"
                         mask="0x800"/>
               <bitfield name="STKERR"
                         caption="BusFault on stacking for exception entry"
                         mask="0x1000"/>
               <bitfield name="LSPERR"
                         caption="BusFault occured during FP lazy state preservation"
                         mask="0x2000"/>
               <bitfield name="BFARVALID"
                         caption="BusFault Address Register valid"
                         mask="0x8000"/>
               <bitfield name="UNDEFINSTR"
                         caption="Undefined instruction UsageFault"
                         mask="0x10000"/>
               <bitfield name="INVSTATE" caption="Invalid state UsageFault" mask="0x20000"/>
               <bitfield name="INVPC" caption="Invalid PC load UsageFault" mask="0x40000"/>
               <bitfield name="NOCP" caption="No coprocessor UsageFault" mask="0x80000"/>
               <bitfield name="UNALIGNED"
                         caption="Unaligned access UsageFault"
                         mask="0x1000000"/>
               <bitfield name="DIVBYZERO"
                         caption="Divide by zero UsageFault"
                         mask="0x2000000"/>
            </register>
            <register name="HFSR"
                      offset="0xD2C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="HardFault Status Register">
               <bitfield name="VECTTBL"
                         caption="BusFault on a Vector Table read during exception processing"
                         mask="0x2"/>
               <bitfield name="FORCED" caption="Forced Hard Fault" mask="0x40000000"/>
               <bitfield name="DEBUGEVT" caption="Debug: always write 0" mask="0x80000000"/>
            </register>
            <register name="DFSR"
                      offset="0xD30"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="Debug Fault Status Register">
               <bitfield name="HALTED" caption="" mask="0x1"/>
               <bitfield name="BKPT" caption="" mask="0x2"/>
               <bitfield name="DWTTRAP" caption="" mask="0x4"/>
               <bitfield name="VCATCH" caption="" mask="0x8"/>
               <bitfield name="EXTERNAL" caption="" mask="0x10"/>
            </register>
            <register name="MMFAR"
                      offset="0xD34"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="MemManage Fault Address Register">
               <bitfield name="ADDRESS"
                         caption="Address that generated the MemManage fault"
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="BFAR"
                      offset="0xD38"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="BusFault Address Register">
               <bitfield name="ADDRESS"
                         caption="Address that generated the BusFault"
                         mask="0xFFFFFFFF"/>
            </register>
            <register name="AFSR"
                      offset="0xD3C"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="Auxiliary Fault Status Register">
               <bitfield name="IMPDEF" caption="AUXFAULT input signals" mask="0xFFFFFFFF"/>
            </register>
            <register name="PFR"
                      offset="0xD40"
                      rw="RW"
                      size="4"
                      access-size="4"
                      count="2"
                      caption="Processor Feature Register">
        </register>
            <register name="DFR"
                      offset="0xD48"
                      rw="R"
                      size="4"
                      access-size="4"
                      caption="Debug Feature Register">
        </register>
            <register name="ADR"
                      offset="0xD4C"
                      rw="R"
                      size="4"
                      access-size="4"
                      caption="Auxiliary Feature Register">
        </register>
            <register name="MMFR"
                      offset="0xD50"
                      rw="R"
                      size="4"
                      access-size="4"
                      count="4"
                      caption="Memory Model Feature Register">
        </register>
            <register name="ISAR"
                      offset="0xD60"
                      rw="R"
                      size="4"
                      access-size="4"
                      count="5"
                      caption="Instruction Set Attributes Register">
        </register>
            <register name="CPACR"
                      offset="0xD88"
                      rw="RW"
                      size="4"
                      access-size="4"
                      caption="Coprocessor Access Control Register">
               <bitfield name="CP10"
                         caption="Access privileges for coprocessor 10"
                         mask="0x300000"
                         values="SystemControl_CPACR__CP10"/>
               <bitfield name="CP11"
                         caption="Access privileges for coprocessor 11"
                         mask="0xC00000"
                         values="SystemControl_CPACR__CP11"/>
            </register>
         </register-group>
         <value-group name="SystemControl_ICSR__NMIPENDSET">
            <value name="VALUE_0"
                   caption="Write: no effect; read: NMI exception is not pending"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Write: changes NMI exception state to pending; read: NMI exception is pending"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_ICSR__PENDSTCLR">
            <value name="VALUE_0" caption="No effect" value="0"/>
            <value name="VALUE_1"
                   caption="Removes the pending state from the SysTick exception"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_ICSR__PENDSTSET">
            <value name="VALUE_0"
                   caption="Write: no effect; read: SysTick exception is not pending"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Write: changes SysTick exception state to pending; read: SysTick exception is pending"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_ICSR__PENDSVCLR">
            <value name="VALUE_0" caption="No effect" value="0"/>
            <value name="VALUE_1"
                   caption="Removes the pending state from the PendSV exception"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_ICSR__PENDSVSET">
            <value name="VALUE_0"
                   caption="Write: no effect; read: PendSV exception is not pending"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Write: changes PendSV exception state to pending; read: PendSV exception is pending"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_AIRCR__ENDIANNESS">
            <value name="VALUE_0" caption="Little-endian" value="0"/>
            <value name="VALUE_1" caption="Big-endian" value="1"/>
         </value-group>
         <value-group name="SystemControl_AIRCR__SYSRESETREQ">
            <value name="VALUE_0" caption="No system reset request" value="0"/>
            <value name="VALUE_1"
                   caption="Asserts a signal to the outer system that requests a reset"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_SCR__SEVONPEND">
            <value name="VALUE_0"
                   caption="Only enabled interrupts or events can wakeup the processor, disabled interrupts are excluded"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Enabled events and all interrupts, including disabled interrupts, can wakeup the processor"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_SCR__SLEEPDEEP">
            <value name="VALUE_0" caption="Sleep" value="0"/>
            <value name="VALUE_1" caption="Deep sleep" value="1"/>
         </value-group>
         <value-group name="SystemControl_SCR__SLEEPONEXIT">
            <value name="VALUE_0"
                   caption="Do not sleep when returning to Thread mode"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Enter sleep, or deep sleep, on return from an ISR"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_CCR__STKALIGN">
            <value name="VALUE_0" caption="4-byte aligned" value="0"/>
            <value name="VALUE_1" caption="8-byte aligned" value="1"/>
         </value-group>
         <value-group name="SystemControl_CCR__UNALIGN_TRP">
            <value name="VALUE_0"
                   caption="Do not trap unaligned halfword and word accesses"
                   value="0"/>
            <value name="VALUE_1"
                   caption="Trap unaligned halfword and word accesses"
                   value="1"/>
         </value-group>
         <value-group name="SystemControl_CPACR__CP10">
            <value name="DENIED" caption="Access denied" value="0x0"/>
            <value name="PRIV" caption="Privileged access only" value="0x1"/>
            <value name="FULL" caption="Full access" value="0x3"/>
         </value-group>
         <value-group name="SystemControl_CPACR__CP11">
            <value name="DENIED" caption="Access denied" value="0x0"/>
            <value name="PRIV" caption="Privileged access only" value="0x1"/>
            <value name="FULL" caption="Full access" value="0x3"/>
         </value-group>
      </module>
   </modules>
   <pinouts/>
</avr-tools-device-file>
