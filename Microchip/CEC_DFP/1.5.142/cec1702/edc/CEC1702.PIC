<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<edc:PIC xmlns:atdf="http://crownking/atdf" xmlns:edc="http://crownking/edc" xmlns:ltx="http://crownking/ltx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://crownking/edc edc/PIC.xsd" edc:name="CEC1702" edc:arch="arm32bit" edc:procid="0x0000" atdf:architecture="CORTEX-M4" atdf:family="CEC1702" edc:hasFreeze="false" edc:masksetid="SG003">
  <edc:Properties>
    <edc:Property edc:propkey="factory.programmed.boot.rom" edc:propvalue="true"/>
    <edc:Property edc:propkey="file.registers.are.odd.address.accessible" edc:propvalue="true"/>
  </edc:Properties>
  <edc:Power>
    <edc:VDD edc:minvoltage="3.135" edc:maxvoltage="3.465" edc:nominalvoltage="3.300"/>
  </edc:Power>
  <edc:Programming edc:haslvp2="true"/>
  <edc:ArchDef edc:name="arm32bit" edc:desc="arm32bit">
    <edc:MemTraits edc:addrinc="0x1" edc:locsize="0x1" edc:wordimpl="0xFFFFFFFF" edc:wordinit="0xFFFFFFFF" edc:wordsafe="0xFFFFFFFF" edc:wordsize="0x4"/>
  </edc:ArchDef>
  <edc:InstructionSet edc:instructionsetid="armv7m"/>
  <edc:InterruptList>
    <edc:Interrupt edc:irq="-15" edc:cname="Reset" edc:desc="Reset Vector, invoked on Power up and warm reset"/>
    <edc:Interrupt edc:irq="-14" edc:cname="NonMaskableInt" edc:desc="Non Maskable Interrupt"/>
    <edc:Interrupt edc:irq="-13" edc:cname="HardFault" edc:desc=" Hard Fault Interrupt"/>
    <edc:Interrupt edc:irq="-12" edc:cname="MemoryManagement" edc:desc=" Memory Management Interrupt"/>
    <edc:Interrupt edc:irq="-11" edc:cname="BusFault" edc:desc=" Bus Fault Interrupt"/>
    <edc:Interrupt edc:irq="-10" edc:cname="UsageFault" edc:desc=" Usage Fault Interrupt"/>
    <edc:Interrupt edc:irq="-5" edc:cname="SVCall" edc:desc=" SV Call Interrupt"/>
    <edc:Interrupt edc:irq="-4" edc:cname="DebugMonitor" edc:desc=" Debug Monitor Interrupt"/>
    <edc:Interrupt edc:irq="-2" edc:cname="PendSV" edc:desc=" Pend SV Interrupt"/>
    <edc:Interrupt edc:irq="-1" edc:cname="SysTick" edc:desc=" System Tick Interrupt"/>
    <edc:Interrupt edc:irq="0" edc:cname="GIRQ08" edc:desc="" ltx:memberofperipheral="GPIO"/>
    <edc:Interrupt edc:irq="1" edc:cname="GIRQ09" edc:desc="" ltx:memberofperipheral="GPIO"/>
    <edc:Interrupt edc:irq="2" edc:cname="GIRQ10" edc:desc="" ltx:memberofperipheral="GPIO"/>
    <edc:Interrupt edc:irq="3" edc:cname="GIRQ11" edc:desc="" ltx:memberofperipheral="GPIO"/>
    <edc:Interrupt edc:irq="4" edc:cname="GIRQ12" edc:desc="" ltx:memberofperipheral="GPIO"/>
    <edc:Interrupt edc:irq="17" edc:cname="GIRQ26" edc:desc="" ltx:memberofperipheral="GPIO"/>
    <edc:Interrupt edc:irq="20" edc:cname="SMB0" edc:desc="" ltx:memberofperipheral="SMB0"/>
    <edc:Interrupt edc:irq="21" edc:cname="SMB1" edc:desc="" ltx:memberofperipheral="SMB1"/>
    <edc:Interrupt edc:irq="22" edc:cname="SMB2" edc:desc="" ltx:memberofperipheral="SMB2"/>
    <edc:Interrupt edc:irq="23" edc:cname="SMB3" edc:desc="" ltx:memberofperipheral="SMB3"/>
    <edc:Interrupt edc:irq="24" edc:cname="DMA_CH00" edc:desc="" ltx:memberofperipheral="DMA_CHAN00"/>
    <edc:Interrupt edc:irq="25" edc:cname="DMA_CH01" edc:desc="" ltx:memberofperipheral="DMA_CHAN01"/>
    <edc:Interrupt edc:irq="26" edc:cname="DMA_CH02" edc:desc="" ltx:memberofperipheral="DMA_CHAN02"/>
    <edc:Interrupt edc:irq="27" edc:cname="DMA_CH03" edc:desc="" ltx:memberofperipheral="DMA_CHAN03"/>
    <edc:Interrupt edc:irq="28" edc:cname="DMA_CH04" edc:desc="" ltx:memberofperipheral="DMA_CHAN04"/>
    <edc:Interrupt edc:irq="29" edc:cname="DMA_CH05" edc:desc="" ltx:memberofperipheral="DMA_CHAN05"/>
    <edc:Interrupt edc:irq="30" edc:cname="DMA_CH06" edc:desc="" ltx:memberofperipheral="DMA_CHAN06"/>
    <edc:Interrupt edc:irq="31" edc:cname="DMA_CH07" edc:desc="" ltx:memberofperipheral="DMA_CHAN07"/>
    <edc:Interrupt edc:irq="32" edc:cname="DMA_CH08" edc:desc="" ltx:memberofperipheral="DMA_CHAN08"/>
    <edc:Interrupt edc:irq="33" edc:cname="DMA_CH09" edc:desc="" ltx:memberofperipheral="DMA_CHAN09"/>
    <edc:Interrupt edc:irq="34" edc:cname="DMA_CH10" edc:desc="" ltx:memberofperipheral="DMA_CHAN10"/>
    <edc:Interrupt edc:irq="35" edc:cname="DMA_CH11" edc:desc="" ltx:memberofperipheral="DMA_CHAN11"/>
    <edc:Interrupt edc:irq="36" edc:cname="DMA_CH12" edc:desc="" ltx:memberofperipheral="DMA_CHAN12"/>
    <edc:Interrupt edc:irq="37" edc:cname="DMA_CH13" edc:desc="" ltx:memberofperipheral="DMA_CHAN13"/>
    <edc:Interrupt edc:irq="40" edc:cname="UART0" edc:desc="" ltx:memberofperipheral="UART0"/>
    <edc:Interrupt edc:irq="41" edc:cname="UART1" edc:desc="" ltx:memberofperipheral="UART1"/>
    <edc:Interrupt edc:irq="71" edc:cname="TACH0" edc:desc="" ltx:memberofperipheral="TACH0"/>
    <edc:Interrupt edc:irq="72" edc:cname="TACH1" edc:desc="" ltx:memberofperipheral="TACH1"/>
    <edc:Interrupt edc:irq="74" edc:cname="RPM2PWM_0_FAIL" edc:desc="" ltx:memberofperipheral="FAN0"/>
    <edc:Interrupt edc:irq="75" edc:cname="RPM2PWM_0_STALL" edc:desc="" ltx:memberofperipheral="FAN0"/>
    <edc:Interrupt edc:irq="76" edc:cname="RPM2PWM_1_FAIL" edc:desc="" ltx:memberofperipheral="FAN1"/>
    <edc:Interrupt edc:irq="77" edc:cname="RPM2PWM_1_STALL" edc:desc="" ltx:memberofperipheral="FAN1"/>
    <edc:Interrupt edc:irq="78" edc:cname="SNGL" edc:desc="" ltx:memberofperipheral="ADC"/>
    <edc:Interrupt edc:irq="79" edc:cname="RPT" edc:desc="" ltx:memberofperipheral="ADC"/>
    <edc:Interrupt edc:irq="80" edc:cname="RC_ID0" edc:desc="" ltx:memberofperipheral="RC_ID0"/>
    <edc:Interrupt edc:irq="81" edc:cname="RC_ID1" edc:desc="" ltx:memberofperipheral="RC_ID1"/>
    <edc:Interrupt edc:irq="83" edc:cname="LED0" edc:desc="" ltx:memberofperipheral="LED0"/>
    <edc:Interrupt edc:irq="84" edc:cname="LED1" edc:desc="" ltx:memberofperipheral="LED1"/>
    <edc:Interrupt edc:irq="91" edc:cname="QMSPI" edc:desc="" ltx:memberofperipheral="QMSPI"/>
    <edc:Interrupt edc:irq="92" edc:cname="TX0" edc:desc="" ltx:memberofperipheral="GP_SPI0"/>
    <edc:Interrupt edc:irq="93" edc:cname="RX0" edc:desc="" ltx:memberofperipheral="GP_SPI0"/>
    <edc:Interrupt edc:irq="111" edc:cname="TIMER" edc:desc="" ltx:memberofperipheral="RTOS"/>
    <edc:Interrupt edc:irq="112" edc:cname="HTM0" edc:desc="" ltx:memberofperipheral="HTM0"/>
    <edc:Interrupt edc:irq="113" edc:cname="HTM1" edc:desc="" ltx:memberofperipheral="HTM1"/>
    <edc:Interrupt edc:irq="114" edc:cname="ALARM_INT" edc:desc="" ltx:memberofperipheral="WEEK"/>
    <edc:Interrupt edc:irq="115" edc:cname="WKSUB" edc:desc="" ltx:memberofperipheral="WEEK"/>
    <edc:Interrupt edc:irq="116" edc:cname="WKSEC" edc:desc="" ltx:memberofperipheral="WEEK"/>
    <edc:Interrupt edc:irq="117" edc:cname="WKSUBSEC" edc:desc="" ltx:memberofperipheral="WEEK"/>
    <edc:Interrupt edc:irq="118" edc:cname="SYSPWR" edc:desc="" ltx:memberofperipheral="WEEK"/>
    <edc:Interrupt edc:irq="119" edc:cname="RTC" edc:desc="" ltx:memberofperipheral="RTC"/>
    <edc:Interrupt edc:irq="120" edc:cname="RTC_ALARM" edc:desc="" ltx:memberofperipheral="RTC"/>
    <edc:Interrupt edc:irq="121" edc:cname="OVRD_IN" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="122" edc:cname="IN0" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="123" edc:cname="IN1" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="124" edc:cname="IN2" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="125" edc:cname="IN3" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="126" edc:cname="IN4" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="127" edc:cname="IN5" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="128" edc:cname="IN6" edc:desc="" ltx:memberofperipheral="VCI"/>
    <edc:Interrupt edc:irq="135" edc:cname="KMS" edc:desc="" ltx:memberofperipheral="KMS"/>
    <edc:Interrupt edc:irq="136" edc:cname="TIMER16_0" edc:desc="" ltx:memberofperipheral="TIMER16_0"/>
    <edc:Interrupt edc:irq="137" edc:cname="TIMER16_1" edc:desc="" ltx:memberofperipheral="TIMER16_1"/>
    <edc:Interrupt edc:irq="138" edc:cname="TIMER16_2" edc:desc="" ltx:memberofperipheral="TIMER16_2"/>
    <edc:Interrupt edc:irq="139" edc:cname="TIMER16_3" edc:desc="" ltx:memberofperipheral="TIMER16_3"/>
    <edc:Interrupt edc:irq="140" edc:cname="TIMER32_0" edc:desc="" ltx:memberofperipheral="TIMER32_0"/>
    <edc:Interrupt edc:irq="141" edc:cname="TIMER32_1" edc:desc="" ltx:memberofperipheral="TIMER32_1"/>
    <edc:Interrupt edc:irq="142" edc:cname="CNT_TMR0" edc:desc="" ltx:memberofperipheral="CNT_TMR0"/>
    <edc:Interrupt edc:irq="143" edc:cname="CNT_TMR1" edc:desc="" ltx:memberofperipheral="CNT_TMR1"/>
    <edc:Interrupt edc:irq="144" edc:cname="CNT_TMR2" edc:desc="" ltx:memberofperipheral="CNT_TMR2"/>
    <edc:Interrupt edc:irq="145" edc:cname="CNT_TMR3" edc:desc="" ltx:memberofperipheral="CNT_TMR3"/>
    <edc:Interrupt edc:irq="146" edc:cname="CAPTURE_TIMER" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="147" edc:cname="CAPTURE_0" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="148" edc:cname="CAPTURE_1" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="149" edc:cname="CAPTURE_2" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="150" edc:cname="CAPTURE_3" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="151" edc:cname="CAPTURE_4" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="152" edc:cname="CAPTURE_5" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="153" edc:cname="COMPARE_0" edc:desc="" ltx:memberofperipheral="CCT"/>
    <edc:Interrupt edc:irq="154" edc:cname="COMPARE_1" edc:desc="" ltx:memberofperipheral="CCT"/>
  </edc:InterruptList>
  <edc:PeripheralList>
    <edc:Peripheral edc:cname="PCR" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_MAIN" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN00" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN01" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN02" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN03" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN04" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN05" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN06" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN07" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN08" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN09" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN10" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN11" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN12" edc:desc=""/>
    <edc:Peripheral edc:cname="DMA_CHAN13" edc:desc=""/>
    <edc:Peripheral edc:cname="ECIA" edc:desc=""/>
    <edc:Peripheral edc:cname="GCR" edc:desc=""/>
    <edc:Peripheral edc:cname="UART0" edc:desc=""/>
    <edc:Peripheral edc:cname="UART1" edc:desc=""/>
    <edc:Peripheral edc:cname="GPIO" edc:desc=""/>
    <edc:Peripheral edc:cname="WDT" edc:desc=""/>
    <edc:Peripheral edc:cname="TIMER16_0" edc:desc=""/>
    <edc:Peripheral edc:cname="TIMER16_1" edc:desc=""/>
    <edc:Peripheral edc:cname="TIMER16_2" edc:desc=""/>
    <edc:Peripheral edc:cname="TIMER16_3" edc:desc=""/>
    <edc:Peripheral edc:cname="TIMER32_0" edc:desc=""/>
    <edc:Peripheral edc:cname="TIMER32_1" edc:desc=""/>
    <edc:Peripheral edc:cname="CNT_TMR0" edc:desc=""/>
    <edc:Peripheral edc:cname="CNT_TMR1" edc:desc=""/>
    <edc:Peripheral edc:cname="CNT_TMR2" edc:desc=""/>
    <edc:Peripheral edc:cname="CNT_TMR3" edc:desc=""/>
    <edc:Peripheral edc:cname="CCT" edc:desc=""/>
    <edc:Peripheral edc:cname="HTM0" edc:desc=""/>
    <edc:Peripheral edc:cname="HTM1" edc:desc=""/>
    <edc:Peripheral edc:cname="RTOS" edc:desc=""/>
    <edc:Peripheral edc:cname="RTC" edc:desc=""/>
    <edc:Peripheral edc:cname="WEEK" edc:desc=""/>
    <edc:Peripheral edc:cname="TACH0" edc:desc=""/>
    <edc:Peripheral edc:cname="TACH1" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM0" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM1" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM2" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM3" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM4" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM5" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM10" edc:desc=""/>
    <edc:Peripheral edc:cname="ADC" edc:desc=""/>
    <edc:Peripheral edc:cname="FAN0" edc:desc=""/>
    <edc:Peripheral edc:cname="FAN1" edc:desc=""/>
    <edc:Peripheral edc:cname="LED0" edc:desc=""/>
    <edc:Peripheral edc:cname="LED1" edc:desc=""/>
    <edc:Peripheral edc:cname="RC_ID0" edc:desc=""/>
    <edc:Peripheral edc:cname="RC_ID1" edc:desc=""/>
    <edc:Peripheral edc:cname="KMS" edc:desc=""/>
    <edc:Peripheral edc:cname="SMB0" edc:desc=""/>
    <edc:Peripheral edc:cname="SMB1" edc:desc=""/>
    <edc:Peripheral edc:cname="SMB2" edc:desc=""/>
    <edc:Peripheral edc:cname="SMB3" edc:desc=""/>
    <edc:Peripheral edc:cname="GP_SPI0" edc:desc=""/>
    <edc:Peripheral edc:cname="QMSPI" edc:desc=""/>
    <edc:Peripheral edc:cname="TFDP" edc:desc=""/>
    <edc:Peripheral edc:cname="VCI" edc:desc=""/>
    <edc:Peripheral edc:cname="VBAT_RAM" edc:desc=""/>
    <edc:Peripheral edc:cname="VBAT" edc:desc=""/>
    <edc:Peripheral edc:cname="EC_REG_BANK" edc:desc=""/>
    <edc:Peripheral edc:cname="EFUSE" edc:desc=""/>
    <edc:Peripheral edc:cname="MPU" edc:desc=""/>
    <edc:Peripheral edc:cname="NVIC" edc:desc=""/>
    <edc:Peripheral edc:cname="SysTick" edc:desc=""/>
    <edc:Peripheral edc:cname="SystemControl" edc:desc=""/>
  </edc:PeripheralList>
  <edc:PhysicalSpace>
    <edc:NMMRPlace edc:regionid="corenmmrs">
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R0" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="0"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R1" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="4"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R2" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="8"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R3" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="12"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R4" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="16"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R5" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="20"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R6" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="24"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R7" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="28"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R8" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="32"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R9" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="36"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R10" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="40"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R11" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="44"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R12" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="48"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="52"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="MSP" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Main Stack Pointer" edc:nmmrid="64"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="PSP" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Process Stack Pointer" edc:nmmrid="68"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="56"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="PC" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Program Counter" edc:nmmrid="60"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="PSR" edc:impl="0xFF00FDFF" edc:access="nnnnnnnn--------nnnnnn-nnnnnnnnn" edc:por="00000001000000000000000000000000" edc:mclr="00000001000000000000000000000000" edc:desc="Program Status Register" edc:nmmrid="72"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="APSR" edc:impl="0xF80F0000" edc:access="nnnnn-------nnnn----------------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Application Program Status Register" edc:nmmrid="76"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="IPSR" edc:impl="0x1FF" edc:access="-----------------------rrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Interrupt Program Status Register" edc:nmmrid="80"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="EPSR" edc:impl="0x700FC00" edc:access="-----rrr--------rrrrrr----------" edc:por="00000001000000000000000000000000" edc:mclr="00000001000000000000000000000000" edc:desc="Execution Program Status Register" edc:nmmrid="84"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="PRIMASK" edc:impl="0x1" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Priority Mask Register" edc:nmmrid="88"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="FAULTMASK" edc:impl="0x1" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Fault Mask Register" edc:nmmrid="92"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="BASEPRI" edc:impl="0xFF" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Base Priority Mask Register" edc:nmmrid="96"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="CONTROL" edc:impl="0x7" edc:access="-----------------------------nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Control Register" edc:nmmrid="100"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="FPSCR" edc:impl="0xFFF79F9F" edc:access="nnnnnnnnnnnn-nnnn--nnnnnn--nnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Status And Control Register" edc:nmmrid="144"/>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D0" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S0" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="148"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S1" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="152"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D1" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S2" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="156"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S3" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="160"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D2" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S4" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="164"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S5" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="168"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D3" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S6" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="172"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S7" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="176"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D4" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S8" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="180"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S9" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="184"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D5" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S10" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="188"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S11" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="192"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D6" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S12" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="196"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S13" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="200"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D7" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S14" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="204"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S15" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="208"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D8" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S16" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="212"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S17" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="216"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D9" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S18" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="220"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S19" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="224"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D10" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S20" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="228"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S21" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="232"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D11" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S22" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="236"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S23" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="240"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D12" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S24" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="244"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S25" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="248"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D13" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S26" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="252"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S27" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="256"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D14" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S28" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="260"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S29" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="264"/>
      </edc:JoinedSFRDef>
      <edc:JoinedSFRDef edc:nzwidth="0x40" edc:cname="D15" edc:impl="0xFFFFFFFFFFFFFFFF" edc:desc="Floating-Point Extension Register">
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S30" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="268"/>
        <edc:SFRDef edc:nzwidth="0x20" edc:cname="S31" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Floating-Point Extension Register" edc:nmmrid="272"/>
      </edc:JoinedSFRDef>
    </edc:NMMRPlace>
    <edc:GPRDataSector edc:regionid="CODE_SRAM" edc:beginaddr="0xB0000" edc:endaddr="0x118000" edc:isexecutable="true" edc:rw="rw"/>
    <edc:GPRDataSector edc:regionid="DATA_SRAM" edc:beginaddr="0x118000" edc:endaddr="0x128000" edc:rw="rw"/>
    <edc:GPRDataSector edc:regionid="DATA_SRAM_ALIAS" edc:beginaddr="0x20000000" edc:endaddr="0x20010000" edc:rw="rw"/>
    <edc:SFRDataSector edc:regionid="EC_DEVICE_REGISTERS" edc:beginaddr="0x40000000" edc:endaddr="0x4000FC8C" edc:rw="rw">
      <edc:SFRDef ltx:memberofperipheral="WDT" edc:cname="LOAD" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:por="0000000000001111" edc:mclr="0000000000001111" edc:_addr="0x40000000"/>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x40000002"/>
      <edc:SFRDef ltx:memberofperipheral="WDT" edc:cname="CTRL" edc:nzwidth="0x8" edc:access="---nnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1F" edc:_addr="0x40000004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WDT">
            <edc:SFRFieldDef edc:cname="WDT_EN" edc:nzwidth="0x1" edc:desc="WDT Block enabled"/>
            <edc:SFRFieldDef edc:cname="WDT_STS" edc:nzwidth="0x1" edc:desc="WDT_STS is set by hardware if the last reset of the device was caused by an underflow of the WDT. This bit must\n                      be cleared by the EC firmware writing a '1' to this bit. Writing a '0' to this bit has no effect."/>
            <edc:SFRFieldDef edc:cname="HIB_TMR0_STL" edc:nzwidth="0x1" edc:desc="This bit enables the WDT Stall function if the Hibernation Timer 0 is active.\n                1=The WDT is stalled while the Hibernation Timer 0 is active\n                                 0=The WDT is not affected by Hibernation Timer 0."/>
            <edc:SFRFieldDef edc:cname="WK_TMR_STL" edc:nzwidth="0x1" edc:desc="This bit enables the WDT Stall function if the Week Timer is active.\n                          1=The WDT is stalled while the Week Timer is active\n                    0=The WDT is not affected by the Week Timer."/>
            <edc:SFRFieldDef edc:cname="JTAG_STL" edc:nzwidth="0x1" edc:desc="This bit enables the WDT Stall function if JTAG or SWD debug functions are active\n                              1=The WDT is stalled while either JTAG or SWD is active\n                     0=The WDT is not affected by the JTAG debug interface."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40000005"/>
      <edc:SFRDef ltx:memberofperipheral="WDT" edc:cname="KICK" edc:nzwidth="0x8" edc:access="wwwwwwww" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40000008"/>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40000009"/>
      <edc:SFRDef ltx:memberofperipheral="WDT" edc:cname="CNT" edc:nzwidth="0x10" edc:access="rrrrrrrrrrrrrrrr" edc:por="1111111111111111" edc:mclr="1111111111111111" edc:_addr="0x4000000C"/>
      <edc:AdjustPoint edc:offset="0xBF2" edc:_addr="0x4000000E"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_0" edc:cname="CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C00"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_0" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C04"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_0" edc:cname="STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C08">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_0">
            <edc:SFRFieldDef edc:cname="EVT_INT" edc:nzwidth="0x1" edc:desc="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_0" edc:cname="IEN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C0C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_0">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_0" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--------nnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF00FD" edc:_addr="0x40000C10">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_0">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_UP" edc:nzwidth="0x1" edc:desc="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"/>
            <edc:SFRFieldDef edc:cname="AU_RESTRT" edc:nzwidth="0x1" edc:desc="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."/>
            <edc:SFRFieldDef edc:cname="STRT" edc:nzwidth="0x1" edc:desc="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."/>
            <edc:SFRFieldDef edc:cname="RLD" edc:nzwidth="0x1" edc:desc="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."/>
            <edc:SFRFieldDef edc:cname="HLT" edc:nzwidth="0x1" edc:desc="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PRESCALE" edc:nzwidth="0x10" edc:desc="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0x40000C14"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_1" edc:cname="CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C20"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_1" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C24"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_1" edc:cname="STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C28">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_1">
            <edc:SFRFieldDef edc:cname="EVT_INT" edc:nzwidth="0x1" edc:desc="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_1" edc:cname="IEN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C2C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_1">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_1" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--------nnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF00FD" edc:_addr="0x40000C30">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_1">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_UP" edc:nzwidth="0x1" edc:desc="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"/>
            <edc:SFRFieldDef edc:cname="AU_RESTRT" edc:nzwidth="0x1" edc:desc="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."/>
            <edc:SFRFieldDef edc:cname="STRT" edc:nzwidth="0x1" edc:desc="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."/>
            <edc:SFRFieldDef edc:cname="RLD" edc:nzwidth="0x1" edc:desc="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."/>
            <edc:SFRFieldDef edc:cname="HLT" edc:nzwidth="0x1" edc:desc="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PRESCALE" edc:nzwidth="0x10" edc:desc="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0x40000C34"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_2" edc:cname="CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C40"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_2" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C44"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_2" edc:cname="STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C48">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_2">
            <edc:SFRFieldDef edc:cname="EVT_INT" edc:nzwidth="0x1" edc:desc="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_2" edc:cname="IEN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C4C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_2">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_2" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--------nnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF00FD" edc:_addr="0x40000C50">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_2">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_UP" edc:nzwidth="0x1" edc:desc="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"/>
            <edc:SFRFieldDef edc:cname="AU_RESTRT" edc:nzwidth="0x1" edc:desc="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."/>
            <edc:SFRFieldDef edc:cname="STRT" edc:nzwidth="0x1" edc:desc="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."/>
            <edc:SFRFieldDef edc:cname="RLD" edc:nzwidth="0x1" edc:desc="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."/>
            <edc:SFRFieldDef edc:cname="HLT" edc:nzwidth="0x1" edc:desc="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PRESCALE" edc:nzwidth="0x10" edc:desc="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2C" edc:_addr="0x40000C54"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_3 TIMER32_0" edc:cname="CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C80">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0"/>
          <edc:SFRMode edc:id="DS.1"/>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_3 TIMER32_0" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000C84">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0"/>
          <edc:SFRMode edc:id="DS.1"/>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_3 TIMER32_0" edc:cname="STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C88">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_3">
            <edc:SFRFieldDef edc:cname="EVT_INT" edc:nzwidth="0x1" edc:desc="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"/>
          </edc:SFRMode>
          <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="TIMER32_0">
            <edc:SFRFieldDef edc:cname="EVT_INT" edc:nzwidth="0x1" edc:desc="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_3 TIMER32_0" edc:cname="IEN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000C8C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_3">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."/>
          </edc:SFRMode>
          <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="TIMER32_0">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER16_3 TIMER32_0" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--------nnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF00FD" edc:_addr="0x40000C90">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER16_3">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_UP" edc:nzwidth="0x1" edc:desc="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"/>
            <edc:SFRFieldDef edc:cname="AU_RESTRT" edc:nzwidth="0x1" edc:desc="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."/>
            <edc:SFRFieldDef edc:cname="STRT" edc:nzwidth="0x1" edc:desc="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."/>
            <edc:SFRFieldDef edc:cname="RLD" edc:nzwidth="0x1" edc:desc="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."/>
            <edc:SFRFieldDef edc:cname="HLT" edc:nzwidth="0x1" edc:desc="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PRESCALE" edc:nzwidth="0x10" edc:desc="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."/>
          </edc:SFRMode>
          <edc:SFRMode edc:id="DS.1" ltx:memberofperipheral="TIMER32_0">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_UP" edc:nzwidth="0x1" edc:desc="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"/>
            <edc:SFRFieldDef edc:cname="AU_RESTRT" edc:nzwidth="0x1" edc:desc="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."/>
            <edc:SFRFieldDef edc:cname="STRT" edc:nzwidth="0x1" edc:desc="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."/>
            <edc:SFRFieldDef edc:cname="RLD" edc:nzwidth="0x1" edc:desc="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."/>
            <edc:SFRFieldDef edc:cname="HLT" edc:nzwidth="0x1" edc:desc="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PRESCALE" edc:nzwidth="0x10" edc:desc="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0x40000C94"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER32_1" edc:cname="CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000CA0"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER32_1" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40000CA4"/>
      <edc:SFRDef ltx:memberofperipheral="TIMER32_1" edc:cname="STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000CA8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER32_1">
            <edc:SFRFieldDef edc:cname="EVT_INT" edc:nzwidth="0x1" edc:desc="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n      the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n      Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER32_1" edc:cname="IEN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40000CAC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER32_1">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TIMER32_1" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--------nnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF00FD" edc:_addr="0x40000CB0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TIMER32_1">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This enables the block for operation. 1=This block will function normally;\n      0=This block will gate its clock and go into its lowest power state"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_UP" edc:nzwidth="0x1" edc:desc="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n      when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n      0=The counter will decrement"/>
            <edc:SFRFieldDef edc:cname="AU_RESTRT" edc:nzwidth="0x1" edc:desc="This will select the action taken upon completing a count.\n      1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n      The interrupt will be set in edge mode\n      0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n      to wait before reconfiguring the Basic Timer following soft reset."/>
            <edc:SFRFieldDef edc:cname="STRT" edc:nzwidth="0x1" edc:desc="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n      clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n      this bit will never clear. Clearing this bit will halt the timer counter."/>
            <edc:SFRFieldDef edc:cname="RLD" edc:nzwidth="0x1" edc:desc="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n      completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n      event occurs. Usage while the timer is off may result in erroneous behaviour."/>
            <edc:SFRFieldDef edc:cname="HLT" edc:nzwidth="0x1" edc:desc="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n      start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PRESCALE" edc:nzwidth="0x10" edc:desc="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n      slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n      The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n      runs at half speed."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4C" edc:_addr="0x40000CB4"/>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR0" edc:cname="TIMERX_CTRL" edc:nzwidth="0x20" edc:access="-------------------nnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFF" edc:_addr="0x40000D00">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR0">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This bit is used to start and stop the timer. This bit does not reset the timer count but does reset the timer\n                       pulse output. This bit will be cleared when the timer stops counting in One-Shot mode. The ENABLE bit is cleared after a\n           RESET cycle has completed. Firmware must poll the RESET bit in order to determine when the timer is active after reset.\n        1=Timer is enabled; 0=Timer is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="This bit stops the timer and resets the internal counter to the value in the Timer Reload Register. This bit\n                   also clears the ENABLE bit if it is set. This bit is self-clearing after the timer is reset. Firmware must poll the\n          RESET bit in order to determine when the timer is active after reset. Interrupts are blocked only when RESET takes\n        effect and the ENABLE bit is cleared. If interrupts are not desired, firmware must mask the interrupt in the interrupt\n       block. 1=Timer reset; 0=Normal timer operation."/>
            <edc:SFRFieldDef edc:cname="MODE" edc:nzwidth="0x2" edc:desc="Timer Mode. 3=Measurement Mode; 2=One Shot Mode; 1=Event Mode; 0=Timer Mode.">
              <edc:SFRFieldSemantic edc:cname="TIMER_MODE" edc:desc="0=Timer Mode" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="EVENT_MODE" edc:desc="1=Event Mode" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="ONE_SHOT_MODE" edc:desc="2=One Shot Mode" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="MEASUREMENT_MODE" edc:desc="3=Measurement Mode" edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INPOL" edc:nzwidth="0x1" edc:desc="This bit selects the polarity of the TINx input. 1=TINx is active low; 0=TINx is active high."/>
            <edc:SFRFieldDef edc:cname="UPDN" edc:nzwidth="0x1" edc:desc="In Event Mode, this bit selects the timer count direction. In Timer Mode enables timer control by the TINx input pin.\n          Event Mode: 1=The timer counts up; 0=The timer counts down.\n                 Timer Mode:; 1=TINx pin pauses the timer when de-asserted; 0=TINx pin has no effect on the timer."/>
            <edc:SFRFieldDef edc:cname="TOUT_EN" edc:nzwidth="0x1" edc:desc="This bit enables the TOUTx pin. 1=TOUTx pin function is enabled; 0=TOUTx pin is inactive."/>
            <edc:SFRFieldDef edc:cname="RLOAD" edc:nzwidth="0x1" edc:desc="Reload Control. This bit controls how the timer is reloaded on overflow or underflow in Event and Timer modes.\n                    It has no effect in One shot mode. 1=Reload timer from Timer Reload Register and continue counting;\n                    0=Roll timer over to FFFFh and continue counting when counting down and rolls over to 0000h and continues counting when counting up."/>
            <edc:SFRFieldDef edc:cname="FIL_BYPASS" edc:nzwidth="0x1" edc:desc="This bit is used to enable or disable the noise filter on the TINx input signal. 1=Bypass Mode: input filter disabled.\n                     The TINx input directly affects the timer; 0=Filter Mode: input filter enabled. The TINx input is filtered by the input filter."/>
            <edc:SFRFieldDef edc:cname="PD" edc:nzwidth="0x1" edc:desc="Power Down. 1=The timer is powered down and all clocks are gated; 0=The timer is in a running state."/>
            <edc:SFRFieldDef edc:cname="TOUT_POL" edc:nzwidth="0x1" edc:desc="This bit determines the polarity of the TOUTx output signal. In timer modes that toggle the TOUTx signal,\n           this polarity bit will not have a perceivable difference, except to determine the inactive state. In One-Shot mode\n           this determines if the pulsed output is active high or active low. 1=Active low; 0=Active high."/>
            <edc:SFRFieldDef edc:cname="SLP_EN" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Sleep_Enable input signal. 1=Normal operation; 0=Sleep Mode is requested."/>
            <edc:SFRFieldDef edc:cname="TMRX_CLK_REQ" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Clock_Required output signal. 1=The main clock is required by this block;\n         0=The main clock is not required by this block."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR0" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="--------------------nnnnnnn-nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFEF" edc:_addr="0x40000D04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR0">
            <edc:SFRFieldDef edc:cname="TCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the 16-bit counter in the timer."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="EDGE" edc:nzwidth="0x2" edc:desc="This field selects which edge of the TINx input signal affects the timer in Event Mode, One-Shot Mode and Measurement Mode.\n          Event Mode: 11b=No event selected; 10b=Counts rising and falling edges; 01b=Counts rising edges; 00b=Counts falling edges.\n         One-Shot Mode: 11b=Start counting when the Enable bit is set; 10b=Starts counting on a rising or falling edge; 01b=Starts\n       counting on a rising edge; 00b=Starts counting on a falling edge. Measurement Mode: 11b=No event selected; 10b=Measures\n         the time between rising edges and falling edges and the time between falling edges and rising edges; 01b=Measures the\n        time between rising edges; 00b=Measures the time between falling edges."/>
            <edc:SFRFieldDef edc:cname="EVENT" edc:nzwidth="0x1" edc:desc="Event Select. This bit is used to select the count source when the timer is operating in Event Mode.\n          1=TINx is count source; 0=Timer x-1 overflow is count source."/>
            <edc:SFRFieldDef edc:cname="FCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the TINx noise filter. The available frequencies\n                are the same as for TCLK."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR0" edc:cname="TIMERX_RLD" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D08">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR0">
            <edc:SFRFieldDef edc:cname="TMR_RLD" edc:nzwidth="0x10" edc:desc="The Timer Reload register is used in Timer and One-Shot modes to set the lower limit of the timer.\n                 In Event mode the Timer Reload register sets either the upper or lower limit of the timer depending on if the\n            timer is counting up or down. Valid Timer Reload values are 0001h - FFFFh. If the timer is running, the\n                 reload value will not be updated until the timer overflows or underflows. Programming a 0000h as a preload\n             value is not a valid count value. Using a value of 0000h will cause unpredictable behavior."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR0" edc:cname="TIMERX_CNT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D0C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR0">
            <edc:SFRFieldDef edc:cname="TMR_CNT" edc:nzwidth="0x10" edc:desc="This is the current value of the timer in all modes."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x10" edc:_addr="0x40000D10"/>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR1" edc:cname="TIMERX_CTRL" edc:nzwidth="0x20" edc:access="-------------------nnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFF" edc:_addr="0x40000D20">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR1">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This bit is used to start and stop the timer. This bit does not reset the timer count but does reset the timer\n                       pulse output. This bit will be cleared when the timer stops counting in One-Shot mode. The ENABLE bit is cleared after a\n           RESET cycle has completed. Firmware must poll the RESET bit in order to determine when the timer is active after reset.\n        1=Timer is enabled; 0=Timer is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="This bit stops the timer and resets the internal counter to the value in the Timer Reload Register. This bit\n                   also clears the ENABLE bit if it is set. This bit is self-clearing after the timer is reset. Firmware must poll the\n          RESET bit in order to determine when the timer is active after reset. Interrupts are blocked only when RESET takes\n        effect and the ENABLE bit is cleared. If interrupts are not desired, firmware must mask the interrupt in the interrupt\n       block. 1=Timer reset; 0=Normal timer operation."/>
            <edc:SFRFieldDef edc:cname="MODE" edc:nzwidth="0x2" edc:desc="Timer Mode. 3=Measurement Mode; 2=One Shot Mode; 1=Event Mode; 0=Timer Mode.">
              <edc:SFRFieldSemantic edc:cname="TIMER_MODE" edc:desc="0=Timer Mode" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="EVENT_MODE" edc:desc="1=Event Mode" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="ONE_SHOT_MODE" edc:desc="2=One Shot Mode" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="MEASUREMENT_MODE" edc:desc="3=Measurement Mode" edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INPOL" edc:nzwidth="0x1" edc:desc="This bit selects the polarity of the TINx input. 1=TINx is active low; 0=TINx is active high."/>
            <edc:SFRFieldDef edc:cname="UPDN" edc:nzwidth="0x1" edc:desc="In Event Mode, this bit selects the timer count direction. In Timer Mode enables timer control by the TINx input pin.\n          Event Mode: 1=The timer counts up; 0=The timer counts down.\n                 Timer Mode:; 1=TINx pin pauses the timer when de-asserted; 0=TINx pin has no effect on the timer."/>
            <edc:SFRFieldDef edc:cname="TOUT_EN" edc:nzwidth="0x1" edc:desc="This bit enables the TOUTx pin. 1=TOUTx pin function is enabled; 0=TOUTx pin is inactive."/>
            <edc:SFRFieldDef edc:cname="RLOAD" edc:nzwidth="0x1" edc:desc="Reload Control. This bit controls how the timer is reloaded on overflow or underflow in Event and Timer modes.\n                    It has no effect in One shot mode. 1=Reload timer from Timer Reload Register and continue counting;\n                    0=Roll timer over to FFFFh and continue counting when counting down and rolls over to 0000h and continues counting when counting up."/>
            <edc:SFRFieldDef edc:cname="FIL_BYPASS" edc:nzwidth="0x1" edc:desc="This bit is used to enable or disable the noise filter on the TINx input signal. 1=Bypass Mode: input filter disabled.\n                     The TINx input directly affects the timer; 0=Filter Mode: input filter enabled. The TINx input is filtered by the input filter."/>
            <edc:SFRFieldDef edc:cname="PD" edc:nzwidth="0x1" edc:desc="Power Down. 1=The timer is powered down and all clocks are gated; 0=The timer is in a running state."/>
            <edc:SFRFieldDef edc:cname="TOUT_POL" edc:nzwidth="0x1" edc:desc="This bit determines the polarity of the TOUTx output signal. In timer modes that toggle the TOUTx signal,\n           this polarity bit will not have a perceivable difference, except to determine the inactive state. In One-Shot mode\n           this determines if the pulsed output is active high or active low. 1=Active low; 0=Active high."/>
            <edc:SFRFieldDef edc:cname="SLP_EN" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Sleep_Enable input signal. 1=Normal operation; 0=Sleep Mode is requested."/>
            <edc:SFRFieldDef edc:cname="TMRX_CLK_REQ" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Clock_Required output signal. 1=The main clock is required by this block;\n         0=The main clock is not required by this block."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR1" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="--------------------nnnnnnn-nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFEF" edc:_addr="0x40000D24">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR1">
            <edc:SFRFieldDef edc:cname="TCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the 16-bit counter in the timer."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="EDGE" edc:nzwidth="0x2" edc:desc="This field selects which edge of the TINx input signal affects the timer in Event Mode, One-Shot Mode and Measurement Mode.\n          Event Mode: 11b=No event selected; 10b=Counts rising and falling edges; 01b=Counts rising edges; 00b=Counts falling edges.\n         One-Shot Mode: 11b=Start counting when the Enable bit is set; 10b=Starts counting on a rising or falling edge; 01b=Starts\n       counting on a rising edge; 00b=Starts counting on a falling edge. Measurement Mode: 11b=No event selected; 10b=Measures\n         the time between rising edges and falling edges and the time between falling edges and rising edges; 01b=Measures the\n        time between rising edges; 00b=Measures the time between falling edges."/>
            <edc:SFRFieldDef edc:cname="EVENT" edc:nzwidth="0x1" edc:desc="Event Select. This bit is used to select the count source when the timer is operating in Event Mode.\n          1=TINx is count source; 0=Timer x-1 overflow is count source."/>
            <edc:SFRFieldDef edc:cname="FCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the TINx noise filter. The available frequencies\n                are the same as for TCLK."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR1" edc:cname="TIMERX_RLD" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D28">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR1">
            <edc:SFRFieldDef edc:cname="TMR_RLD" edc:nzwidth="0x10" edc:desc="The Timer Reload register is used in Timer and One-Shot modes to set the lower limit of the timer.\n                 In Event mode the Timer Reload register sets either the upper or lower limit of the timer depending on if the\n            timer is counting up or down. Valid Timer Reload values are 0001h - FFFFh. If the timer is running, the\n                 reload value will not be updated until the timer overflows or underflows. Programming a 0000h as a preload\n             value is not a valid count value. Using a value of 0000h will cause unpredictable behavior."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR1" edc:cname="TIMERX_CNT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D2C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR1">
            <edc:SFRFieldDef edc:cname="TMR_CNT" edc:nzwidth="0x10" edc:desc="This is the current value of the timer in all modes."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x10" edc:_addr="0x40000D30"/>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR2" edc:cname="TIMERX_CTRL" edc:nzwidth="0x20" edc:access="-------------------nnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFF" edc:_addr="0x40000D40">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR2">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This bit is used to start and stop the timer. This bit does not reset the timer count but does reset the timer\n                       pulse output. This bit will be cleared when the timer stops counting in One-Shot mode. The ENABLE bit is cleared after a\n           RESET cycle has completed. Firmware must poll the RESET bit in order to determine when the timer is active after reset.\n        1=Timer is enabled; 0=Timer is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="This bit stops the timer and resets the internal counter to the value in the Timer Reload Register. This bit\n                   also clears the ENABLE bit if it is set. This bit is self-clearing after the timer is reset. Firmware must poll the\n          RESET bit in order to determine when the timer is active after reset. Interrupts are blocked only when RESET takes\n        effect and the ENABLE bit is cleared. If interrupts are not desired, firmware must mask the interrupt in the interrupt\n       block. 1=Timer reset; 0=Normal timer operation."/>
            <edc:SFRFieldDef edc:cname="MODE" edc:nzwidth="0x2" edc:desc="Timer Mode. 3=Measurement Mode; 2=One Shot Mode; 1=Event Mode; 0=Timer Mode.">
              <edc:SFRFieldSemantic edc:cname="TIMER_MODE" edc:desc="0=Timer Mode" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="EVENT_MODE" edc:desc="1=Event Mode" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="ONE_SHOT_MODE" edc:desc="2=One Shot Mode" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="MEASUREMENT_MODE" edc:desc="3=Measurement Mode" edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INPOL" edc:nzwidth="0x1" edc:desc="This bit selects the polarity of the TINx input. 1=TINx is active low; 0=TINx is active high."/>
            <edc:SFRFieldDef edc:cname="UPDN" edc:nzwidth="0x1" edc:desc="In Event Mode, this bit selects the timer count direction. In Timer Mode enables timer control by the TINx input pin.\n          Event Mode: 1=The timer counts up; 0=The timer counts down.\n                 Timer Mode:; 1=TINx pin pauses the timer when de-asserted; 0=TINx pin has no effect on the timer."/>
            <edc:SFRFieldDef edc:cname="TOUT_EN" edc:nzwidth="0x1" edc:desc="This bit enables the TOUTx pin. 1=TOUTx pin function is enabled; 0=TOUTx pin is inactive."/>
            <edc:SFRFieldDef edc:cname="RLOAD" edc:nzwidth="0x1" edc:desc="Reload Control. This bit controls how the timer is reloaded on overflow or underflow in Event and Timer modes.\n                    It has no effect in One shot mode. 1=Reload timer from Timer Reload Register and continue counting;\n                    0=Roll timer over to FFFFh and continue counting when counting down and rolls over to 0000h and continues counting when counting up."/>
            <edc:SFRFieldDef edc:cname="FIL_BYPASS" edc:nzwidth="0x1" edc:desc="This bit is used to enable or disable the noise filter on the TINx input signal. 1=Bypass Mode: input filter disabled.\n                     The TINx input directly affects the timer; 0=Filter Mode: input filter enabled. The TINx input is filtered by the input filter."/>
            <edc:SFRFieldDef edc:cname="PD" edc:nzwidth="0x1" edc:desc="Power Down. 1=The timer is powered down and all clocks are gated; 0=The timer is in a running state."/>
            <edc:SFRFieldDef edc:cname="TOUT_POL" edc:nzwidth="0x1" edc:desc="This bit determines the polarity of the TOUTx output signal. In timer modes that toggle the TOUTx signal,\n           this polarity bit will not have a perceivable difference, except to determine the inactive state. In One-Shot mode\n           this determines if the pulsed output is active high or active low. 1=Active low; 0=Active high."/>
            <edc:SFRFieldDef edc:cname="SLP_EN" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Sleep_Enable input signal. 1=Normal operation; 0=Sleep Mode is requested."/>
            <edc:SFRFieldDef edc:cname="TMRX_CLK_REQ" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Clock_Required output signal. 1=The main clock is required by this block;\n         0=The main clock is not required by this block."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR2" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="--------------------nnnnnnn-nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFEF" edc:_addr="0x40000D44">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR2">
            <edc:SFRFieldDef edc:cname="TCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the 16-bit counter in the timer."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="EDGE" edc:nzwidth="0x2" edc:desc="This field selects which edge of the TINx input signal affects the timer in Event Mode, One-Shot Mode and Measurement Mode.\n          Event Mode: 11b=No event selected; 10b=Counts rising and falling edges; 01b=Counts rising edges; 00b=Counts falling edges.\n         One-Shot Mode: 11b=Start counting when the Enable bit is set; 10b=Starts counting on a rising or falling edge; 01b=Starts\n       counting on a rising edge; 00b=Starts counting on a falling edge. Measurement Mode: 11b=No event selected; 10b=Measures\n         the time between rising edges and falling edges and the time between falling edges and rising edges; 01b=Measures the\n        time between rising edges; 00b=Measures the time between falling edges."/>
            <edc:SFRFieldDef edc:cname="EVENT" edc:nzwidth="0x1" edc:desc="Event Select. This bit is used to select the count source when the timer is operating in Event Mode.\n          1=TINx is count source; 0=Timer x-1 overflow is count source."/>
            <edc:SFRFieldDef edc:cname="FCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the TINx noise filter. The available frequencies\n                are the same as for TCLK."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR2" edc:cname="TIMERX_RLD" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D48">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR2">
            <edc:SFRFieldDef edc:cname="TMR_RLD" edc:nzwidth="0x10" edc:desc="The Timer Reload register is used in Timer and One-Shot modes to set the lower limit of the timer.\n                 In Event mode the Timer Reload register sets either the upper or lower limit of the timer depending on if the\n            timer is counting up or down. Valid Timer Reload values are 0001h - FFFFh. If the timer is running, the\n                 reload value will not be updated until the timer overflows or underflows. Programming a 0000h as a preload\n             value is not a valid count value. Using a value of 0000h will cause unpredictable behavior."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR2" edc:cname="TIMERX_CNT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D4C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR2">
            <edc:SFRFieldDef edc:cname="TMR_CNT" edc:nzwidth="0x10" edc:desc="This is the current value of the timer in all modes."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x10" edc:_addr="0x40000D50"/>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR3" edc:cname="TIMERX_CTRL" edc:nzwidth="0x20" edc:access="-------------------nnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFF" edc:_addr="0x40000D60">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR3">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="This bit is used to start and stop the timer. This bit does not reset the timer count but does reset the timer\n                       pulse output. This bit will be cleared when the timer stops counting in One-Shot mode. The ENABLE bit is cleared after a\n           RESET cycle has completed. Firmware must poll the RESET bit in order to determine when the timer is active after reset.\n        1=Timer is enabled; 0=Timer is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="This bit stops the timer and resets the internal counter to the value in the Timer Reload Register. This bit\n                   also clears the ENABLE bit if it is set. This bit is self-clearing after the timer is reset. Firmware must poll the\n          RESET bit in order to determine when the timer is active after reset. Interrupts are blocked only when RESET takes\n        effect and the ENABLE bit is cleared. If interrupts are not desired, firmware must mask the interrupt in the interrupt\n       block. 1=Timer reset; 0=Normal timer operation."/>
            <edc:SFRFieldDef edc:cname="MODE" edc:nzwidth="0x2" edc:desc="Timer Mode. 3=Measurement Mode; 2=One Shot Mode; 1=Event Mode; 0=Timer Mode.">
              <edc:SFRFieldSemantic edc:cname="TIMER_MODE" edc:desc="0=Timer Mode" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="EVENT_MODE" edc:desc="1=Event Mode" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="ONE_SHOT_MODE" edc:desc="2=One Shot Mode" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="MEASUREMENT_MODE" edc:desc="3=Measurement Mode" edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INPOL" edc:nzwidth="0x1" edc:desc="This bit selects the polarity of the TINx input. 1=TINx is active low; 0=TINx is active high."/>
            <edc:SFRFieldDef edc:cname="UPDN" edc:nzwidth="0x1" edc:desc="In Event Mode, this bit selects the timer count direction. In Timer Mode enables timer control by the TINx input pin.\n          Event Mode: 1=The timer counts up; 0=The timer counts down.\n                 Timer Mode:; 1=TINx pin pauses the timer when de-asserted; 0=TINx pin has no effect on the timer."/>
            <edc:SFRFieldDef edc:cname="TOUT_EN" edc:nzwidth="0x1" edc:desc="This bit enables the TOUTx pin. 1=TOUTx pin function is enabled; 0=TOUTx pin is inactive."/>
            <edc:SFRFieldDef edc:cname="RLOAD" edc:nzwidth="0x1" edc:desc="Reload Control. This bit controls how the timer is reloaded on overflow or underflow in Event and Timer modes.\n                    It has no effect in One shot mode. 1=Reload timer from Timer Reload Register and continue counting;\n                    0=Roll timer over to FFFFh and continue counting when counting down and rolls over to 0000h and continues counting when counting up."/>
            <edc:SFRFieldDef edc:cname="FIL_BYPASS" edc:nzwidth="0x1" edc:desc="This bit is used to enable or disable the noise filter on the TINx input signal. 1=Bypass Mode: input filter disabled.\n                     The TINx input directly affects the timer; 0=Filter Mode: input filter enabled. The TINx input is filtered by the input filter."/>
            <edc:SFRFieldDef edc:cname="PD" edc:nzwidth="0x1" edc:desc="Power Down. 1=The timer is powered down and all clocks are gated; 0=The timer is in a running state."/>
            <edc:SFRFieldDef edc:cname="TOUT_POL" edc:nzwidth="0x1" edc:desc="This bit determines the polarity of the TOUTx output signal. In timer modes that toggle the TOUTx signal,\n           this polarity bit will not have a perceivable difference, except to determine the inactive state. In One-Shot mode\n           this determines if the pulsed output is active high or active low. 1=Active low; 0=Active high."/>
            <edc:SFRFieldDef edc:cname="SLP_EN" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Sleep_Enable input signal. 1=Normal operation; 0=Sleep Mode is requested."/>
            <edc:SFRFieldDef edc:cname="TMRX_CLK_REQ" edc:nzwidth="0x1" edc:desc="This bit reflects the current state of the timer's Clock_Required output signal. 1=The main clock is required by this block;\n         0=The main clock is not required by this block."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR3" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="--------------------nnnnnnn-nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFEF" edc:_addr="0x40000D64">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR3">
            <edc:SFRFieldDef edc:cname="TCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the 16-bit counter in the timer."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="EDGE" edc:nzwidth="0x2" edc:desc="This field selects which edge of the TINx input signal affects the timer in Event Mode, One-Shot Mode and Measurement Mode.\n          Event Mode: 11b=No event selected; 10b=Counts rising and falling edges; 01b=Counts rising edges; 00b=Counts falling edges.\n         One-Shot Mode: 11b=Start counting when the Enable bit is set; 10b=Starts counting on a rising or falling edge; 01b=Starts\n       counting on a rising edge; 00b=Starts counting on a falling edge. Measurement Mode: 11b=No event selected; 10b=Measures\n         the time between rising edges and falling edges and the time between falling edges and rising edges; 01b=Measures the\n        time between rising edges; 00b=Measures the time between falling edges."/>
            <edc:SFRFieldDef edc:cname="EVENT" edc:nzwidth="0x1" edc:desc="Event Select. This bit is used to select the count source when the timer is operating in Event Mode.\n          1=TINx is count source; 0=Timer x-1 overflow is count source."/>
            <edc:SFRFieldDef edc:cname="FCLK" edc:nzwidth="0x4" edc:desc="Timer Clock Select. This field determines the clock source for the TINx noise filter. The available frequencies\n                are the same as for TCLK."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR3" edc:cname="TIMERX_RLD" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D68">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR3">
            <edc:SFRFieldDef edc:cname="TMR_RLD" edc:nzwidth="0x10" edc:desc="The Timer Reload register is used in Timer and One-Shot modes to set the lower limit of the timer.\n                 In Event mode the Timer Reload register sets either the upper or lower limit of the timer depending on if the\n            timer is counting up or down. Valid Timer Reload values are 0001h - FFFFh. If the timer is running, the\n                 reload value will not be updated until the timer overflows or underflows. Programming a 0000h as a preload\n             value is not a valid count value. Using a value of 0000h will cause unpredictable behavior."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CNT_TMR3" edc:cname="TIMERX_CNT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40000D6C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CNT_TMR3">
            <edc:SFRFieldDef edc:cname="TMR_CNT" edc:nzwidth="0x10" edc:desc="This is the current value of the timer in all modes."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x290" edc:_addr="0x40000D70"/>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn------nn------nn-nnn-nnn" edc:por="00000011000000110000000000000000" edc:mclr="00000011000000110000000000000000" edc:impl="0x3030377" edc:_addr="0x40001000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="ACT" edc:nzwidth="0x1" edc:desc="This bit is used to start the capture and compare timer running and power it down."/>
            <edc:SFRFieldDef edc:cname="FREE_EN" edc:nzwidth="0x1" edc:desc="Free-Running Timer Enable. This bit is used to start and stop the free running timer."/>
            <edc:SFRFieldDef edc:cname="FREE_RST" edc:nzwidth="0x1" edc:desc="Free Running Timer Reset. This bit stops the timer and resets the internal counter to 0000_0000h."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TCLK" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the Free-Running Counter."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CMP_EN0" edc:nzwidth="0x1" edc:desc="Compare Enable for Compare 0 Register."/>
            <edc:SFRFieldDef edc:cname="CMP_EN1" edc:nzwidth="0x1" edc:desc="Compare Enable for Compare 1 Register."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="CMP_SET1" edc:nzwidth="0x1" edc:desc="When read, returns the current value off the Compare Timer Output 1 state."/>
            <edc:SFRFieldDef edc:cname="CMP_SET0" edc:nzwidth="0x1" edc:desc="When read, returns the current value off the Compare Timer Output 0 state."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="CMP_CLR1" edc:nzwidth="0x1" edc:desc="When read, returns the current value off the Compare Timer Output 1 state."/>
            <edc:SFRFieldDef edc:cname="CMP_CLR0" edc:nzwidth="0x1" edc:desc="When read, returns the current value off the Compare Timer Output 0 state."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP0_CTRL" edc:nzwidth="0x20" edc:access="nnn--nnnnnn--nnnnnn--nnnnnn--nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE7E7E7E7" edc:_addr="0x40001004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_EDGE0" edc:nzwidth="0x2" edc:desc="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 0."/>
            <edc:SFRFieldDef edc:cname="FILTER_BYP0" edc:nzwidth="0x1" edc:desc="This bit enables bypassing the input noise filter for Capture Register 0, so that the input signal goes directly into the timer."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FCLK_SEL0" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the input filter for Capture Register 0."/>
            <edc:SFRFieldDef edc:cname="CAP_EDGE1" edc:nzwidth="0x2" edc:desc="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 1."/>
            <edc:SFRFieldDef edc:cname="FILTER_BYP1" edc:nzwidth="0x1" edc:desc="This bit enables bypassing the input noise filter for Capture Register 1, so that the input signal goes directly into the timer."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FCLK_SEL1" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the input filter for Capture Register 1."/>
            <edc:SFRFieldDef edc:cname="CAP_EDGE2" edc:nzwidth="0x2" edc:desc="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 2."/>
            <edc:SFRFieldDef edc:cname="FILTER_BYP2" edc:nzwidth="0x1" edc:desc="This bit enables bypassing the input noise filter for Capture Register 2, so that the input signal goes directly into the timer."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FCLK_SEL2" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the input filter for Capture Register 2."/>
            <edc:SFRFieldDef edc:cname="CAP_EDGE3" edc:nzwidth="0x2" edc:desc="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 3."/>
            <edc:SFRFieldDef edc:cname="FILTER_BYP3" edc:nzwidth="0x1" edc:desc="This bit enables bypassing the input noise filter for Capture Register 3, so that the input signal goes directly into the timer."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FCLK_SEL3" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the input filter for Capture Register 3."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP1_CTRL" edc:nzwidth="0x20" edc:access="----------------nnn--nnnnnn--nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE7E7" edc:_addr="0x40001008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_EDGE4" edc:nzwidth="0x2" edc:desc="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 4."/>
            <edc:SFRFieldDef edc:cname="FILTER_BYP4" edc:nzwidth="0x1" edc:desc="This bit enables bypassing the input noise filter for Capture Register 4, so that the input signal goes directly into the timer."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FCLK_SEL4" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the input filter for Capture Register 4."/>
            <edc:SFRFieldDef edc:cname="CAP_EDGE5" edc:nzwidth="0x2" edc:desc="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 5."/>
            <edc:SFRFieldDef edc:cname="FILTER_BYP5" edc:nzwidth="0x1" edc:desc="This bit enables bypassing the input noise filter for Capture Register 5, so that the input signal goes directly into the timer."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FCLK_SEL5" edc:nzwidth="0x3" edc:desc="This 3-bit field sets the clock source for the input filter for Capture Register 5."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="FREE_RUN" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000100C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="TMR" edc:nzwidth="0x20" edc:desc="This register contains the current value of the Free Running Timer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40001010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_0" edc:nzwidth="0x20" edc:desc="This register saves the value copied from the Free Running timer on a programmed edge of ICT0."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40001014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_1" edc:nzwidth="0x20" edc:desc="This register saves the value copied from the Free Running timer on a programmed edge of ICT1."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP2" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40001018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_2" edc:nzwidth="0x20" edc:desc="This register saves the value copied from the Free Running timer on a programmed edge of ICT2."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000101C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_3" edc:nzwidth="0x20" edc:desc="This register saves the value copied from the Free Running timer on a programmed edge of ICT3."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP4" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40001020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_4" edc:nzwidth="0x20" edc:desc="This register saves the value copied from the Free Running timer on a programmed edge of ICT4."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="CAP5" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40001024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="CAP_5" edc:nzwidth="0x20" edc:desc="This register saves the value copied from the Free Running timer on a programmed edge of ICT5."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="COMP0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40001028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="COMP_0" edc:nzwidth="0x20" edc:desc="A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="CCT" edc:cname="COMP1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000102C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="CCT">
            <edc:SFRFieldDef edc:cname="COMP_1" edc:nzwidth="0x20" edc:desc="A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3D0" edc:_addr="0x40001030"/>
      <edc:SFRDef ltx:memberofperipheral="RC_ID0" edc:cname="RC_ID0_CTRL" edc:nzwidth="0x20" edc:access="----------------------nnnn---nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3C7" edc:_addr="0x40001400">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RC_ID0">
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This bit is cleared to 0 when the RC_ID interface is in the Reset phase, and set to 1 when the interface completes an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="TC" edc:nzwidth="0x1" edc:desc="This bit is cleared to 0 when the RC_ID interface is in the Reset phase, and set to 1 when the interface completes the Discharged phase of an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="CY_ER" edc:nzwidth="0x1" edc:desc="This bit is 1 if an RC_ID measurement encountered an error and the reading in the RC_ID Data Register is invalid. This bit is cleared to 0 when the RC_ID interface is in the Reset phase."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="START" edc:nzwidth="0x1" edc:desc="Setting this bit to 1 initiates the Discharged phase of an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="ENABLE" edc:nzwidth="0x1" edc:desc="Clearing the bit to 0 causes the RC_ID interface to enter the Reset state, gating its clocks, clearing the status bits in this register and entering \n       into its lowest power state. Setting this bit to 1 causes the RC_ID interface to enter the Armed phase of an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="CLOCK_SET" edc:nzwidth="0x2" edc:desc="This field selects the frequency of the Counter circuit clock. This field must retain the same value as long as the ENABLE bit in this register is 1."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RC_ID0" edc:cname="RC_ID0_DAT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x40001404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RC_ID0">
            <edc:SFRFieldDef edc:cname="RCID_DATA" edc:nzwidth="0x10" edc:desc="Reads of this register provide the result of an RC_ID measurement."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x78" edc:_addr="0x40001408"/>
      <edc:SFRDef ltx:memberofperipheral="RC_ID1" edc:cname="RC_ID1_CTRL" edc:nzwidth="0x20" edc:access="----------------------nnnn---nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3C7" edc:_addr="0x40001480">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RC_ID1">
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This bit is cleared to 0 when the RC_ID interface is in the Reset phase, and set to 1 when the interface completes an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="TC" edc:nzwidth="0x1" edc:desc="This bit is cleared to 0 when the RC_ID interface is in the Reset phase, and set to 1 when the interface completes the Discharged phase of an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="CY_ER" edc:nzwidth="0x1" edc:desc="This bit is 1 if an RC_ID measurement encountered an error and the reading in the RC_ID Data Register is invalid. This bit is cleared to 0 when the RC_ID interface is in the Reset phase."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="START" edc:nzwidth="0x1" edc:desc="Setting this bit to 1 initiates the Discharged phase of an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="ENABLE" edc:nzwidth="0x1" edc:desc="Clearing the bit to 0 causes the RC_ID interface to enter the Reset state, gating its clocks, clearing the status bits in this register and entering \n       into its lowest power state. Setting this bit to 1 causes the RC_ID interface to enter the Armed phase of an RC_ID measurement."/>
            <edc:SFRFieldDef edc:cname="CLOCK_SET" edc:nzwidth="0x2" edc:desc="This field selects the frequency of the Counter circuit clock. This field must retain the same value as long as the ENABLE bit in this register is 1."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RC_ID1" edc:cname="RC_ID1_DAT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x40001484">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RC_ID1">
            <edc:SFRFieldDef edc:cname="RCID_DATA" edc:nzwidth="0x10" edc:desc="Reads of this register provide the result of an RC_ID measurement."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xF78" edc:_addr="0x40001488"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_MAIN" edc:cname="ACTRST" edc:nzwidth="0x8" edc:access="------nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3" edc:_addr="0x40002400">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_MAIN">
            <edc:SFRFieldDef edc:cname="ACT" edc:nzwidth="0x1" edc:desc="Enable the blocks operation. (R/WS)\n                 1=Enable block. Each individual channel must be enabled separately.\n                 0=Disable all channels."/>
            <edc:SFRFieldDef edc:cname="SOFT_RST" edc:nzwidth="0x1" edc:desc="Soft reset the entire module. This bit is self-clearing."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002401"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_MAIN" edc:cname="DATA_PKT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002404"/>
      <edc:AdjustPoint edc:offset="0x38" edc:_addr="0x40002408"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002440">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n              1=Enable channel(block). Each individual channel must be enabled separately.\n                0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002441"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002444"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002448"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000244C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002450">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n                0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n            This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n            1=Channel is done\n              0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n          3: Error detected by the DMA\n          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n         1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n               0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n                 1=The DMA Channel is busy (FSM is not IDLE)\n              0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n       1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n            0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n       The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n            The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n              1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n             1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                 0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n              Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002454">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n         1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n             after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n          1=Hardware Flow Control is requesting after the transfer has completed\n           0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n      A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n              A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n                 1=Memory Start Address equals Memory End Address\n           0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002455"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002458">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n            1=Enable Interrupt\n                   0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n            1=Enable Interrupt\n              0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n             1=Enable Interrupt\n                      0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7" edc:_addr="0x40002459"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="CRC_EN" edc:nzwidth="0x20" edc:access="------------------------------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3" edc:_addr="0x40002460">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="MODE" edc:nzwidth="0x1" edc:desc="1=Enable the calculation of CRC-32 for DMA Channel N\n           0=Disable the calculation of CRC-32 for DMA Channel N"/>
            <edc:SFRFieldDef edc:cname="POST_TRANS" edc:nzwidth="0x1" edc:desc="The bit enables the transfer of the calculated CRC-32 after the completion of the DMA transaction.\n        If the DMA transaction is aborted by either firmware or an internal bus error, the transfer will not occur.\n           If the target of the DMA transfer is a device and the device signaled the termination of the DMA transaction,\n          the CRC post transfer will not occur.\n           1=Enable the transfer of CRC-32 for DMA Channel N after the DMA transaction completes\n           0=Disable the automatic transfer of the CRC"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="CRC_DATA" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002464">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="CRC" edc:nzwidth="0x20" edc:desc="Writes to this register initialize the CRC generator. Reads from this register return the output of the\n          CRC that is calculated from the data transferred by DMA Channel N. The output of the CRC generator is bit-reversed\n        and inverted on reads, as required by the CRC-32-IEEE definition. A CRC can be accumulated across multiple DMA transactions\n          on Channel N. If it is necessary to save the intermediate CRC value, the result of the read of this register must be\n              bit-reversed and inverted before being written back to this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN00" edc:cname="CRC_POST_STS" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x40002468">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN00">
            <edc:SFRFieldDef edc:cname="CRC_DONE" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n        It is cleared to '0b' when the DMA controller starts a new transfer on the channel."/>
            <edc:SFRFieldDef edc:cname="CRC_RUNNING" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n          It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n           to '0b' when the post-transfer completes."/>
            <edc:SFRFieldDef edc:cname="CRC_DATA_DONE" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the DMA controller has completed the post-transfer of the CRC data.\n       This bit is cleared to '0b' when the a new DMA transfer starts."/>
            <edc:SFRFieldDef edc:cname="CRC_DATA_READY" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the DMA controller is processing the post-transfer of the CRC data.\n        This bit is cleared to '0b' when the post-transfer completes."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0x4000246C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002480">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n           1=Enable channel(block). Each individual channel must be enabled separately.\n               0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002481"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002484"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002488"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000248C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002490">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n         1= There is a transfer request from the Master Device\n             0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n              This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n               0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n           3: Error detected by the DMA\n           2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n            1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n                0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n         The Flow Control Interface is a bus with each master concatenated onto it.\n                   This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n         The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n                 1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n               0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n           1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n      Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002494">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="BUS_ERROR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n         1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n          after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n           1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n      A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n                A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n           1=Memory Start Address equals Memory End Address\n         0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002495"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002498">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n       1=Enable Interrupt\n          0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n             0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n         1=Enable Interrupt\n                  0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7" edc:_addr="0x40002499"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="FILL_EN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x400024A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="MODE" edc:nzwidth="0x1" edc:desc="1=Enable the calculation of CRC-32 for DMA Channel N\n             0=Disable the calculation of CRC-32 for DMA Channel N"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="FILL_DATA" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400024A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="DATA" edc:nzwidth="0x20" edc:desc="This is the data pattern used to fill memory."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN01" edc:cname="FILL_STS" edc:nzwidth="0x20" edc:access="------------------------------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3" edc:_addr="0x400024A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN01">
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n        It is cleared to '0b' when the DMA controller starts a new transfer on the channel."/>
            <edc:SFRFieldDef edc:cname="RUNNING" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n          It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n             to '0b' when the post-transfer completes."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0x400024AC"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x400024C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN02">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x400024C1"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400024C4"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400024C8"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400024CC"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x400024D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN02">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x400024D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN02">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x400024D5"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN02" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x400024D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN02">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x400024D9"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002500">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN03">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002501"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002504"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002508"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000250C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002510">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN03">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002514">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN03">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002515"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN03" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002518">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN03">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002519"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002540">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN04">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002541"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002544"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002548"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000254C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002550">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN04">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002554">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN04">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002555"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN04" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002558">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN04">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002559"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002580">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN05">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002581"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002584"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002588"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000258C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002590">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN05">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002594">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN05">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002595"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN05" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002598">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN05">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002599"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x400025C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN06">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x400025C1"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400025C4"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400025C8"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400025CC"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x400025D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN06">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x400025D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN06">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x400025D5"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN06" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x400025D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN06">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x400025D9"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002600">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN07">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002601"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002604"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002608"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000260C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002610">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN07">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002614">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN07">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002615"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN07" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002618">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN07">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002619"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002640">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN08">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002641"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002644"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002648"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000264C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002650">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN08">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002654">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN08">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002655"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN08" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002658">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN08">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002659"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002680">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN09">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002681"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002684"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002688"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000268C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002690">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN09">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002694">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN09">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002695"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN09" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002698">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN09">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002699"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x400026C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN10">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x400026C1"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400026C4"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400026C8"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400026CC"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x400026D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN10">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x400026D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN10">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x400026D5"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN10" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x400026D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN10">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x400026D9"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002700">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN11">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002701"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002704"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002708"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000270C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002710">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN11">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002714">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN11">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002715"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN11" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002718">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN11">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002719"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002740">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN12">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002741"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002744"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002748"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000274C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002750">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN12">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002754">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN12">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002755"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN12" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002758">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN12">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x27" edc:_addr="0x40002759"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x40002780">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN13">
            <edc:SFRFieldDef edc:cname="CHN" edc:nzwidth="0x1" edc:desc="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n        1=Enable channel(block). Each individual channel must be enabled separately.\n          0=Disable channel(block)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002781"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="MSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002784"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="MEND" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40002788"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="DSTART" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000278C"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------nn-nnnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x37FFF3F" edc:_addr="0x40002790">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN13">
            <edc:SFRFieldDef edc:cname="RUN" edc:nzwidth="0x1" edc:desc="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n          1= This channel is enabled and will service transfer requests\n             0=This channel is disabled. All transfer requests are ignored."/>
            <edc:SFRFieldDef edc:cname="REQ" edc:nzwidth="0x1" edc:desc="This is a status field.\n            1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n           This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n          1=Channel is done\n          0=Channel is not done or it is OFF"/>
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x2" edc:desc="This is a status signal. The status decode is listed in priority order with the highest priority first.\n             3: Error detected by the DMA\n                          2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term\n      1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address\n          0: DMA Channel Control:Run is Disabled (0x0)">
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="3: Error detected by the DMA" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="EXT_DONE" edc:desc="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="LOC_DONE" edc:desc="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0: DMA Channel Control:Run is Disabled (0x0)" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BUSY" edc:nzwidth="0x1" edc:desc="This is a status signal.\n               1=The DMA Channel is busy (FSM is not IDLE)\n             0=The DMA Channel is not busy (FSM is IDLE)"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TX_DIR" edc:nzwidth="0x1" edc:desc="This determines the direction of the DMA Transfer.\n              1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n              0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address"/>
            <edc:SFRFieldDef edc:cname="HW_FLOW_CTRL_DEV" edc:nzwidth="0x7" edc:desc="This is the device that is connected to this channel as its Hardware Flow Control master.\n        The Flow Control Interface is a bus with each master concatenated onto it.\n                This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n       The Flow Control Interface Port list is dma_req, dma_term, and dma_done."/>
            <edc:SFRFieldDef edc:cname="INC_MEM_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Memory Address.\n               1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n           0=Do nothing"/>
            <edc:SFRFieldDef edc:cname="INC_DEV_ADDR" edc:nzwidth="0x1" edc:desc="This will enable an auto-increment to the DMA Channel Device Address.\n              1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n              0: Do nothing"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)."/>
            <edc:SFRFieldDef edc:cname="DIS_HW_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode."/>
            <edc:SFRFieldDef edc:cname="TRANS_SIZE" edc:nzwidth="0x3" edc:desc="This is the transfer size in Bytes of each Data Packet transfer.\n         Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TRANS_GO" edc:nzwidth="0x1" edc:desc="This is used for the Firmware Flow Control DMA transfer."/>
            <edc:SFRFieldDef edc:cname="TRANS_ABORT" edc:nzwidth="0x1" edc:desc="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="ISTS" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002794">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN13">
            <edc:SFRFieldDef edc:cname="BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n        1: Error detected. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n           after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n            1=Hardware Flow Control is requesting after the transfer has completed\n         0=No Hardware Flow Control event"/>
            <edc:SFRFieldDef edc:cname="DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n        A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n            A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n             1=Memory Start Address equals Memory End Address\n                0=Memory Start Address does not equal Memory End Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40002795"/>
      <edc:SFRDef ltx:memberofperipheral="DMA_CHAN13" edc:cname="IEN" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x40002798">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="DMA_CHAN13">
            <edc:SFRFieldDef edc:cname="STS_EN_BUS_ERR" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n         1=Enable Interrupt\n            0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_FLOW_CTRL" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n        1=Enable Interrupt\n         0=Disable Interrupt"/>
            <edc:SFRFieldDef edc:cname="STS_EN_DONE" edc:nzwidth="0x1" edc:desc="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n           1=Enable Interrupt\n           0=Disable Interrupt"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x1867" edc:_addr="0x40002799"/>
      <edc:MuxedSFRDef edc:nzwidth="0x20" edc:_addr="0x40004000">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="WCTRL" edc:nzwidth="0x20" edc:access="------------------------ww--wwww" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xCF" edc:_addr="0x40004000">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
                <edc:SFRFieldDef edc:cname="ACK" edc:nzwidth="0x1" edc:desc="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device."/>
                <edc:SFRFieldDef edc:cname="STO" edc:nzwidth="0x1" edc:desc="See STA description"/>
                <edc:SFRFieldDef edc:cname="STA" edc:nzwidth="0x1" edc:desc="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition"/>
                <edc:SFRFieldDef edc:cname="ENI" edc:nzwidth="0x1" edc:desc="Enable Interrupt bit (ENI) controls the Interrupt Interface"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="ESO" edc:nzwidth="0x1" edc:desc="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="RSTS" edc:nzwidth="0x20" edc:access="------------------------rrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004000">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
                <edc:SFRFieldDef edc:cname="NBB" edc:nzwidth="0x1" edc:desc="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible."/>
                <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus"/>
                <edc:SFRFieldDef edc:cname="AAS" edc:nzwidth="0x1" edc:desc="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received"/>
                <edc:SFRFieldDef edc:cname="LRB_AD0" edc:nzwidth="0x1" edc:desc="The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave."/>
                <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected."/>
                <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x1" edc:desc="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode."/>
                <edc:SFRFieldDef edc:cname="SAD" edc:nzwidth="0x1" edc:desc="SMBus Address Decoded (SAD)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="Pending Interrupt bit"/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="OWN_ADDR" edc:nzwidth="0x20" edc:access="-----------------nnnnnnn-nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F7F" edc:_addr="0x40004004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="ADDR1" edc:nzwidth="0x7" edc:desc="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ADDR2" edc:nzwidth="0x7" edc:desc="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="I2CDATA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004008"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="RSVD10" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004009"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="RSVD11" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000400A"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="RSVD12" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000400B"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="MCMD_u32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--nnnnnn------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF3F03" edc:_addr="0x4000400C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="MRUN" edc:nzwidth="0x1" edc:desc="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."/>
            <edc:SFRFieldDef edc:cname="MPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="START0" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STARTN" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STOP" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Stop bit after the transaction completes."/>
            <edc:SFRFieldDef edc:cname="PEC_TERM" edc:nzwidth="0x1" edc:desc="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."/>
            <edc:SFRFieldDef edc:cname="READM" edc:nzwidth="0x1" edc:desc="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."/>
            <edc:SFRFieldDef edc:cname="RD_PEC" edc:nzwidth="0x1" edc:desc="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="SCMD_u32" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnn-----nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF07" edc:_addr="0x40004010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="SRUN" edc:nzwidth="0x1" edc:desc="Setting this bit to 1 enables the Slave State Machine to operate."/>
            <edc:SFRFieldDef edc:cname="SPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."/>
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x1" edc:desc="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is set to the number of bytes software expects to send to the Master."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="PEC" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x8" edc:desc="The SMBus Packet Error Check (PEC) byte."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="RSHTM" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000001001101" edc:mclr="00000000000000000000000001001101" edc:impl="0xFF" edc:_addr="0x40004018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="RSHTM" edc:nzwidth="0x8" edc:desc="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="RSVD2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000401C"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="COMPL_u32" edc:nzwidth="0x20" edc:access="nnn---nn--nnn-nn-nnnnnnn-nnnnn--" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE33B7F7C" edc:_addr="0x40004020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="DTEN" edc:nzwidth="0x1" edc:desc="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="MCEN" edc:nzwidth="0x1" edc:desc="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="SCEN" edc:nzwidth="0x1" edc:desc="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="BIDEN" edc:nzwidth="0x1" edc:desc="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="TIMERR" edc:nzwidth="0x1" edc:desc="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DTO" edc:nzwidth="0x1" edc:desc="DTO is the Device Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MCTO" edc:nzwidth="0x1" edc:desc="MCTO is the Master Cumulative Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SCTO" edc:nzwidth="0x1" edc:desc="SCTO is the Slave Cumulative Time-out bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDL" edc:nzwidth="0x1" edc:desc="CHDL is the clock high time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDH" edc:nzwidth="0x1" edc:desc="CHDH is the bus idle time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SNAKR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."/>
            <edc:SFRFieldDef edc:cname="STR" edc:nzwidth="0x1" edc:desc="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SPROT" edc:nzwidth="0x1" edc:desc="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."/>
            <edc:SFRFieldDef edc:cname="REP_RD" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."/>
            <edc:SFRFieldDef edc:cname="REP_WR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="MNAKX" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MTR" edc:nzwidth="0x1" edc:desc="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="IDLE" edc:nzwidth="0x1" edc:desc="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="IDLSC" edc:nzwidth="0x20" edc:access="----nnnnnnnnnnnn----nnnnnnnnnnnn" edc:por="00000001111111000000000111101101" edc:mclr="00000001111111000000000111101101" edc:impl="0xFFF0FFF" edc:_addr="0x40004024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="FAIR_BUS_IDL_MIN" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="FAIR_IDL_DLY" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="CFG_u32" edc:nzwidth="0x20" edc:access="nnnn--------nnnn-nnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF00F7FFF" edc:_addr="0x40004028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="PORT_SEL" edc:nzwidth="0x4" edc:desc="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."/>
            <edc:SFRFieldDef edc:cname="TCEN" edc:nzwidth="0x1" edc:desc="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"/>
            <edc:SFRFieldDef edc:cname="SLOW_CLK" edc:nzwidth="0x1" edc:desc="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="PECEN" edc:nzwidth="0x1" edc:desc="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"/>
            <edc:SFRFieldDef edc:cname="FEN" edc:nzwidth="0x1" edc:desc="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."/>
            <edc:SFRFieldDef edc:cname="DSA" edc:nzwidth="0x1" edc:desc="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"/>
            <edc:SFRFieldDef edc:cname="FAIR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the MCTP Fairness protocol is in effect."/>
            <edc:SFRFieldDef edc:cname="TEST0" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="GC_DIS" edc:nzwidth="0x1" edc:desc="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FLUSH_SXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_SRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="EN_AAS" edc:nzwidth="0x1" edc:desc="0: Disable the AAS, 1: Enable the AAS Interrupt"/>
            <edc:SFRFieldDef edc:cname="ENIDI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENMI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENSI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="BUSCLK" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000100111101001111" edc:mclr="00000000000000000100111101001111" edc:impl="0xFFFF" edc:_addr="0x4000402C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="LOW_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock."/>
            <edc:SFRFieldDef edc:cname="HIGH_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="BLKID" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004030">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="ID" edc:nzwidth="0x8" edc:desc="Block ID."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004031"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="BLKREV" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004034">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="REV" edc:nzwidth="0x8" edc:desc="Block Revision Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004035"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="BBCTRL" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000001100000" edc:mclr="00000000000000000000000001100000" edc:impl="0x7F" edc:_addr="0x40004038">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="BBEN" edc:nzwidth="0x1" edc:desc="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled"/>
            <edc:SFRFieldDef edc:cname="CLDIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output"/>
            <edc:SFRFieldDef edc:cname="DADIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output"/>
            <edc:SFRFieldDef edc:cname="BBCLK" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBDAT" edc:nzwidth="0x1" edc:desc="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBCLKI" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK."/>
            <edc:SFRFieldDef edc:cname="BBDATI" edc:nzwidth="0x1" edc:desc="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="TEST" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000403C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x8" edc:desc="This register must not be written, or undesirable results may occur."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x4000403D"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="DATATM" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00001100010011010101000000000110" edc:mclr="00001100010011010101000000000110" edc:_addr="0x40004040">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="DATA_HOLD" edc:nzwidth="0x8" edc:desc="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low."/>
            <edc:SFRFieldDef edc:cname="RESTART_SETUP" edc:nzwidth="0x8" edc:desc="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition."/>
            <edc:SFRFieldDef edc:cname="STOP_SETUP" edc:nzwidth="0x8" edc:desc="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition."/>
            <edc:SFRFieldDef edc:cname="FIRST_START_HOLD" edc:nzwidth="0x8" edc:desc="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="TMOUTSC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="01001011100111001100001011000111" edc:mclr="01001011100111001100001011000111" edc:_addr="0x40004044">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="CLK_HIGH_TIM_OUT" edc:nzwidth="0x8" edc:desc="Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2"/>
            <edc:SFRFieldDef edc:cname="SLV_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024"/>
            <edc:SFRFieldDef edc:cname="MAST_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512"/>
            <edc:SFRFieldDef edc:cname="BUS_IDLE_MIN" edc:nzwidth="0x8" edc:desc="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="SLV_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004048">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="STXB" edc:nzwidth="0x8" edc:desc="STXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="SLV_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000404C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="SRXB" edc:nzwidth="0x8" edc:desc="SRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="MTR_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="MTXB" edc:nzwidth="0x8" edc:desc="MTXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="MTR_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="MRXB" edc:nzwidth="0x8" edc:desc="MRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x40004058"/>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="WAKE_STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004060">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="START_BIT_DET" edc:nzwidth="0x1" edc:desc="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB0" edc:cname="WAKE_EN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004064">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB0">
            <edc:SFRFieldDef edc:cname="START_DET_INT_EN" edc:nzwidth="0x1" edc:desc="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n      1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x398" edc:_addr="0x40004068"/>
      <edc:MuxedSFRDef edc:nzwidth="0x20" edc:_addr="0x40004400">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="WCTRL" edc:nzwidth="0x20" edc:access="------------------------ww--wwww" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xCF" edc:_addr="0x40004400">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
                <edc:SFRFieldDef edc:cname="ACK" edc:nzwidth="0x1" edc:desc="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device."/>
                <edc:SFRFieldDef edc:cname="STO" edc:nzwidth="0x1" edc:desc="See STA description"/>
                <edc:SFRFieldDef edc:cname="STA" edc:nzwidth="0x1" edc:desc="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition"/>
                <edc:SFRFieldDef edc:cname="ENI" edc:nzwidth="0x1" edc:desc="Enable Interrupt bit (ENI) controls the Interrupt Interface"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="ESO" edc:nzwidth="0x1" edc:desc="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="RSTS" edc:nzwidth="0x20" edc:access="------------------------rrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004400">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
                <edc:SFRFieldDef edc:cname="NBB" edc:nzwidth="0x1" edc:desc="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible."/>
                <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus"/>
                <edc:SFRFieldDef edc:cname="AAS" edc:nzwidth="0x1" edc:desc="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received"/>
                <edc:SFRFieldDef edc:cname="LRB_AD0" edc:nzwidth="0x1" edc:desc="The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave."/>
                <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected."/>
                <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x1" edc:desc="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode."/>
                <edc:SFRFieldDef edc:cname="SAD" edc:nzwidth="0x1" edc:desc="SMBus Address Decoded (SAD)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="Pending Interrupt bit"/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="OWN_ADDR" edc:nzwidth="0x20" edc:access="-----------------nnnnnnn-nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F7F" edc:_addr="0x40004404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="ADDR1" edc:nzwidth="0x7" edc:desc="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ADDR2" edc:nzwidth="0x7" edc:desc="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="I2CDATA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004408"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="RSVD10" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004409"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="RSVD11" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000440A"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="RSVD12" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000440B"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="MCMD_u32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--nnnnnn------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF3F03" edc:_addr="0x4000440C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="MRUN" edc:nzwidth="0x1" edc:desc="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."/>
            <edc:SFRFieldDef edc:cname="MPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="START0" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STARTN" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STOP" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Stop bit after the transaction completes."/>
            <edc:SFRFieldDef edc:cname="PEC_TERM" edc:nzwidth="0x1" edc:desc="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."/>
            <edc:SFRFieldDef edc:cname="READM" edc:nzwidth="0x1" edc:desc="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."/>
            <edc:SFRFieldDef edc:cname="RD_PEC" edc:nzwidth="0x1" edc:desc="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="SCMD_u32" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnn-----nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF07" edc:_addr="0x40004410">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="SRUN" edc:nzwidth="0x1" edc:desc="Setting this bit to 1 enables the Slave State Machine to operate."/>
            <edc:SFRFieldDef edc:cname="SPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."/>
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x1" edc:desc="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is set to the number of bytes software expects to send to the Master."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="PEC" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004414">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x8" edc:desc="The SMBus Packet Error Check (PEC) byte."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="RSHTM" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000001001101" edc:mclr="00000000000000000000000001001101" edc:impl="0xFF" edc:_addr="0x40004418">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="RSHTM" edc:nzwidth="0x8" edc:desc="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="RSVD2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000441C"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="COMPL_u32" edc:nzwidth="0x20" edc:access="nnn---nn--nnn-nn-nnnnnnn-nnnnn--" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE33B7F7C" edc:_addr="0x40004420">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="DTEN" edc:nzwidth="0x1" edc:desc="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="MCEN" edc:nzwidth="0x1" edc:desc="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="SCEN" edc:nzwidth="0x1" edc:desc="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="BIDEN" edc:nzwidth="0x1" edc:desc="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="TIMERR" edc:nzwidth="0x1" edc:desc="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DTO" edc:nzwidth="0x1" edc:desc="DTO is the Device Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MCTO" edc:nzwidth="0x1" edc:desc="MCTO is the Master Cumulative Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SCTO" edc:nzwidth="0x1" edc:desc="SCTO is the Slave Cumulative Time-out bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDL" edc:nzwidth="0x1" edc:desc="CHDL is the clock high time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDH" edc:nzwidth="0x1" edc:desc="CHDH is the bus idle time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SNAKR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."/>
            <edc:SFRFieldDef edc:cname="STR" edc:nzwidth="0x1" edc:desc="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SPROT" edc:nzwidth="0x1" edc:desc="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."/>
            <edc:SFRFieldDef edc:cname="REP_RD" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."/>
            <edc:SFRFieldDef edc:cname="REP_WR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="MNAKX" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MTR" edc:nzwidth="0x1" edc:desc="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="IDLE" edc:nzwidth="0x1" edc:desc="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="IDLSC" edc:nzwidth="0x20" edc:access="----nnnnnnnnnnnn----nnnnnnnnnnnn" edc:por="00000001111111000000000111101101" edc:mclr="00000001111111000000000111101101" edc:impl="0xFFF0FFF" edc:_addr="0x40004424">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="FAIR_BUS_IDL_MIN" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="FAIR_IDL_DLY" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="CFG_u32" edc:nzwidth="0x20" edc:access="nnnn--------nnnn-nnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF00F7FFF" edc:_addr="0x40004428">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="PORT_SEL" edc:nzwidth="0x4" edc:desc="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."/>
            <edc:SFRFieldDef edc:cname="TCEN" edc:nzwidth="0x1" edc:desc="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"/>
            <edc:SFRFieldDef edc:cname="SLOW_CLK" edc:nzwidth="0x1" edc:desc="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="PECEN" edc:nzwidth="0x1" edc:desc="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"/>
            <edc:SFRFieldDef edc:cname="FEN" edc:nzwidth="0x1" edc:desc="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."/>
            <edc:SFRFieldDef edc:cname="DSA" edc:nzwidth="0x1" edc:desc="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"/>
            <edc:SFRFieldDef edc:cname="FAIR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the MCTP Fairness protocol is in effect."/>
            <edc:SFRFieldDef edc:cname="TEST0" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="GC_DIS" edc:nzwidth="0x1" edc:desc="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FLUSH_SXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_SRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="EN_AAS" edc:nzwidth="0x1" edc:desc="0: Disable the AAS, 1: Enable the AAS Interrupt"/>
            <edc:SFRFieldDef edc:cname="ENIDI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENMI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENSI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="BUSCLK" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000100111101001111" edc:mclr="00000000000000000100111101001111" edc:impl="0xFFFF" edc:_addr="0x4000442C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="LOW_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock."/>
            <edc:SFRFieldDef edc:cname="HIGH_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="BLKID" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004430">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="ID" edc:nzwidth="0x8" edc:desc="Block ID."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004431"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="BLKREV" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004434">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="REV" edc:nzwidth="0x8" edc:desc="Block Revision Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004435"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="BBCTRL" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000001100000" edc:mclr="00000000000000000000000001100000" edc:impl="0x7F" edc:_addr="0x40004438">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="BBEN" edc:nzwidth="0x1" edc:desc="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled"/>
            <edc:SFRFieldDef edc:cname="CLDIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output"/>
            <edc:SFRFieldDef edc:cname="DADIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output"/>
            <edc:SFRFieldDef edc:cname="BBCLK" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBDAT" edc:nzwidth="0x1" edc:desc="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBCLKI" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK."/>
            <edc:SFRFieldDef edc:cname="BBDATI" edc:nzwidth="0x1" edc:desc="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="TEST" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000443C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x8" edc:desc="This register must not be written, or undesirable results may occur."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x4000443D"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="DATATM" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00001100010011010101000000000110" edc:mclr="00001100010011010101000000000110" edc:_addr="0x40004440">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="DATA_HOLD" edc:nzwidth="0x8" edc:desc="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low."/>
            <edc:SFRFieldDef edc:cname="RESTART_SETUP" edc:nzwidth="0x8" edc:desc="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition."/>
            <edc:SFRFieldDef edc:cname="STOP_SETUP" edc:nzwidth="0x8" edc:desc="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition."/>
            <edc:SFRFieldDef edc:cname="FIRST_START_HOLD" edc:nzwidth="0x8" edc:desc="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="TMOUTSC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="01001011100111001100001011000111" edc:mclr="01001011100111001100001011000111" edc:_addr="0x40004444">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="CLK_HIGH_TIM_OUT" edc:nzwidth="0x8" edc:desc="Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2"/>
            <edc:SFRFieldDef edc:cname="SLV_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024"/>
            <edc:SFRFieldDef edc:cname="MAST_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512"/>
            <edc:SFRFieldDef edc:cname="BUS_IDLE_MIN" edc:nzwidth="0x8" edc:desc="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="SLV_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004448">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="STXB" edc:nzwidth="0x8" edc:desc="STXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="SLV_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000444C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="SRXB" edc:nzwidth="0x8" edc:desc="SRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="MTR_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004450">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="MTXB" edc:nzwidth="0x8" edc:desc="MTXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="MTR_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004454">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="MRXB" edc:nzwidth="0x8" edc:desc="MRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x40004458"/>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="WAKE_STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004460">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="START_BIT_DET" edc:nzwidth="0x1" edc:desc="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB1" edc:cname="WAKE_EN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004464">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB1">
            <edc:SFRFieldDef edc:cname="START_DET_INT_EN" edc:nzwidth="0x1" edc:desc="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n      1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x398" edc:_addr="0x40004468"/>
      <edc:MuxedSFRDef edc:nzwidth="0x20" edc:_addr="0x40004800">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="WCTRL" edc:nzwidth="0x20" edc:access="------------------------ww--wwww" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xCF" edc:_addr="0x40004800">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
                <edc:SFRFieldDef edc:cname="ACK" edc:nzwidth="0x1" edc:desc="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device."/>
                <edc:SFRFieldDef edc:cname="STO" edc:nzwidth="0x1" edc:desc="See STA description"/>
                <edc:SFRFieldDef edc:cname="STA" edc:nzwidth="0x1" edc:desc="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition"/>
                <edc:SFRFieldDef edc:cname="ENI" edc:nzwidth="0x1" edc:desc="Enable Interrupt bit (ENI) controls the Interrupt Interface"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="ESO" edc:nzwidth="0x1" edc:desc="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="RSTS" edc:nzwidth="0x20" edc:access="------------------------rrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004800">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
                <edc:SFRFieldDef edc:cname="NBB" edc:nzwidth="0x1" edc:desc="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible."/>
                <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus"/>
                <edc:SFRFieldDef edc:cname="AAS" edc:nzwidth="0x1" edc:desc="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received"/>
                <edc:SFRFieldDef edc:cname="LRB_AD0" edc:nzwidth="0x1" edc:desc="The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave."/>
                <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected."/>
                <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x1" edc:desc="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode."/>
                <edc:SFRFieldDef edc:cname="SAD" edc:nzwidth="0x1" edc:desc="SMBus Address Decoded (SAD)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="Pending Interrupt bit"/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="OWN_ADDR" edc:nzwidth="0x20" edc:access="-----------------nnnnnnn-nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F7F" edc:_addr="0x40004804">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="ADDR1" edc:nzwidth="0x7" edc:desc="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ADDR2" edc:nzwidth="0x7" edc:desc="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="I2CDATA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004808"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="RSVD10" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004809"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="RSVD11" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000480A"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="RSVD12" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000480B"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="MCMD_u32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--nnnnnn------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF3F03" edc:_addr="0x4000480C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="MRUN" edc:nzwidth="0x1" edc:desc="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."/>
            <edc:SFRFieldDef edc:cname="MPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="START0" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STARTN" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STOP" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Stop bit after the transaction completes."/>
            <edc:SFRFieldDef edc:cname="PEC_TERM" edc:nzwidth="0x1" edc:desc="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."/>
            <edc:SFRFieldDef edc:cname="READM" edc:nzwidth="0x1" edc:desc="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."/>
            <edc:SFRFieldDef edc:cname="RD_PEC" edc:nzwidth="0x1" edc:desc="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="SCMD_u32" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnn-----nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF07" edc:_addr="0x40004810">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="SRUN" edc:nzwidth="0x1" edc:desc="Setting this bit to 1 enables the Slave State Machine to operate."/>
            <edc:SFRFieldDef edc:cname="SPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."/>
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x1" edc:desc="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is set to the number of bytes software expects to send to the Master."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="PEC" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004814">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x8" edc:desc="The SMBus Packet Error Check (PEC) byte."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="RSHTM" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000001001101" edc:mclr="00000000000000000000000001001101" edc:impl="0xFF" edc:_addr="0x40004818">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="RSHTM" edc:nzwidth="0x8" edc:desc="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="RSVD2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000481C"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="COMPL_u32" edc:nzwidth="0x20" edc:access="nnn---nn--nnn-nn-nnnnnnn-nnnnn--" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE33B7F7C" edc:_addr="0x40004820">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="DTEN" edc:nzwidth="0x1" edc:desc="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="MCEN" edc:nzwidth="0x1" edc:desc="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="SCEN" edc:nzwidth="0x1" edc:desc="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="BIDEN" edc:nzwidth="0x1" edc:desc="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="TIMERR" edc:nzwidth="0x1" edc:desc="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DTO" edc:nzwidth="0x1" edc:desc="DTO is the Device Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MCTO" edc:nzwidth="0x1" edc:desc="MCTO is the Master Cumulative Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SCTO" edc:nzwidth="0x1" edc:desc="SCTO is the Slave Cumulative Time-out bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDL" edc:nzwidth="0x1" edc:desc="CHDL is the clock high time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDH" edc:nzwidth="0x1" edc:desc="CHDH is the bus idle time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SNAKR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."/>
            <edc:SFRFieldDef edc:cname="STR" edc:nzwidth="0x1" edc:desc="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SPROT" edc:nzwidth="0x1" edc:desc="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."/>
            <edc:SFRFieldDef edc:cname="REP_RD" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."/>
            <edc:SFRFieldDef edc:cname="REP_WR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="MNAKX" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MTR" edc:nzwidth="0x1" edc:desc="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="IDLE" edc:nzwidth="0x1" edc:desc="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="IDLSC" edc:nzwidth="0x20" edc:access="----nnnnnnnnnnnn----nnnnnnnnnnnn" edc:por="00000001111111000000000111101101" edc:mclr="00000001111111000000000111101101" edc:impl="0xFFF0FFF" edc:_addr="0x40004824">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="FAIR_BUS_IDL_MIN" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="FAIR_IDL_DLY" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="CFG_u32" edc:nzwidth="0x20" edc:access="nnnn--------nnnn-nnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF00F7FFF" edc:_addr="0x40004828">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="PORT_SEL" edc:nzwidth="0x4" edc:desc="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."/>
            <edc:SFRFieldDef edc:cname="TCEN" edc:nzwidth="0x1" edc:desc="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"/>
            <edc:SFRFieldDef edc:cname="SLOW_CLK" edc:nzwidth="0x1" edc:desc="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="PECEN" edc:nzwidth="0x1" edc:desc="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"/>
            <edc:SFRFieldDef edc:cname="FEN" edc:nzwidth="0x1" edc:desc="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."/>
            <edc:SFRFieldDef edc:cname="DSA" edc:nzwidth="0x1" edc:desc="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"/>
            <edc:SFRFieldDef edc:cname="FAIR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the MCTP Fairness protocol is in effect."/>
            <edc:SFRFieldDef edc:cname="TEST0" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="GC_DIS" edc:nzwidth="0x1" edc:desc="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FLUSH_SXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_SRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="EN_AAS" edc:nzwidth="0x1" edc:desc="0: Disable the AAS, 1: Enable the AAS Interrupt"/>
            <edc:SFRFieldDef edc:cname="ENIDI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENMI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENSI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="BUSCLK" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000100111101001111" edc:mclr="00000000000000000100111101001111" edc:impl="0xFFFF" edc:_addr="0x4000482C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="LOW_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock."/>
            <edc:SFRFieldDef edc:cname="HIGH_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="BLKID" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004830">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="ID" edc:nzwidth="0x8" edc:desc="Block ID."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004831"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="BLKREV" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004834">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="REV" edc:nzwidth="0x8" edc:desc="Block Revision Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004835"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="BBCTRL" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000001100000" edc:mclr="00000000000000000000000001100000" edc:impl="0x7F" edc:_addr="0x40004838">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="BBEN" edc:nzwidth="0x1" edc:desc="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled"/>
            <edc:SFRFieldDef edc:cname="CLDIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output"/>
            <edc:SFRFieldDef edc:cname="DADIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output"/>
            <edc:SFRFieldDef edc:cname="BBCLK" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBDAT" edc:nzwidth="0x1" edc:desc="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBCLKI" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK."/>
            <edc:SFRFieldDef edc:cname="BBDATI" edc:nzwidth="0x1" edc:desc="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="TEST" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000483C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x8" edc:desc="This register must not be written, or undesirable results may occur."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x4000483D"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="DATATM" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00001100010011010101000000000110" edc:mclr="00001100010011010101000000000110" edc:_addr="0x40004840">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="DATA_HOLD" edc:nzwidth="0x8" edc:desc="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low."/>
            <edc:SFRFieldDef edc:cname="RESTART_SETUP" edc:nzwidth="0x8" edc:desc="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition."/>
            <edc:SFRFieldDef edc:cname="STOP_SETUP" edc:nzwidth="0x8" edc:desc="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition."/>
            <edc:SFRFieldDef edc:cname="FIRST_START_HOLD" edc:nzwidth="0x8" edc:desc="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="TMOUTSC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="01001011100111001100001011000111" edc:mclr="01001011100111001100001011000111" edc:_addr="0x40004844">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="CLK_HIGH_TIM_OUT" edc:nzwidth="0x8" edc:desc="Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2"/>
            <edc:SFRFieldDef edc:cname="SLV_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024"/>
            <edc:SFRFieldDef edc:cname="MAST_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512"/>
            <edc:SFRFieldDef edc:cname="BUS_IDLE_MIN" edc:nzwidth="0x8" edc:desc="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="SLV_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004848">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="STXB" edc:nzwidth="0x8" edc:desc="STXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="SLV_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000484C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="SRXB" edc:nzwidth="0x8" edc:desc="SRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="MTR_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004850">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="MTXB" edc:nzwidth="0x8" edc:desc="MTXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="MTR_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004854">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="MRXB" edc:nzwidth="0x8" edc:desc="MRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x40004858"/>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="WAKE_STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004860">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="START_BIT_DET" edc:nzwidth="0x1" edc:desc="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB2" edc:cname="WAKE_EN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004864">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB2">
            <edc:SFRFieldDef edc:cname="START_DET_INT_EN" edc:nzwidth="0x1" edc:desc="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n      1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x398" edc:_addr="0x40004868"/>
      <edc:MuxedSFRDef edc:nzwidth="0x20" edc:_addr="0x40004C00">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="WCTRL" edc:nzwidth="0x20" edc:access="------------------------ww--wwww" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xCF" edc:_addr="0x40004C00">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
                <edc:SFRFieldDef edc:cname="ACK" edc:nzwidth="0x1" edc:desc="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device."/>
                <edc:SFRFieldDef edc:cname="STO" edc:nzwidth="0x1" edc:desc="See STA description"/>
                <edc:SFRFieldDef edc:cname="STA" edc:nzwidth="0x1" edc:desc="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition"/>
                <edc:SFRFieldDef edc:cname="ENI" edc:nzwidth="0x1" edc:desc="Enable Interrupt bit (ENI) controls the Interrupt Interface"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="ESO" edc:nzwidth="0x1" edc:desc="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="RSTS" edc:nzwidth="0x20" edc:access="------------------------rrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004C00">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
                <edc:SFRFieldDef edc:cname="NBB" edc:nzwidth="0x1" edc:desc="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible."/>
                <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus"/>
                <edc:SFRFieldDef edc:cname="AAS" edc:nzwidth="0x1" edc:desc="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received"/>
                <edc:SFRFieldDef edc:cname="LRB_AD0" edc:nzwidth="0x1" edc:desc="The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave."/>
                <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected."/>
                <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x1" edc:desc="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode."/>
                <edc:SFRFieldDef edc:cname="SAD" edc:nzwidth="0x1" edc:desc="SMBus Address Decoded (SAD)"/>
                <edc:SFRFieldDef edc:cname="PIN" edc:nzwidth="0x1" edc:desc="Pending Interrupt bit"/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="OWN_ADDR" edc:nzwidth="0x20" edc:access="-----------------nnnnnnn-nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F7F" edc:_addr="0x40004C04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="ADDR1" edc:nzwidth="0x7" edc:desc="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ADDR2" edc:nzwidth="0x7" edc:desc="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="I2CDATA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C08"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="RSVD10" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C09"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="RSVD11" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C0A"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="RSVD12" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C0B"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="MCMD_u32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--nnnnnn------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF3F03" edc:_addr="0x40004C0C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="MRUN" edc:nzwidth="0x1" edc:desc="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented."/>
            <edc:SFRFieldDef edc:cname="MPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="START0" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STARTN" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter."/>
            <edc:SFRFieldDef edc:cname="STOP" edc:nzwidth="0x1" edc:desc="If this bit is 1, send a Stop bit after the transaction completes."/>
            <edc:SFRFieldDef edc:cname="PEC_TERM" edc:nzwidth="0x1" edc:desc="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0."/>
            <edc:SFRFieldDef edc:cname="READM" edc:nzwidth="0x1" edc:desc="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0."/>
            <edc:SFRFieldDef edc:cname="RD_PEC" edc:nzwidth="0x1" edc:desc="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="SCMD_u32" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnn-----nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF07" edc:_addr="0x40004C10">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="SRUN" edc:nzwidth="0x1" edc:desc="Setting this bit to 1 enables the Slave State Machine to operate."/>
            <edc:SFRFieldDef edc:cname="SPROCEED" edc:nzwidth="0x1" edc:desc="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively."/>
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x1" edc:desc="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="WR_CNT" edc:nzwidth="0x8" edc:desc="This field is set to the number of bytes software expects to send to the Master."/>
            <edc:SFRFieldDef edc:cname="RD_CNT" edc:nzwidth="0x8" edc:desc="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="PEC" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004C14">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="PEC" edc:nzwidth="0x8" edc:desc="The SMBus Packet Error Check (PEC) byte."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="RSHTM" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000001001101" edc:mclr="00000000000000000000000001001101" edc:impl="0xFF" edc:_addr="0x40004C18">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="RSHTM" edc:nzwidth="0x8" edc:desc="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="RSVD2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40004C1C"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="COMPL_u32" edc:nzwidth="0x20" edc:access="nnn---nn--nnn-nn-nnnnnnn-nnnnn--" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE33B7F7C" edc:_addr="0x40004C20">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="DTEN" edc:nzwidth="0x1" edc:desc="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="MCEN" edc:nzwidth="0x1" edc:desc="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="SCEN" edc:nzwidth="0x1" edc:desc="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="BIDEN" edc:nzwidth="0x1" edc:desc="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled."/>
            <edc:SFRFieldDef edc:cname="TIMERR" edc:nzwidth="0x1" edc:desc="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DTO" edc:nzwidth="0x1" edc:desc="DTO is the Device Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MCTO" edc:nzwidth="0x1" edc:desc="MCTO is the Master Cumulative Time-out bit. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SCTO" edc:nzwidth="0x1" edc:desc="SCTO is the Slave Cumulative Time-out bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDL" edc:nzwidth="0x1" edc:desc="CHDL is the clock high time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="CHDH" edc:nzwidth="0x1" edc:desc="CHDH is the bus idle time-out detect bit(R/WC)"/>
            <edc:SFRFieldDef edc:cname="BER" edc:nzwidth="0x1" edc:desc="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:SFRFieldDef edc:cname="LAB" edc:nzwidth="0x1" edc:desc="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SNAKR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface."/>
            <edc:SFRFieldDef edc:cname="STR" edc:nzwidth="0x1" edc:desc="0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SPROT" edc:nzwidth="0x1" edc:desc="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0."/>
            <edc:SFRFieldDef edc:cname="REP_RD" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation."/>
            <edc:SFRFieldDef edc:cname="REP_WR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="MNAKX" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MTR" edc:nzwidth="0x1" edc:desc="0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="IDLE" edc:nzwidth="0x1" edc:desc="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)"/>
            <edc:SFRFieldDef edc:cname="MDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SDONE" edc:nzwidth="0x1" edc:desc="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="IDLSC" edc:nzwidth="0x20" edc:access="----nnnnnnnnnnnn----nnnnnnnnnnnn" edc:por="00000001111111000000000111101101" edc:mclr="00000001111111000000000111101101" edc:impl="0xFFF0FFF" edc:_addr="0x40004C24">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="FAIR_BUS_IDL_MIN" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="FAIR_IDL_DLY" edc:nzwidth="0xC" edc:desc="This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="CFG_u32" edc:nzwidth="0x20" edc:access="nnnn--------nnnn-nnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF00F7FFF" edc:_addr="0x40004C28">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="PORT_SEL" edc:nzwidth="0x4" edc:desc="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair."/>
            <edc:SFRFieldDef edc:cname="TCEN" edc:nzwidth="0x1" edc:desc="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled"/>
            <edc:SFRFieldDef edc:cname="SLOW_CLK" edc:nzwidth="0x1" edc:desc="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4."/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="PECEN" edc:nzwidth="0x1" edc:desc="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled"/>
            <edc:SFRFieldDef edc:cname="FEN" edc:nzwidth="0x1" edc:desc="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state."/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation."/>
            <edc:SFRFieldDef edc:cname="DSA" edc:nzwidth="0x1" edc:desc="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode"/>
            <edc:SFRFieldDef edc:cname="FAIR" edc:nzwidth="0x1" edc:desc="If this bit is 1, the MCTP Fairness protocol is in effect."/>
            <edc:SFRFieldDef edc:cname="TEST0" edc:nzwidth="0x1" edc:desc="Must be always written with 0."/>
            <edc:SFRFieldDef edc:cname="GC_DIS" edc:nzwidth="0x1" edc:desc="This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FLUSH_SXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_SRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MXBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:SFRFieldDef edc:cname="FLUSH_MRBUF" edc:nzwidth="0x1" edc:desc="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit."/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="EN_AAS" edc:nzwidth="0x1" edc:desc="0: Disable the AAS, 1: Enable the AAS Interrupt"/>
            <edc:SFRFieldDef edc:cname="ENIDI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENMI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled."/>
            <edc:SFRFieldDef edc:cname="ENSI" edc:nzwidth="0x1" edc:desc="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="BUSCLK" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000100111101001111" edc:mclr="00000000000000000100111101001111" edc:impl="0xFFFF" edc:_addr="0x40004C2C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="LOW_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock."/>
            <edc:SFRFieldDef edc:cname="HIGH_PER" edc:nzwidth="0x8" edc:desc="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="BLKID" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C30">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="ID" edc:nzwidth="0x8" edc:desc="Block ID."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004C31"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="BLKREV" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C34">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="REV" edc:nzwidth="0x8" edc:desc="Block Revision Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004C35"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="BBCTRL" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000001100000" edc:mclr="00000000000000000000000001100000" edc:impl="0x7F" edc:_addr="0x40004C38">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="BBEN" edc:nzwidth="0x1" edc:desc="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled"/>
            <edc:SFRFieldDef edc:cname="CLDIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output"/>
            <edc:SFRFieldDef edc:cname="DADIR" edc:nzwidth="0x1" edc:desc="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output"/>
            <edc:SFRFieldDef edc:cname="BBCLK" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBDAT" edc:nzwidth="0x1" edc:desc="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'"/>
            <edc:SFRFieldDef edc:cname="BBCLKI" edc:nzwidth="0x1" edc:desc="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK."/>
            <edc:SFRFieldDef edc:cname="BBDATI" edc:nzwidth="0x1" edc:desc="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="TEST" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40004C3C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x8" edc:desc="This register must not be written, or undesirable results may occur."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40004C3D"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="DATATM" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00001100010011010101000000000110" edc:mclr="00001100010011010101000000000110" edc:_addr="0x40004C40">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="DATA_HOLD" edc:nzwidth="0x8" edc:desc="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low."/>
            <edc:SFRFieldDef edc:cname="RESTART_SETUP" edc:nzwidth="0x8" edc:desc="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition."/>
            <edc:SFRFieldDef edc:cname="STOP_SETUP" edc:nzwidth="0x8" edc:desc="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition."/>
            <edc:SFRFieldDef edc:cname="FIRST_START_HOLD" edc:nzwidth="0x8" edc:desc="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="TMOUTSC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="01001011100111001100001011000111" edc:mclr="01001011100111001100001011000111" edc:_addr="0x40004C44">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="CLK_HIGH_TIM_OUT" edc:nzwidth="0x8" edc:desc="Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2"/>
            <edc:SFRFieldDef edc:cname="SLV_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024"/>
            <edc:SFRFieldDef edc:cname="MAST_CUM_TIM_OUT" edc:nzwidth="0x8" edc:desc="Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512"/>
            <edc:SFRFieldDef edc:cname="BUS_IDLE_MIN" edc:nzwidth="0x8" edc:desc="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="SLV_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004C48">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="STXB" edc:nzwidth="0x8" edc:desc="STXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="SLV_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004C4C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="SRXB" edc:nzwidth="0x8" edc:desc="SRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="MTR_TXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004C50">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="MTXB" edc:nzwidth="0x8" edc:desc="MTXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="MTR_RXB" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40004C54">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="MRXB" edc:nzwidth="0x8" edc:desc="MRXB"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x40004C58"/>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="WAKE_STS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004C60">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="START_BIT_DET" edc:nzwidth="0x1" edc:desc="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SMB3" edc:cname="WAKE_EN" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x40004C64">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SMB3">
            <edc:SFRFieldDef edc:cname="START_DET_INT_EN" edc:nzwidth="0x1" edc:desc="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n      1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x798" edc:_addr="0x40004C68"/>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="MODE" edc:nzwidth="0x20" edc:access="-------nnnnnnnnn-----nnn------nn" edc:por="00000000000000000000000000001111" edc:mclr="00000000000000000000000000001111" edc:impl="0x1FF0703" edc:_addr="0x40005400">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="ACT" edc:nzwidth="0x1" edc:desc="This bit is used to activate the QMSPI block.\n             1=Enabled. The block is fully operational\n           0=Disabled. Clocks are gated to conserve power and the output signals are set to their inactive state."/>
            <edc:SFRFieldDef edc:cname="SOFT_RST" edc:nzwidth="0x1" edc:desc="Writing this bit with a 1 will reset the Quad SPI block. It is self-clearing."/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="CPOL" edc:nzwidth="0x1" edc:desc="Polarity of the SPI clock line when there are no transactions in process. 1=SPI Clock starts High; 0=SPI Clock starts Low."/>
            <edc:SFRFieldDef edc:cname="CHPA_MOSI" edc:nzwidth="0x1" edc:desc="Clock phase of the Master data out. Common SPI modes require this field to be programmed with the same value as CHPA_MISO in this register.\n         e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n              If CPOL=1: 1=Data changes on the falling edge of the SPI clock; 0=Data changes on the rising edge of the SPI clock\n             If CPOL=0: 1=Data changes on the rising edge of the SPI clock; 0=Data changes on the falling edge of the SPI clock"/>
            <edc:SFRFieldDef edc:cname="CHPA_MISO" edc:nzwidth="0x1" edc:desc="Clock phase of the Master data in. Common SPI modes require this field to be programmed with the same value as CHPA_MOSI in this register.\n        e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n           If CPOL=1: 1=Data are captured on the rising edge of the SPI clock; 0=Data are captured on the falling edge of the SPI clock\n                If CPOL=0: 1=Data are captured on the falling edge of the SPI clock; 0=Data are captured on the rising edge of the SPI clock"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="CLK_DIV" edc:nzwidth="0x9" edc:desc="The SPI clock divide in number of system clocks. A value of 1 divides the master clock by 1, a value of 255 divides the master clock by 255.\n       A value of 0 divides the master clock by 256."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:_addr="0x40005404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="TX_MODE" edc:nzwidth="0x2" edc:desc="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either \n            TX_TRANSFER_ENABLE or RX_TRANSFER_ENABLE must be 0.\n                  3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."/>
            <edc:SFRFieldDef edc:cname="TX_TRANS_EN" edc:nzwidth="0x2" edc:desc="This field bit selects the transmit function of the SPI interface.\n                3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used.\n                2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n               1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                 0=Transmit is Disabled. Not data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."/>
            <edc:SFRFieldDef edc:cname="TX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either\n        the interface reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n           1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                 3=DMA is enabled and set to 4 Bytes.\n          0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware"/>
            <edc:SFRFieldDef edc:cname="RX_TRANS_EN" edc:nzwidth="0x1" edc:desc="This bit enables the receive function of the SPI interface.\n             1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer\n             0=Receive is disabled"/>
            <edc:SFRFieldDef edc:cname="RX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO until either the interface\n          reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n         1=DMA is enabled.and set to 1 Byte\n                2=DMA is enabled and set to 2 Bytes\n              3=DMA is enabled and set to 4 Bytes\n              0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware"/>
            <edc:SFRFieldDef edc:cname="CLOSE_TRANS_EN" edc:nzwidth="0x1" edc:desc="This selects what action is taken at the end of a transfer. When the transaction closes, the Chip Select de-asserts, the SPI \n       interface returns to IDLE and the DMA interface terminates When Description Buffers are in use this bit must be set only on the Last Buffer.\n         1=The transaction is terminated\n                 0=The transaction is not terminated"/>
            <edc:SFRFieldDef edc:cname="TRANS_UNITS" edc:nzwidth="0x2" edc:desc="3=TRANSFER_LENGTH defined in units of 16-byte segments\n            2=TRANSFER_LENGTH defined in units of 4-byte segments\n              1=TRANSFER_LENGTH defined in units of bytes\n          0=TRANSFER_LENGTH defined in units of bits."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUFF_PTR" edc:nzwidth="0x4" edc:desc="This field selects the first buffer used if Description Buffers are enabled."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUFF_EN" edc:nzwidth="0x1" edc:desc="This enables the Description Buffers to be used.\n                1=Description Buffers in use. The first buffer is defined in DESCRIPTION_BUFFER_POINTER\n          0=Description Buffers disabled."/>
            <edc:SFRFieldDef edc:cname="TRANS_LEN" edc:nzwidth="0xF" edc:desc="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TRANS_LEN_BITS.\n          A value of 0 means an infinite length transfer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="EXE" edc:nzwidth="0x20" edc:access="-----------------------------nnn" edc:por="00000000000000000000000000000001" edc:mclr="00000000000000000000000000000001" edc:impl="0x7" edc:_addr="0x40005408">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="START" edc:nzwidth="0x1" edc:desc="Writing a 1 to this bit will start the SPI transfer. Writing a 0 to this bit has no effect. This bit is self-clearing.\n          This bit must not be set to 1 if the field STOP in this register is set to 1."/>
            <edc:SFRFieldDef edc:cname="STOP" edc:nzwidth="0x1" edc:desc="Writing a 1 to this bit will stop any transfer in progress at the next byte boundary. Writing a 0 to this bit has no effect.\n       This bit is self clearing. This bit must not be set to 1 if the field START in this register is set to 1."/>
            <edc:SFRFieldDef edc:cname="CLR_DAT_BUFF" edc:nzwidth="0x1" edc:desc="Writing a 1 to this bit will clear out the Transmit and Receive FIFOs.\n       Any data stored in the FIFOs is discarded and all count fields are reset.\n            Writing a 0 to this bit has no effect. This bit is self clearing."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="IFCTRL" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000100101" edc:mclr="00000000000000000000000000100101" edc:impl="0xFF" edc:_addr="0x4000540C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="WR_PRCT_OUT_VAL" edc:nzwidth="0x1" edc:desc="This bit sets the value on the WRITE PROTECT SPI Output Port if it is driven.\n       1=WRITE PROTECT is driven to 1; 0=WRITE PROTECT is driven to 0"/>
            <edc:SFRFieldDef edc:cname="WR_PRCT_OUT_EN" edc:nzwidth="0x1" edc:desc="1=WRITE PROTECT SPI Output Port is driven\n       0=WRITE PROTECT SPI Output Port is not driven"/>
            <edc:SFRFieldDef edc:cname="HLD_OUT_VAL" edc:nzwidth="0x1" edc:desc="This bit sets the value on the HOLD SPI Output Port if it is driven.\n        1=HOLD is driven to 1; 0=HOLD is driven to 0."/>
            <edc:SFRFieldDef edc:cname="HLD_OUT_EN" edc:nzwidth="0x1" edc:desc="1=HOLD SPI Output Port is driven\n           0=HOLD SPI Output Port is not driven."/>
            <edc:SFRFieldDef edc:cname="PD_ON_NOT_SEL" edc:nzwidth="0x1" edc:desc="1=Enable pull-down resistors on Receive pins while the SPI Chip Select signal is not asserted\n       0=No pull-down resistors enabled on Receive pins"/>
            <edc:SFRFieldDef edc:cname="PU_ON_NOTSEL" edc:nzwidth="0x1" edc:desc="1=Enable pull-up resistors on Receive pins while the SPI Chip Select signal is not asserted\n       0=No pull-up resistors enabled on Receive pins."/>
            <edc:SFRFieldDef edc:cname="PD_ON_NOTDRIVEN" edc:nzwidth="0x1" edc:desc="1=Enable pull-down resistors on Transmit pins while the pins are not driven\n                 0=No pull-down resistors enabled ion Transmit pins."/>
            <edc:SFRFieldDef edc:cname="PU_ON_NOTDRIVEN" edc:nzwidth="0x1" edc:desc="1=Enable pull-up resistors on Transmit pins while the pins are not driven\n          0=No pull-up resistors enabled ion Transmit pins."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="STS" edc:nzwidth="0x20" edc:access="----nnnn-------nnnnnnnnn---nnnnn" edc:por="00000000000000000010000000000000" edc:mclr="00000000000000000010000000000000" edc:impl="0xF01FF1F" edc:_addr="0x40005410">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="TRANS_COMPL" edc:nzwidth="0x1" edc:desc="In Manual Mode (neither DMA nor Description Buffers are enabled), this bit will be set to 1 when the transfer matches TRANSFER_LENGTH.\n      If DMA Mode is enabled, this bit will be set to 1 when DMA_COMPLETE is set to 1. In Description Buffer Mode, this bit will be set to 1 only when the Last Buffer completes its transfer.\n      In all cases, this bit will be set to 1 if the STOP bit is set to 1 and the controller has completed the current 8 bits being copied.\n               1=Transfer completed; 0=Transfer not complete."/>
            <edc:SFRFieldDef edc:cname="DMA_COMPL" edc:nzwidth="0x1" edc:desc="This field has no meaning if DMA is not enabled. This bit will be set to 1 when the DMA controller asserts the DONE signal to the SPI controller.\n      This occurs either when the SPI controller has closed the DMA transfer, or the DMA channel has completed its count. If both Transmit and Receive DMA transfers are\n              active, then this bit will only assert after both have completed. If CLOSE_TRANSFER_ENABLE is enabled, DMA_COMPLETE and TRANSFER_COMPLETE will be asserted simultaneously.\n          This status is not inhibited by the description buffers, so it can fire on all valid description buffers while operating in that mode.\n                 1=DMA completed; 0=DMA not completed."/>
            <edc:SFRFieldDef edc:cname="TX_BUFF_ERR" edc:nzwidth="0x1" edc:desc="1=Overflow error occurred (attempt to write to a full Transmit Buffer)\n             0=No overflow occurred."/>
            <edc:SFRFieldDef edc:cname="RX_BUFF_ERR" edc:nzwidth="0x1" edc:desc="1=Underflow error occurred (attempt to read from an empty Receive Buffer)\n         0=No underflow occurred."/>
            <edc:SFRFieldDef edc:cname="PRGM_ERR" edc:nzwidth="0x1" edc:desc="This bit if a programming error is detected.\n             1=Programming Error detected; 0=No programming error detected."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TX_BUFF_FULL" edc:nzwidth="0x1" edc:desc="1=The Transmit Buffer is full\n                   0=The Transmit Buffer is not full."/>
            <edc:SFRFieldDef edc:cname="TX_BUFF_EMP" edc:nzwidth="0x1" edc:desc="1=The Transmit Buffer is empty\n            0=The Transmit Buffer is not empty."/>
            <edc:SFRFieldDef edc:cname="TX_BUFF_REQ" edc:nzwidth="0x1" edc:desc="This status is asserted if the Transmit Buffer reaches a high water mark established by the TRANSMIT_BUFFER_TRIGGER field.\n              1=TRANSMIT_BUFFER_COUNT is less than or equal to TRANSMIT_BUFFER_TRIGGER; 0=TRANSMIT_BUFFER_COUNT is greater than TRANSMIT_BUFFER_TRIGGER."/>
            <edc:SFRFieldDef edc:cname="TX_BUFF_STALL" edc:nzwidth="0x1" edc:desc="1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to read from an empty Transmit Buffer)\n        0=No stalls occurred."/>
            <edc:SFRFieldDef edc:cname="RX_BUFF_FULL" edc:nzwidth="0x1" edc:desc="1=The Receive Buffer is full\n               0=The Receive Buffer is not full."/>
            <edc:SFRFieldDef edc:cname="RX_BUFF_EMP" edc:nzwidth="0x1" edc:desc="1=The Receive Buffer is empty\n             0=The Receive Buffer is not empty."/>
            <edc:SFRFieldDef edc:cname="RX_BUFF_REQ" edc:nzwidth="0x1" edc:desc="This status is asserted if the Receive Buffer reaches a high water mark established by the RECEIVE_BUFFER_TRIGGER field.\n             1=RECEIVE_BUFFER_COUNT is greater than or equal to RECEIVE_BUFFER_TRIGGER\n                 0=RECEIVE_BUFFER_COUNT is less than RECEIVE_BUFFER_TRIGGER."/>
            <edc:SFRFieldDef edc:cname="RX_BUFF_STALL" edc:nzwidth="0x1" edc:desc="1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to write to a full Receive Buffer)\n          0=No stalls occurred."/>
            <edc:SFRFieldDef edc:cname="TRANS_ACTIV" edc:nzwidth="0x1" edc:desc="1=A transfer is currently executing\n            0=No transfer currently in progress."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="CUR_DESCR_BUF" edc:nzwidth="0x4" edc:desc="This field shows the Description Buffer currently active. This field has no meaning if Description Buffers are not enabled."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="BUF_CNT_STS" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005414">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="TX_BUFF_CNT" edc:nzwidth="0x10" edc:desc="This is a count of the number of bytes currently valid in the Transmit Buffer."/>
            <edc:SFRFieldDef edc:cname="RX_BUFF_CNT" edc:nzwidth="0x10" edc:desc="This is a count of the number of bytes currently valid in the Receive Buffer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="IEN" edc:nzwidth="0x20" edc:access="-----------------nnn-nnn---nnnnn" edc:por="00000000000000000010000000000000" edc:mclr="00000000000000000010000000000000" edc:impl="0x771F" edc:_addr="0x40005418">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="TRANS_COMPL_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if TRANSFER_COMPLETE is asserted\n         0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="DMA_COMPL_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if DMA_COMPLETE is asserted\n           0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="TX_BUF_ERR_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if TRANSMIT_BUFFER_ERROR is asserted\n         0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="RX_BUF_ERR_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if RECEIVE_BUFFER_ERROR is asserted\n        0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="PRGM_ERR_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if PROGRAMMING_ERROR is asserted\n              0=Disable the interrupt."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TX_BUF_FULL_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if TRANSMIT_BUFFER_FULL is asserted\n         0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="TX_BUF_EMPTY_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if TRANSMIT_BUFFER_EMPTY is asserted\n           0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="TX_BUF_REQ_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if TRANSMIT_BUFFER_REQUEST is asserted\n         0=Disable the interrupt."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="RX_BUF_FUL_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if RECEIVE_BUFFER_FULL is asserted\n              0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="RX_BUF_EMPTY_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if RECEIVE_BUFFER_EMPTY is asserted\n            0=Disable the interrupt."/>
            <edc:SFRFieldDef edc:cname="RX_BUF_REQ_EN" edc:nzwidth="0x1" edc:desc="1=Enable an interrupt if RECEIVE_BUFFER_REQUEST is asserted\n         0=Disable the interrupt."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="BUF_CNT_TRIG" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000541C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="TX_BUF_TRIG" edc:nzwidth="0x10" edc:desc="An interrupt is triggered if the TRANSMIT_BUFFER_COUNT field is less than or equal to this value. A value of 0 disables the interrupt."/>
            <edc:SFRFieldDef edc:cname="RX_BUF_TRIG" edc:nzwidth="0x10" edc:desc="An interrupt is triggered if the RECEIVE_BUFFER_COUNT field is greater than or equal to this value. A value of 0 disables the interrupt."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="TX_FIFO_u32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005420">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="TX_BUF" edc:nzwidth="0x20" edc:desc="Writes to this register store data to be transmitted from the SPI Master to the external SPI Slave.\n              Writes to this block will be written to the Transmit FIFO. A 1 Byte write fills 1 byte of the FIFO. A Word write fills 2 Bytes and a Doubleword write fills 4 bytes.\n         The data must always be aligned to the bottom most byte (so 1 byte write is on bits [7:0] and Word write is on [15:0]).\n         An overflow condition, TRANSMIT_BUFFER_ERROR, if a write to a full FIFO occurs.\n       Write accesses to this register increment the TRANSMIT_BUFFER_COUNT field."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="RX_FIFO_u32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005424">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="RX_BUF" edc:nzwidth="0x20" edc:desc="Buffer that stores data from the external SPI Slave device to the SPI Master (this block), which is received over MISO or IO.\n        Reads from this register will empty the Rx FIFO. A 1 Byte read will have valid data on bits [7:0] and a Word read will have data on bits [15:0].\n                 It is possible to request more data than the FIFO has (underflow condition), but this will cause an error (Rx Buffer Error).\n             Read accesses to this register decrement the RECEIVE_BUFFER_COUNT field."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x40005428"/>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="DESCR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:_addr="0x40005430">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="INFACE_MOD" edc:nzwidth="0x2" edc:desc="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE \n       or RX_TRANSFER_ENABLE must be 0.3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."/>
            <edc:SFRFieldDef edc:cname="TX_TRANS_EN" edc:nzwidth="0x2" edc:desc="This field bit selects the transmit function of the SPI interface.\n          3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n            2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n          1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."/>
            <edc:SFRFieldDef edc:cname="TX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n               reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                  3=DMA is enabled and set to 4 Bytes                    0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="RX_TRANS_EN" edc:nzwidth="0x1" edc:desc="This bit enables the receive function of the SPI interface.\n           1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled."/>
            <edc:SFRFieldDef edc:cname="RX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO \n       until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n          2=DMA is enabled and set to 2 Bytes\n          3=DMA is enabled and set to 4 Bytes\n           0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="CLOSE_TRANS_EN" edc:nzwidth="0x1" edc:desc="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n          1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n                0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active"/>
            <edc:SFRFieldDef edc:cname="TRANS_LEN_BITS" edc:nzwidth="0x1" edc:desc="1=TRANSFER_LENGTH defined in bits\n             0=TRANSFER_LENGTH defined in bytes"/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_LAST" edc:nzwidth="0x1" edc:desc="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer \n       completes the TRANSFER_ COMPLETE status will be set to 1. If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer \n       will be activated, and no additional status will be asserted."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_NXT_PTR" edc:nzwidth="0x4" edc:desc="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. \n       This can point to the current buffer, creating an infinite loop."/>
            <edc:SFRFieldDef edc:cname="TX_LEN" edc:nzwidth="0x10" edc:desc="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TX_LEN_BITS. \n       A value of 0 means an infinite length transfer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="DESCR1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:_addr="0x40005434">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="INFACE_MOD" edc:nzwidth="0x2" edc:desc="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE \n       or RX_TRANSFER_ENABLE must be 0.3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."/>
            <edc:SFRFieldDef edc:cname="TX_TRANS_EN" edc:nzwidth="0x2" edc:desc="This field bit selects the transmit function of the SPI interface.\n          3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n            2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n          1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."/>
            <edc:SFRFieldDef edc:cname="TX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n               reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                  3=DMA is enabled and set to 4 Bytes                    0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="RX_TRANS_EN" edc:nzwidth="0x1" edc:desc="This bit enables the receive function of the SPI interface.\n           1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled."/>
            <edc:SFRFieldDef edc:cname="RX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO \n       until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n          2=DMA is enabled and set to 2 Bytes\n          3=DMA is enabled and set to 4 Bytes\n           0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="CLOSE_TRANS_EN" edc:nzwidth="0x1" edc:desc="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n          1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n                0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active"/>
            <edc:SFRFieldDef edc:cname="TRANS_LEN_BITS" edc:nzwidth="0x1" edc:desc="1=TRANSFER_LENGTH defined in bits\n             0=TRANSFER_LENGTH defined in bytes"/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_LAST" edc:nzwidth="0x1" edc:desc="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer \n       completes the TRANSFER_ COMPLETE status will be set to 1. If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer \n       will be activated, and no additional status will be asserted."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_NXT_PTR" edc:nzwidth="0x4" edc:desc="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. \n       This can point to the current buffer, creating an infinite loop."/>
            <edc:SFRFieldDef edc:cname="TX_LEN" edc:nzwidth="0x10" edc:desc="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TX_LEN_BITS. \n       A value of 0 means an infinite length transfer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="DESCR2" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:_addr="0x40005438">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="INFACE_MOD" edc:nzwidth="0x2" edc:desc="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE \n       or RX_TRANSFER_ENABLE must be 0.3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."/>
            <edc:SFRFieldDef edc:cname="TX_TRANS_EN" edc:nzwidth="0x2" edc:desc="This field bit selects the transmit function of the SPI interface.\n          3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n            2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n          1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."/>
            <edc:SFRFieldDef edc:cname="TX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n               reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                  3=DMA is enabled and set to 4 Bytes                    0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="RX_TRANS_EN" edc:nzwidth="0x1" edc:desc="This bit enables the receive function of the SPI interface.\n           1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled."/>
            <edc:SFRFieldDef edc:cname="RX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO \n       until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n          2=DMA is enabled and set to 2 Bytes\n          3=DMA is enabled and set to 4 Bytes\n           0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="CLOSE_TRANS_EN" edc:nzwidth="0x1" edc:desc="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n          1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n                0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active"/>
            <edc:SFRFieldDef edc:cname="TRANS_LEN_BITS" edc:nzwidth="0x1" edc:desc="1=TRANSFER_LENGTH defined in bits\n             0=TRANSFER_LENGTH defined in bytes"/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_LAST" edc:nzwidth="0x1" edc:desc="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer \n       completes the TRANSFER_ COMPLETE status will be set to 1. If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer \n       will be activated, and no additional status will be asserted."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_NXT_PTR" edc:nzwidth="0x4" edc:desc="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. \n       This can point to the current buffer, creating an infinite loop."/>
            <edc:SFRFieldDef edc:cname="TX_LEN" edc:nzwidth="0x10" edc:desc="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TX_LEN_BITS. \n       A value of 0 means an infinite length transfer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="DESCR3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:_addr="0x4000543C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="INFACE_MOD" edc:nzwidth="0x2" edc:desc="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE \n       or RX_TRANSFER_ENABLE must be 0.3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."/>
            <edc:SFRFieldDef edc:cname="TX_TRANS_EN" edc:nzwidth="0x2" edc:desc="This field bit selects the transmit function of the SPI interface.\n          3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n            2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n          1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."/>
            <edc:SFRFieldDef edc:cname="TX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n               reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                  3=DMA is enabled and set to 4 Bytes                    0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="RX_TRANS_EN" edc:nzwidth="0x1" edc:desc="This bit enables the receive function of the SPI interface.\n           1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled."/>
            <edc:SFRFieldDef edc:cname="RX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO \n       until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n          2=DMA is enabled and set to 2 Bytes\n          3=DMA is enabled and set to 4 Bytes\n           0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="CLOSE_TRANS_EN" edc:nzwidth="0x1" edc:desc="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n          1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n                0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active"/>
            <edc:SFRFieldDef edc:cname="TRANS_LEN_BITS" edc:nzwidth="0x1" edc:desc="1=TRANSFER_LENGTH defined in bits\n             0=TRANSFER_LENGTH defined in bytes"/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_LAST" edc:nzwidth="0x1" edc:desc="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer \n       completes the TRANSFER_ COMPLETE status will be set to 1. If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer \n       will be activated, and no additional status will be asserted."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_NXT_PTR" edc:nzwidth="0x4" edc:desc="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. \n       This can point to the current buffer, creating an infinite loop."/>
            <edc:SFRFieldDef edc:cname="TX_LEN" edc:nzwidth="0x10" edc:desc="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TX_LEN_BITS. \n       A value of 0 means an infinite length transfer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="QMSPI" edc:cname="DESCR4" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:_addr="0x40005440">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="QMSPI">
            <edc:SFRFieldDef edc:cname="INFACE_MOD" edc:nzwidth="0x2" edc:desc="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE \n       or RX_TRANSFER_ENABLE must be 0.3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode."/>
            <edc:SFRFieldDef edc:cname="TX_TRANS_EN" edc:nzwidth="0x2" edc:desc="This field bit selects the transmit function of the SPI interface.\n          3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n            2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n          1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled."/>
            <edc:SFRFieldDef edc:cname="TX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n               reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n                  2=DMA is enabled and set to 2 Bytes\n                  3=DMA is enabled and set to 4 Bytes                    0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="RX_TRANS_EN" edc:nzwidth="0x1" edc:desc="This bit enables the receive function of the SPI interface.\n           1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled."/>
            <edc:SFRFieldDef edc:cname="RX_DMA_EN" edc:nzwidth="0x2" edc:desc="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO \n       until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n            1=DMA is enabled.and set to 1 Byte\n          2=DMA is enabled and set to 2 Bytes\n          3=DMA is enabled and set to 4 Bytes\n           0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware."/>
            <edc:SFRFieldDef edc:cname="CLOSE_TRANS_EN" edc:nzwidth="0x1" edc:desc="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n          1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n                0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active"/>
            <edc:SFRFieldDef edc:cname="TRANS_LEN_BITS" edc:nzwidth="0x1" edc:desc="1=TRANSFER_LENGTH defined in bits\n             0=TRANSFER_LENGTH defined in bytes"/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_LAST" edc:nzwidth="0x1" edc:desc="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer \n       completes the TRANSFER_ COMPLETE status will be set to 1. If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer \n       will be activated, and no additional status will be asserted."/>
            <edc:SFRFieldDef edc:cname="DESCR_BUF_NXT_PTR" edc:nzwidth="0x4" edc:desc="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. \n       This can point to the current buffer, creating an infinite loop."/>
            <edc:SFRFieldDef edc:cname="TX_LEN" edc:nzwidth="0x10" edc:desc="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TX_LEN_BITS. \n       A value of 0 means an infinite length transfer."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3BC" edc:_addr="0x40005444"/>
      <edc:SFRDef ltx:memberofperipheral="PWM0" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005800"/>
      <edc:SFRDef ltx:memberofperipheral="PWM0" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005804"/>
      <edc:SFRDef ltx:memberofperipheral="PWM0" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x40005808">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM0">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000580C"/>
      <edc:SFRDef ltx:memberofperipheral="PWM1" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005810"/>
      <edc:SFRDef ltx:memberofperipheral="PWM1" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005814"/>
      <edc:SFRDef ltx:memberofperipheral="PWM1" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x40005818">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM1">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000581C"/>
      <edc:SFRDef ltx:memberofperipheral="PWM2" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005820"/>
      <edc:SFRDef ltx:memberofperipheral="PWM2" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005824"/>
      <edc:SFRDef ltx:memberofperipheral="PWM2" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x40005828">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM2">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000582C"/>
      <edc:SFRDef ltx:memberofperipheral="PWM3" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005830"/>
      <edc:SFRDef ltx:memberofperipheral="PWM3" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005834"/>
      <edc:SFRDef ltx:memberofperipheral="PWM3" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x40005838">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM3">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000583C"/>
      <edc:SFRDef ltx:memberofperipheral="PWM4" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005840"/>
      <edc:SFRDef ltx:memberofperipheral="PWM4" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005844"/>
      <edc:SFRDef ltx:memberofperipheral="PWM4" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x40005848">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM4">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000584C"/>
      <edc:SFRDef ltx:memberofperipheral="PWM5" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005850"/>
      <edc:SFRDef ltx:memberofperipheral="PWM5" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40005854"/>
      <edc:SFRDef ltx:memberofperipheral="PWM5" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x40005858">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM5">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x44" edc:_addr="0x4000585C"/>
      <edc:SFRDef ltx:memberofperipheral="PWM10" edc:cname="CNT_ON" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400058A0"/>
      <edc:SFRDef ltx:memberofperipheral="PWM10" edc:cname="CNT_OFF" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400058A4"/>
      <edc:SFRDef ltx:memberofperipheral="PWM10" edc:cname="CFG" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x400058A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PWM10">
            <edc:SFRFieldDef edc:cname="PWM_EN" edc:nzwidth="0x1" edc:desc="When the PWM_EN is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n      In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n      and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n      1=Enabled (default); 0=Disabled (gates clocks to save power)."/>
            <edc:SFRFieldDef edc:cname="CLK_SEL" edc:nzwidth="0x1" edc:desc="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n      1=CLOCK_LOW\n      0=CLOCK_HIGH"/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high."/>
            <edc:SFRFieldDef edc:cname="CLK_PRE_DIV" edc:nzwidth="0x4" edc:desc="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n      is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n      signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n      the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x754" edc:_addr="0x400058AC"/>
      <edc:SFRDef ltx:memberofperipheral="TACH0" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnn-nnn-n------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFDD03" edc:_addr="0x40006000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH0">
            <edc:SFRFieldDef edc:cname="OUTOF_LIM_EN" edc:nzwidth="0x1" edc:desc="OUTOF_LIM_EN  This bit is used to enable the TACH_OUT_OF_LIMIT_STATUS bit in the TACHx Status Register to generate an interrupt event.\n        1=Enable interrupt output from Tach block\n             0=Disable interrupt output from Tach block (default)"/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="EN  1= TACH Monitoring enabled, clocks enabled. 0= TACH Idle, clocks gated"/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="FILT_EN" edc:nzwidth="0x1" edc:desc="FILT_EN  This filter is used to remove high frequency glitches from Tach Input. When this filter is enabled, Tach input pulses less than two 100kHz_- Clk periods wide get filtered.\n         1= Filter enabled\n                0= Filter disabled (default)\n        It is recommended that the Tach input filter always be enabled."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="RD_MOD_SEL" edc:nzwidth="0x1" edc:desc="RD_MOD_SEL\n        1=Counter is incremented on the rising edge of the 100kHz_Clk input. The counter is latched into the TACHX_COUNTER field and reset when the programmed number of edges is detected.\n         0=Counter is incremented when Tach Input transitions from low-tohigh state (default)"/>
            <edc:SFRFieldDef edc:cname="EDGES" edc:nzwidth="0x2" edc:desc="EDGES A Tach signal is a square wave with a 50% duty cycle. Typically, two Tach periods represents one revolution of the fan. A Tach period consists of three Tach edges.\n       This programmed value represents the number of Tach edges that will be used to determine the interval for which the number of 100kHz_Clk pulses will be counted\n        11b=9 Tach edges (4 Tach periods)\n              10b=5 Tach edges (2 Tach periods)\n                  01b=3 Tach edges (1 Tach period)\n                  00b=2 Tach edges (1/2 Tach period)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_RDY_INT_EN" edc:nzwidth="0x1" edc:desc="CNT_RDY_INT_EN 1=Enable Count Ready interrupt from Tach block, 0=Disable Count Ready interrupt from Tach block"/>
            <edc:SFRFieldDef edc:cname="IN_INT_EN" edc:nzwidth="0x1" edc:desc="IN_INT_EN 1=Enable Tach Input toggle interrupt from Tach block, 0=Disable Tach Input toggle interrupt from Tach block"/>
            <edc:SFRFieldDef edc:cname="CNTR" edc:nzwidth="0x10" edc:desc="This 16-bit field contains the latched value of the internal Tach pulse counter, which may be configured by the \n       Tach Reading Mode Select field to operate as a free-running counter or to be gated by the Tach input signal."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH0" edc:cname="STS" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x40006004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH0">
            <edc:SFRFieldDef edc:cname="OUTOF_LIM_STS" edc:nzwidth="0x1" edc:desc="OUTOF_LIM_STS  1=Tach is outside of limits, 0=Tach is within limits (R/WC)"/>
            <edc:SFRFieldDef edc:cname="PIN_STS" edc:nzwidth="0x1" edc:desc="PIN_STS  1= Tach Input is high, 0= Tach Input is low"/>
            <edc:SFRFieldDef edc:cname="TOG_STS" edc:nzwidth="0x1" edc:desc="TOG_STS  1=Tach Input changed state (this bit is set on a low-to-high or high-tolow transition), 0=Tach stable (R/WC)"/>
            <edc:SFRFieldDef edc:cname="CNT_RDY_STS" edc:nzwidth="0x1" edc:desc="CNT_RDY_STS  1=Reading ready, 0=Reading not ready"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH0" edc:cname="LIM_HI" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40006008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH0">
            <edc:SFRFieldDef edc:cname="T_HIGH" edc:nzwidth="0x10" edc:desc="This value is compared with the value in the TACHX_COUNTER field. If the value in the counter is greater than the value\n            programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS status event may be enabled\n               to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx Control Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH0" edc:cname="LIM_LO" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x4000600C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH0">
            <edc:SFRFieldDef edc:cname="T_LOW" edc:nzwidth="0x10" edc:desc="This value is compared with the value in the TACHX_COUNTER field of the TACHx Control Register. If the value in the counter\n          is less than the value programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS\n              status event may be enabled to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx\n         Control Register To disable the TACH_OUT_OF_LIMIT_STATUS low event, program 0000h into this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH1" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnn-nnn-n------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFDD03" edc:_addr="0x40006010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH1">
            <edc:SFRFieldDef edc:cname="OUTOF_LIM_EN" edc:nzwidth="0x1" edc:desc="OUTOF_LIM_EN  This bit is used to enable the TACH_OUT_OF_LIMIT_STATUS bit in the TACHx Status Register to generate an interrupt event.\n        1=Enable interrupt output from Tach block\n             0=Disable interrupt output from Tach block (default)"/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="EN  1= TACH Monitoring enabled, clocks enabled. 0= TACH Idle, clocks gated"/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="FILT_EN" edc:nzwidth="0x1" edc:desc="FILT_EN  This filter is used to remove high frequency glitches from Tach Input. When this filter is enabled, Tach input pulses less than two 100kHz_- Clk periods wide get filtered.\n         1= Filter enabled\n                0= Filter disabled (default)\n        It is recommended that the Tach input filter always be enabled."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="RD_MOD_SEL" edc:nzwidth="0x1" edc:desc="RD_MOD_SEL\n        1=Counter is incremented on the rising edge of the 100kHz_Clk input. The counter is latched into the TACHX_COUNTER field and reset when the programmed number of edges is detected.\n         0=Counter is incremented when Tach Input transitions from low-tohigh state (default)"/>
            <edc:SFRFieldDef edc:cname="EDGES" edc:nzwidth="0x2" edc:desc="EDGES A Tach signal is a square wave with a 50% duty cycle. Typically, two Tach periods represents one revolution of the fan. A Tach period consists of three Tach edges.\n       This programmed value represents the number of Tach edges that will be used to determine the interval for which the number of 100kHz_Clk pulses will be counted\n        11b=9 Tach edges (4 Tach periods)\n              10b=5 Tach edges (2 Tach periods)\n                  01b=3 Tach edges (1 Tach period)\n                  00b=2 Tach edges (1/2 Tach period)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_RDY_INT_EN" edc:nzwidth="0x1" edc:desc="CNT_RDY_INT_EN 1=Enable Count Ready interrupt from Tach block, 0=Disable Count Ready interrupt from Tach block"/>
            <edc:SFRFieldDef edc:cname="IN_INT_EN" edc:nzwidth="0x1" edc:desc="IN_INT_EN 1=Enable Tach Input toggle interrupt from Tach block, 0=Disable Tach Input toggle interrupt from Tach block"/>
            <edc:SFRFieldDef edc:cname="CNTR" edc:nzwidth="0x10" edc:desc="This 16-bit field contains the latched value of the internal Tach pulse counter, which may be configured by the \n       Tach Reading Mode Select field to operate as a free-running counter or to be gated by the Tach input signal."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH1" edc:cname="STS" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x40006014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH1">
            <edc:SFRFieldDef edc:cname="OUTOF_LIM_STS" edc:nzwidth="0x1" edc:desc="OUTOF_LIM_STS  1=Tach is outside of limits, 0=Tach is within limits (R/WC)"/>
            <edc:SFRFieldDef edc:cname="PIN_STS" edc:nzwidth="0x1" edc:desc="PIN_STS  1= Tach Input is high, 0= Tach Input is low"/>
            <edc:SFRFieldDef edc:cname="TOG_STS" edc:nzwidth="0x1" edc:desc="TOG_STS  1=Tach Input changed state (this bit is set on a low-to-high or high-tolow transition), 0=Tach stable (R/WC)"/>
            <edc:SFRFieldDef edc:cname="CNT_RDY_STS" edc:nzwidth="0x1" edc:desc="CNT_RDY_STS  1=Reading ready, 0=Reading not ready"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH1" edc:cname="LIM_HI" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000001111111111111111" edc:mclr="00000000000000001111111111111111" edc:impl="0xFFFF" edc:_addr="0x40006018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH1">
            <edc:SFRFieldDef edc:cname="T_HIGH" edc:nzwidth="0x10" edc:desc="This value is compared with the value in the TACHX_COUNTER field. If the value in the counter is greater than the value\n            programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS status event may be enabled\n               to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx Control Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="TACH1" edc:cname="LIM_LO" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x4000601C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TACH1">
            <edc:SFRFieldDef edc:cname="T_LOW" edc:nzwidth="0x10" edc:desc="This value is compared with the value in the TACHX_COUNTER field of the TACHx Control Register. If the value in the counter\n          is less than the value programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS\n              status event may be enabled to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx\n         Control Register To disable the TACH_OUT_OF_LIMIT_STATUS low event, program 0000h into this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x13E0" edc:_addr="0x40006020"/>
      <edc:SFRDef ltx:memberofperipheral="RTOS" edc:cname="CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007400">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTOS">
            <edc:SFRFieldDef edc:cname="CNTR" edc:nzwidth="0x20" edc:desc="This register contains the current value of the RTOS Timer counter. This register should be read as a DWORD. There is no latching mechanism \n      of the upper bytes implemented if the register is accessed as a byte or word. Reading the register with byte or word operations may give incorrect results."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RTOS" edc:cname="PRLD" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTOS">
            <edc:SFRFieldDef edc:cname="PRELOAD" edc:nzwidth="0x20" edc:desc="The this register is loaded into the RTOS Timer counter either when the TIMER_START bit is written with a 1, or when the timer counter counts down to 0 and the AUTO_RELOAD bit is 1.\n       This register must be programmed with a new count value before the TIMER_START bit is set to 1. If this register is updated while the counter is operating, the new count value will only take effect if\n       the counter transitions form 1 to 0 while the AUTO_RELOAD bit is set."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RTOS" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="---------------------------nnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1F" edc:_addr="0x40007408">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTOS">
            <edc:SFRFieldDef edc:cname="BLK_EN" edc:nzwidth="0x1" edc:desc="1=RTOS timer counter is enabled\n      0=RTOS timer disabled. All register bits are reset to their default state"/>
            <edc:SFRFieldDef edc:cname="AU_RELOAD" edc:nzwidth="0x1" edc:desc="1=The the RTOS Timer Preload Register is loaded into the timer counter and the counter is restarted when the counter transitions from 1 to 0\n      0=The timer counter halts when it transitions from 1 to 0 and will not restart."/>
            <edc:SFRFieldDef edc:cname="TMR_STRT" edc:nzwidth="0x1" edc:desc="Writing a 1 to this bit will load the timer counter with the RTOS Timer Preload Register and start counting.\n       If the Preload Register is 0, counting will not start and this bit will be cleared to 0.\n      Writing a 0 to this bit will halt the counter and clear its contents to 0. The RTOS timer interrupt will not be generated. This bit is automatically cleared if the AUTO_RELOAD bit is 0 and the\n      timer counter transitions from 1 to 0."/>
            <edc:SFRFieldDef edc:cname="EXT_HW_HALT_EN" edc:nzwidth="0x1" edc:desc="1=The timer counter is halted when the external HALT signal is asserted. Counting is always enabled if HALT is de-asserted.\n      0=The HALT signal does not affect the RTOS Timer"/>
            <edc:SFRFieldDef edc:cname="FW_TMR_HALT" edc:nzwidth="0x1" edc:desc="1=The timer counter is halted. If the counter was running, clearing this bit will restart the counter from the value at which it halted\n      0=The timer counter, if enabled, will continue to run"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RTOS" edc:cname="SOFTIRQ" edc:nzwidth="0x20" edc:access="----------------------------wwww" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x4000740C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTOS">
            <edc:SFRFieldDef edc:cname="SWI0" edc:nzwidth="0x1" edc:desc="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."/>
            <edc:SFRFieldDef edc:cname="SWI1" edc:nzwidth="0x1" edc:desc="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."/>
            <edc:SFRFieldDef edc:cname="SWI2" edc:nzwidth="0x1" edc:desc="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."/>
            <edc:SFRFieldDef edc:cname="SWI3" edc:nzwidth="0x1" edc:desc="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n      Writes of a '0' have no effect. Reads return '0'."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7F0" edc:_addr="0x40007410"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="------------------------nn-nnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xDF" edc:_addr="0x40007C00">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
            <edc:SFRFieldDef edc:cname="ACT" edc:nzwidth="0x1" edc:desc="0: The ADC is disabled and placed in its lowest power state. 1: ADC block is enabled for operation."/>
            <edc:SFRFieldDef edc:cname="STRT_SIN" edc:nzwidth="0x1" edc:desc="(STRT_SIN) 0: The ADC Single Mode is disabled. 1: The ADC Single Mode is enabled. Note: This bit is self-clearing"/>
            <edc:SFRFieldDef edc:cname="STRT_RPT" edc:nzwidth="0x1" edc:desc="0: The ADC Repeat Mode is disabled. 1: The ADC Repeat Mode is enabled."/>
            <edc:SFRFieldDef edc:cname="PWR_SAV_DIS" edc:nzwidth="0x1" edc:desc="0: Power saving feature is enabled. 1: Power saving feature is disabled."/>
            <edc:SFRFieldDef edc:cname="SFT_RST" edc:nzwidth="0x1" edc:desc="(SFT_RST) 1: writing one causes a reset of the ADC block hardware (not the registers) 0: writing zero takes the ADC block out of reset"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="RPT_DONE_STS" edc:nzwidth="0x1" edc:desc="0: ADC repeat-sample conversion is not complete. 1: ADC repeat-sample conversion is completed. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SIN_DONE_STS" edc:nzwidth="0x1" edc:desc="0: ADC single-sample conversion is not complete. 1: ADC single-sample conversion is completed. (R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="DELAY" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
            <edc:SFRFieldDef edc:cname="STRT_DLY" edc:nzwidth="0x10" edc:desc="This field determines the starting delay before a conversion cycle is begun when Start_Repeat is written with a 1."/>
            <edc:SFRFieldDef edc:cname="RPT_DLY" edc:nzwidth="0x10" edc:desc="This field determines the interval between conversion cycles when Start_Repeat is 1."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_STS" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x40007C08">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
            <edc:SFRFieldDef edc:cname="STS" edc:nzwidth="0x10" edc:desc="All bits are cleared by being written with a '1'. 1=conversion of the corresponding ADC channel is complete;\n          0=conversion of the corresponding ADC channel is not complete. For enabled single cycles, the SINGLE_DONE_STATUS bit in the\n              ADC Control Register is also set after all enabled channel conversion are done; for enabled repeat cycles, the REPEAT_DONE_STATUS\n          in the ADC Control Register is also set after all enabled channel conversion are done."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="SNG_EN" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x40007C0C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
            <edc:SFRFieldDef edc:cname="S_EN" edc:nzwidth="0x10" edc:desc="Each bit in this field enables the corresponding ADC channel when a single cycle of conversions is started when the\n            START_SINGLE bit in the ADC Control Register is written with a 1. 1=single cycle conversions for this channel are enabled\n               0=single cycle conversions for this channel are disabled. Note: If this register is changed while a conversion."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="REPT_EN" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x40007C10">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ADC">
            <edc:SFRFieldDef edc:cname="R_EN" edc:nzwidth="0x10" edc:desc="Each bit in this field enables the corresponding ADC channel for each pass of the Repeated ADC Conversion that is\n         controlled by bit START_REPEAT in the ADC Control Register. 1=repeat conversions for this channel are enabled;\n               0=repeat conversions for this channel are disabled"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C14"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C18"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD2" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C1C"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C20"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD4" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C24"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD5" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C28"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD6" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C2C"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD7" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C30"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD8" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C34"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD9" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C38"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD10" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C3C"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD11" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C40"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD12" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C44"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD13" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C48"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD14" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C4C"/>
      <edc:SFRDef ltx:memberofperipheral="ADC" edc:cname="CHAN_RD15" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40007C50"/>
      <edc:AdjustPoint edc:offset="0xFAC" edc:_addr="0x40007C54"/>
      <edc:SFRDef ltx:memberofperipheral="TFDP" edc:cname="MSDATA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x40008C00"/>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x40008C01"/>
      <edc:SFRDef ltx:memberofperipheral="TFDP" edc:cname="CTRL" edc:nzwidth="0x8" edc:access="-nnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7F" edc:_addr="0x40008C04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="TFDP">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="Enable. 1=Clock enabled, 0=Clock is disabled (Default)"/>
            <edc:SFRFieldDef edc:cname="EDGE_SEL" edc:nzwidth="0x1" edc:desc="1= Data is shifted out on the falling edge of the debug clock, 0= Data is shifted out on the rising edge of the debug clock (Default)"/>
            <edc:SFRFieldDef edc:cname="DIVSEL" edc:nzwidth="0x2" edc:desc="Clock Divider Select."/>
            <edc:SFRFieldDef edc:cname="IP_DLY" edc:nzwidth="0x3" edc:desc="Inter-packet Delay. The delay is in terms of TFDP Debug output clocks."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7FB" edc:_addr="0x40008C05"/>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="ENABLE" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000001111" edc:mclr="00000000000000000000000000001111" edc:_addr="0x40009400"/>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000010" edc:mclr="00000000000000000000000000000010" edc:impl="0x7F" edc:_addr="0x40009404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GP_SPI0">
            <edc:SFRFieldDef edc:cname="LSBF" edc:nzwidth="0x1" edc:desc="Least Significant Bit First\n             1= The data is transferred in LSB-first order.\n        0= The data is transferred in MSB-first order. (default)"/>
            <edc:SFRFieldDef edc:cname="BIOEN" edc:nzwidth="0x1" edc:desc="Bidirectional Output Enable control.\n             1=The SPDOUT_Direction signal configures the SPDOUT signal as an output.\n         0=The SPDOUT_Direction signal configures the SPDOUT signal as an input."/>
            <edc:SFRFieldDef edc:cname="SPDIN_SEL" edc:nzwidth="0x2" edc:desc="[3:2] 1xb=SPDIN1 and SPDIN2. Select this option for Dual Mode\n        [3:2] 01b=SPDIN2 only. Select this option for Half Duplex\n                   [3:2] 00b=SPDIN1 only. Select this option for Full Duplex"/>
            <edc:SFRFieldDef edc:cname="SOFT_RST" edc:nzwidth="0x1" edc:desc="Soft Reset is a self-clearing bit. Writing zero to this bit has no effect. \n      Writing a one to this bit resets the entire SPI Interface, including all counters and registers back to their initial state."/>
            <edc:SFRFieldDef edc:cname="AUTO_RD" edc:nzwidth="0x1" edc:desc="Auto Read Enable.\n             1=A read of the SPI RX_DATA Register will clear both the RXBF status bit and the TXBE status bit\n          0=A read of the SPI RX_DATA Register will clear the RXBF status bit. The TXBE status bit will not be modified"/>
            <edc:SFRFieldDef edc:cname="CE" edc:nzwidth="0x1" edc:desc="SPI Chip Select Enable.\n                 1= SPI_CS# output signal is asserted, i.e., driven to logic '0' \n                    0= SPI_CS# output signal is deasserted, i.e., driven to logic '1'"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="STS" edc:nzwidth="0x20" edc:access="-----------------------------rrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7" edc:_addr="0x40009408">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GP_SPI0">
            <edc:SFRFieldDef edc:cname="TXBE" edc:nzwidth="0x1" edc:desc="1=TX_Data buffer is empty, 0=TX_Data buffer is not empty"/>
            <edc:SFRFieldDef edc:cname="RXBF" edc:nzwidth="0x1" edc:desc="1=RX_Data buffer is full, 0=RX_Data buffer is not full"/>
            <edc:SFRFieldDef edc:cname="ACTIVE" edc:nzwidth="0x1" edc:desc="ACTIVE status"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="TX_DAT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000940C"/>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="RX_DAT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40009410"/>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="CLK_CTRL" edc:nzwidth="0x20" edc:access="---------------------------n-nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x17" edc:_addr="0x40009414">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GP_SPI0">
            <edc:SFRFieldDef edc:cname="TCLKPH" edc:nzwidth="0x1" edc:desc="1=Valid data is clocked out on the first SPI_CLK edge on SPDOUT signal. The slave device should sample this data on the second and \n       following even SPI_CLK edges (i.e., sample data on falling edge) 0=Valid data is clocked out on the SPDOUT signal prior to the first SPI_CLK edge. \n       The slave device should sample this data on the first and following odd SPI_CLK edges (i.e., sample data on rising edge)"/>
            <edc:SFRFieldDef edc:cname="RCLKPH" edc:nzwidth="0x1" edc:desc="1=Valid data on SPDIN signal is expected after the first SPI_CLK edge. This data is sampled on the second and \n       following even SPI_CLK edges (i.e., sample data on falling edge) 0=Valid data is expected on the SPDIN signal on the first SPI_CLK edge. \n       This data is sampled on the first and following odd SPI_-CLK edges (i.e., sample data on rising edge)"/>
            <edc:SFRFieldDef edc:cname="CLKPOL" edc:nzwidth="0x1" edc:desc="1=The SPI_CLK signal is high when the interface is idle and the first clock edge is a falling edge\n            0=The SPI_CLK is low when the interface is idle and the first clock edge is a rising edge"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CLKSRC" edc:nzwidth="0x1" edc:desc="1=2MHz, 0=48 MHz Ring Oscillator"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GP_SPI0" edc:cname="CLK_GEN" edc:nzwidth="0x20" edc:access="--------------------------nnnnnn" edc:por="00000000000000000000000000000010" edc:mclr="00000000000000000000000000000010" edc:impl="0x3F" edc:_addr="0x40009418">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GP_SPI0">
            <edc:SFRFieldDef edc:cname="PRLD" edc:nzwidth="0x6" edc:desc="SPI Clock Generator Preload Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3E4" edc:_addr="0x4000941C"/>
      <edc:SFRDef ltx:memberofperipheral="HTM0" edc:cname="PRLD" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:_addr="0x40009800"/>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x40009802"/>
      <edc:SFRDef ltx:memberofperipheral="HTM0" edc:cname="CTRL" edc:nzwidth="0x10" edc:access="---------------n" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x1" edc:_addr="0x40009804">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="HTM0">
            <edc:SFRFieldDef edc:cname="CTRL" edc:nzwidth="0x1" edc:desc="1= The Hibernation Timer has a resolution of 0.125s per LSB, which yields a maximum time in excess of 2 hours.\n            0= The Hibernation Timer has a resolution of 30.5us per LSB, which yields a maximum time of ~2seconds."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x40009806"/>
      <edc:SFRDef ltx:memberofperipheral="HTM0" edc:cname="CNT" edc:nzwidth="0x10" edc:access="rrrrrrrrrrrrrrrr" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:_addr="0x40009808"/>
      <edc:AdjustPoint edc:offset="0x16" edc:_addr="0x4000980A"/>
      <edc:SFRDef ltx:memberofperipheral="HTM1" edc:cname="PRLD" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:_addr="0x40009820"/>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x40009822"/>
      <edc:SFRDef ltx:memberofperipheral="HTM1" edc:cname="CTRL" edc:nzwidth="0x10" edc:access="---------------n" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x1" edc:_addr="0x40009824">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="HTM1">
            <edc:SFRFieldDef edc:cname="CTRL" edc:nzwidth="0x1" edc:desc="1= The Hibernation Timer has a resolution of 0.125s per LSB, which yields a maximum time in excess of 2 hours.\n            0= The Hibernation Timer has a resolution of 30.5us per LSB, which yields a maximum time of ~2seconds."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x40009826"/>
      <edc:SFRDef ltx:memberofperipheral="HTM1" edc:cname="CNT" edc:nzwidth="0x10" edc:access="rrrrrrrrrrrrrrrr" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:_addr="0x40009828"/>
      <edc:AdjustPoint edc:offset="0x3DA" edc:_addr="0x4000982A"/>
      <edc:SFRDef ltx:memberofperipheral="KMS" edc:cname="KSO_SEL" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x40009C04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="KMS">
            <edc:SFRFieldDef edc:cname="SEL" edc:nzwidth="0x5" edc:desc="This field selects a KSO line (00000b = KSO[0] etc.) for output according to the value off KSO_INVERT in this register."/>
            <edc:SFRFieldDef edc:cname="ALL" edc:nzwidth="0x1" edc:desc="0=When key scan is enabled, KSO output controlled by the KSO_SELECT field.\n      1=KSO[x] driven high when selected."/>
            <edc:SFRFieldDef edc:cname="KSEN" edc:nzwidth="0x1" edc:desc="0= Keyboard scan enabled, 1= Keyboard scan disabled. All KSO output buffers disabled."/>
            <edc:SFRFieldDef edc:cname="INV" edc:nzwidth="0x1" edc:desc="0= KSO[x] driven low when selected, 1= KSO[x] driven high when selected."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="KMS" edc:cname="KSI" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40009C08"/>
      <edc:SFRDef ltx:memberofperipheral="KMS" edc:cname="KSI_STS" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40009C0C"/>
      <edc:SFRDef ltx:memberofperipheral="KMS" edc:cname="KSI_IEN" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40009C10"/>
      <edc:SFRDef ltx:memberofperipheral="KMS" edc:cname="EXT_CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40009C14"/>
      <edc:AdjustPoint edc:offset="0x3E8" edc:_addr="0x40009C18"/>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="FAN0_SET" edc:nzwidth="0x10" edc:access="nnnnnnnnnn------" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFC0" edc:_addr="0x4000A000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="FAN_SETTING" edc:nzwidth="0xA" edc:desc="The Fan Driver Setting used to control the output of the Fan Driver."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="CFG" edc:nzwidth="0x10" edc:access="nnnnnnn-nnnnnnnn" edc:por="0011010000101011" edc:mclr="0011010000101011" edc:impl="0xFEFF" edc:_addr="0x4000A002">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="UPDATE" edc:nzwidth="0x3" edc:desc="Determines the base time between fan driver updates. The Update Time, along with the Fan Step Register, is used to control\n       the ramp rate of the drive response to provide a cleaner transition of the actual fan operation as the desired fan speed changes.\n           7=1600ms\n          6=1200ms\n                  5=800ms\n            4=500ms\n            3=400ms\n                   2=300ms\n                 1=200ms\n                 0=100ms\n              Note: This ramp rate control applies for all changes to the active PWM output including when the RPM based Fan Speed Control Algorithm\n       is disabled.">
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_1600ms" edc:desc="7=1600ms" edc:when="(field &amp; 0x7) == 0x7"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_1200ms" edc:desc="6=1200ms" edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_800ms " edc:desc="5=800ms " edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_500ms " edc:desc="4=500ms " edc:when="(field &amp; 0x7) == 0x5"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_400ms " edc:desc="3=400ms " edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_300ms " edc:desc="2=300ms " edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_200ms " edc:desc="1=200ms " edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_100ms " edc:desc="0=100ms " edc:when="(field &amp; 0x7) == 0x1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EDGES" edc:nzwidth="0x2" edc:desc="Determines the minimum number of edges that must be detected on the TACH signal to determine a single rotation. A typical\n      fan measured 5 edges (for a 2-pole fan). Increasing the number of edges measured with respect to the number of poles of the fan will\n         cause the TACH Reading registers to indicate a fan speed that is higher or lower than the actual speed. In order for the FSC Algorithm\n       to operate correctly, the TACH Target must be updated by the user to accommodate this shift. The Effective Tach Multiplier is used as\n        a direct multiplier term that is applied to the Actual RPM to achieve the Reported RPM. It should only be applied if the number of\n        edges measured does not match the number of edges expected based on the number of poles of the fan (which is fixed for any given fan)."/>
            <edc:SFRFieldDef edc:cname="RANGE" edc:nzwidth="0x2" edc:desc="Adjusts the range of reported and programmed tachometer reading values. The RANGE bits determine the weighting of all\n        TACH values (including the Valid TACH Count, TACH Target, and TACH reading).\n                   3=Reported Minimum RPM: 4000. Tach Count Multiplier: 1\n               2=Reported Minimum RPM: 2000. Tach Count Multiplier: 2\n                1=Reported Minimum RPM: 1000. Tach Count Multiplier: 4\n                0=Reported Minimum RPM: 500. Tach Count Multiplier: 8">
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_8" edc:desc="3=Reported Minimum RPM: 4000. Tach Count Multiplier: 8" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_4" edc:desc="2=Reported Minimum RPM: 2000. Tach Count Multiplier: 4" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_2" edc:desc="1=Reported Minimum RPM: 1000. Tach Count Multiplier: 2" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_1" edc:desc="0=Reported Minimum RPM:  500. Tach Count Multiplier: 1" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EN_ALGO" edc:nzwidth="0x1" edc:desc="Enables the RPM based Fan Control Algorithm.\n                  1=The control circuitry is enabled and the Fan Driver output will be automatically updated to maintain the programmed fan speed\n        as indicated by the TACH Target Register.\n        0=The control circuitry is disabled and the fan driver output is determined by the Fan Driver Setting Register."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="POLARITY" edc:nzwidth="0x1" edc:desc="Determines the polarity of the PWM driver. This does NOT affect the drive setting registers. A setting of 0% drive will\n      still correspond to 0% drive independent of the polarity.\n      1 - The Polarity of the PWM driver is inverted. A drive setting of 00h will cause the output to be set at 100% duty cycle and\n       a drive setting of FFh will cause the output to be set at 0% duty cycle.\n       0 - the Polarity of the PWM driver is normal. A drive setting of 00h will cause the output to be set at 0% duty cycle and\n      a drive setting of FFh will cause the output to be set at 100% duty cycle."/>
            <edc:SFRFieldDef edc:cname="ERR_RNG" edc:nzwidth="0x2" edc:desc="Control some of the advanced options that affect the error window. When the measured fan speed is within the programmed\n         error window around the target speed, the fan drive setting is not updated. These bits only apply if the Fan Speed Control Algorithm is used.\n            3=200 RPM\n               2=100 RPM\n               1=50 RPM\n              0=0 RPM">
              <edc:SFRFieldSemantic edc:cname="RPM_200" edc:desc="3=200 RPM" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="RPM_100" edc:desc="2=100 RPM" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="RPM_50 " edc:desc="1=50 RPM " edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="RPM_0  " edc:desc="0=0 RPM  " edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DER_OPT" edc:nzwidth="0x2" edc:desc="Control some of the advanced options that affect the derivative portion of the RPM based fan control algorithm.\n        These bits only apply if the Fan Speed Control Algorithm is used."/>
            <edc:SFRFieldDef edc:cname="DIS_GLITCH" edc:nzwidth="0x1" edc:desc="Disables the low pass glitch filter that removes high frequency noise injected on the TACH pin.\n       1 - The glitch filter is disabled.\n      0 - The glitch filter is enabled."/>
            <edc:SFRFieldDef edc:cname="EN_RRC" edc:nzwidth="0x1" edc:desc="Enables the ramp rate control circuitry during the Manual Mode of operation.\n        1=The ramp rate control circuitry for the Manual Mode of operation is enabled. The PWM setting will follow the ramp rate controls\n       as determined by the Fan Step and Update Time settings. The maximum PWM step is capped at the Fan Step setting and is updated\n        based on the Update Time as given by the field UPDATE.\n         0=The ramp rate control circuitry for the Manual Mode of operation is disabled. When the Fan Drive Setting values are changed\n        and the RPM based Fan Control Algorithm is disabled, the fan driver will be set to the new setting immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="PWM_DIV" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000001" edc:mclr="00000001" edc:_addr="0x4000A004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="PWM_DIV" edc:nzwidth="0x8" edc:desc="The PWM Divide value determines the final frequency of the PWM driver. The driver base frequency is divided by the\n      PWM Divide value to determine the final frequency."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="GAIN" edc:nzwidth="0x8" edc:access="--nnnnnn" edc:por="00101010" edc:mclr="00101010" edc:impl="0x3F" edc:_addr="0x4000A005">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="GAINP" edc:nzwidth="0x2" edc:desc="The proportional gain term.\n       Gain Factor:\n          3=8x\n             2=4x\n              1=2x\n             0=1x">
              <edc:SFRFieldSemantic edc:cname="GAINP_8X" edc:desc="Gain Factor: 3=8x" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="GAINP_4X" edc:desc="Gain Factor: 2=4x" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="GAINP_2X" edc:desc="Gain Factor: 1=2x" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="GAINP_1X" edc:desc="Gain Factor: 0=1x" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="GAINI" edc:nzwidth="0x2" edc:desc="The integral gain term.\n        Gain Factor:\n                3=8x\n               2=4x\n                 1=2x\n                 0=1x">
              <edc:SFRFieldSemantic edc:cname="GAINI_8X" edc:desc="Gain Factor: 3=8x" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="GAINI_4X" edc:desc="Gain Factor: 2=4x" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="GAINI_2X" edc:desc="Gain Factor: 1=2x" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="GAINI_1X" edc:desc="Gain Factor: 0=1x" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="GAIND" edc:nzwidth="0x2" edc:desc="The derivative gain term.\n      Gain Factor:\n       3=8x\n           2=4x\n           1=2x\n              0=1x">
              <edc:SFRFieldSemantic edc:cname="GAIND_8X" edc:desc="Gain Factor: 3=8x" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="GAIND_4X" edc:desc="Gain Factor: 2=4x" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="GAIND_2X" edc:desc="Gain Factor: 1=2x" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="GAIND_1X" edc:desc="Gain Factor: 0=1x" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="SPIN_UP_CFG" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00011001" edc:mclr="00011001" edc:_addr="0x4000A006">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="SPINUP_TIME" edc:nzwidth="0x2" edc:desc="Determines the maximum Spin Time that the Spin Up Routine will run for. If a valid tachometer measurement is not\n           detected before the Spin Time has elapsed, an interrupt will be generated. When the RPM based Fan Control Algorithm is active,\n         the fan driver will attempt to re-start the fan immediately after the end of the last spin up attempt.\n               3=2 seconds\n               2=1 second\n                 1=500 ms\n               0=250 ms">
              <edc:SFRFieldSemantic edc:cname="SPINUP_2_SEC" edc:desc="3=2 seconds" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="SPINUP_1_SEC" edc:desc="2=1 second " edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="SPINUP_500_MSEC" edc:desc="1=500 ms" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="SPINUP_250_MSEC" edc:desc="0=250 ms" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPIN_LVL" edc:nzwidth="0x3" edc:desc="Determines the final drive level that is used by the Spin Up Routine.\n       7=65%\n             6=60%\n           5=55%\n            4=50%\n               3=45%\n            2=40%\n            1=35%\n           0=30%">
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_65" edc:desc="7=65%" edc:when="(field &amp; 0x7) == 0x7"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_60" edc:desc="6=60%" edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_55" edc:desc="5=55%" edc:when="(field &amp; 0x7) == 0x5"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_50" edc:desc="4=50%" edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_45" edc:desc="3=45%" edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_40" edc:desc="2=40%" edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_35" edc:desc="1=35%" edc:when="(field &amp; 0x7) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_30" edc:desc="0=30%" edc:when="(field &amp; 0x7) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="NOKICK" edc:nzwidth="0x1" edc:desc="Determines if the Spin Up Routine will drive the fan to 100% duty cycle for 1/4 of the programmed spin up time before\n            driving it at the programmed level.\n              1=The Spin Up Routine will not drive the PWM to 100%. It will set the drive at the programmed spin level for the entire duration of\n         the programmed spin up time\n         0=The Spin Up Routine will drive the PWM to 100% for 1/4 of the programmed spin up time before reverting to the programmed spin level."/>
            <edc:SFRFieldDef edc:cname="DRIVE_FAIL_CNT" edc:nzwidth="0x2" edc:desc="Determines how many update cycles are used for the Drive Fail detection function. This circuitry determines whether the\n      fan can be driven to the desired Tach target. These settings only apply if the Fan Speed Control Algorithm is enabled.\n        3=Drive Fail detection circuitry will count for 64 update periods\n       2=Drive Fail detection circuitry will count for 32 update periods\n         1=Drive Fail detection circuitry will count for 16 update periods\n          0=Drive Fail detection circuitry is disabled.">
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_64_PERIOD" edc:desc="3=Drive Fail detection circuitry will count for 64 update periods" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_32_PERIOD" edc:desc="2=Drive Fail detection circuitry will count for 32 update periods" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_16_PERIOD" edc:desc="1=Drive Fail detection circuitry will count for 16 update periods" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_DIS" edc:desc="0=Drive Fail detection circuitry is disabled." edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="FAN0_STEP" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00010000" edc:mclr="00010000" edc:_addr="0x4000A007">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="FAN_STEP" edc:nzwidth="0x8" edc:desc="The Fan Step value represents the maximum step size the fan driver will take between update times.\n      When the PWM_BASE frequency range field in the PWM Driver Base Frequency Register is set to the value 1, 2 or 3, this 8-bit field\n        is added to the 10-bit PWM duty cycle, for a maximum step size of 25%. When the PWM_BASE field is set to 0, the PWM operates in\n        an 8-bit mode. In 8-bit mode, this 8-bit field is added to the 8-bit duty cycle, for a maximum step size of 100%."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="MIN_DRIVE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="01100110" edc:mclr="01100110" edc:_addr="0x4000A008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="MIN_DRIVE" edc:nzwidth="0x8" edc:desc="The minimum drive setting."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="VAL_TACH_CNT" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="11110101" edc:mclr="11110101" edc:_addr="0x4000A009">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="VALID_TACH_CNT" edc:nzwidth="0x8" edc:desc="The maximum TACH Reading Register value to indicate that the fan is spinning properly."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="FAN0_DRIVE_FAIL_BAND" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnn---" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFF8" edc:_addr="0x4000A00A">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="FAN_DRIVE_FAIL_BAND" edc:nzwidth="0xD" edc:desc="The number of Tach counts used by the Fan Drive Fail detection circuitry."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="TACH_TGT" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnn---" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFF8" edc:_addr="0x4000A00C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TACH_TGT" edc:nzwidth="0xD" edc:desc="The target tachometer value."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="TACH_RD" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnn---" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFF8" edc:_addr="0x4000A00E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TACH_RD" edc:nzwidth="0xD" edc:desc="The current tachometer reading value."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="DRIV_BASE_FREQ" edc:nzwidth="0x8" edc:access="------nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3" edc:_addr="0x4000A010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="PWM_BASE" edc:nzwidth="0x2" edc:desc="Determines the frequency range of the PWM fan driver (when enabled). PWM resolution is 10-bit, except when this field\n        is set to '0b', when it is 8-bit.\n                 3=2.34KHz\n                 2=4.67KHz\n                 1=23.4KHz\n                0=26.8KHz">
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_2KHZ" edc:desc="3=2.34KHz" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_4KHZ" edc:desc="2=4.67KHz" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_23KHZ" edc:desc="1=23.4KHz" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_26KHZ" edc:desc="0=26.8KHz" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN0" edc:cname="STS" edc:nzwidth="0x8" edc:access="--n---nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x23" edc:_addr="0x4000A011">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN0">
            <edc:SFRFieldDef edc:cname="FAN_STALL" edc:nzwidth="0x1" edc:desc="The bit Indicates that the tachometer measurement on the Fan detects a stalled fan.  (R/WC)\n       0 - Stalled fan not detected.\n               1 - Stalled fan detected."/>
            <edc:SFRFieldDef edc:cname="FAN_SPIN" edc:nzwidth="0x1" edc:desc="The bit Indicates that the Spin up Routine for the Fan could not detect a valid tachometer reading within its maximum\n           time window. (R/WC)\n            1 - The Spin up Routine for the Fan could not detect a valid tachometer reading within its maximum time window.\n          0 - The Spin up Routine for the Fan detected a valid tachometer reading within its maximum time window."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIVE_FAIL" edc:nzwidth="0x1" edc:desc="The bit Indicates that the RPM-based Fan Speed Control Algorithm cannot drive the Fan to the desired target setting at\n       maximum drive. (R/WC)\n        1- The RPM-based Fan Speed Control Algorithm cannot drive Fan to the desired target setting at maximum drive.\n                0- The RPM-based Fan Speed Control Algorithm can drive Fan to the desired target setting."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x6E" edc:_addr="0x4000A012"/>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="FAN1_SET" edc:nzwidth="0x10" edc:access="nnnnnnnnnn------" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFC0" edc:_addr="0x4000A080">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="FAN_SETTING" edc:nzwidth="0xA" edc:desc="The Fan Driver Setting used to control the output of the Fan Driver."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="CFG" edc:nzwidth="0x10" edc:access="nnnnnnn-nnnnnnnn" edc:por="0011010000101011" edc:mclr="0011010000101011" edc:impl="0xFEFF" edc:_addr="0x4000A082">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="UPDATE" edc:nzwidth="0x3" edc:desc="Determines the base time between fan driver updates. The Update Time, along with the Fan Step Register, is used to control\n       the ramp rate of the drive response to provide a cleaner transition of the actual fan operation as the desired fan speed changes.\n           7=1600ms\n          6=1200ms\n                  5=800ms\n            4=500ms\n            3=400ms\n                   2=300ms\n                 1=200ms\n                 0=100ms\n              Note: This ramp rate control applies for all changes to the active PWM output including when the RPM based Fan Speed Control Algorithm\n       is disabled.">
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_1600ms" edc:desc="7=1600ms" edc:when="(field &amp; 0x7) == 0x7"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_1200ms" edc:desc="6=1200ms" edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_800ms " edc:desc="5=800ms " edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_500ms " edc:desc="4=500ms " edc:when="(field &amp; 0x7) == 0x5"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_400ms " edc:desc="3=400ms " edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_300ms " edc:desc="2=300ms " edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_200ms " edc:desc="1=200ms " edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="BASE_TIME_100ms " edc:desc="0=100ms " edc:when="(field &amp; 0x7) == 0x1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EDGES" edc:nzwidth="0x2" edc:desc="Determines the minimum number of edges that must be detected on the TACH signal to determine a single rotation. A typical\n      fan measured 5 edges (for a 2-pole fan). Increasing the number of edges measured with respect to the number of poles of the fan will\n         cause the TACH Reading registers to indicate a fan speed that is higher or lower than the actual speed. In order for the FSC Algorithm\n       to operate correctly, the TACH Target must be updated by the user to accommodate this shift. The Effective Tach Multiplier is used as\n        a direct multiplier term that is applied to the Actual RPM to achieve the Reported RPM. It should only be applied if the number of\n        edges measured does not match the number of edges expected based on the number of poles of the fan (which is fixed for any given fan)."/>
            <edc:SFRFieldDef edc:cname="RANGE" edc:nzwidth="0x2" edc:desc="Adjusts the range of reported and programmed tachometer reading values. The RANGE bits determine the weighting of all\n        TACH values (including the Valid TACH Count, TACH Target, and TACH reading).\n                   3=Reported Minimum RPM: 4000. Tach Count Multiplier: 1\n               2=Reported Minimum RPM: 2000. Tach Count Multiplier: 2\n                1=Reported Minimum RPM: 1000. Tach Count Multiplier: 4\n                0=Reported Minimum RPM: 500. Tach Count Multiplier: 8">
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_8" edc:desc="3=Reported Minimum RPM: 4000. Tach Count Multiplier: 8" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_4" edc:desc="2=Reported Minimum RPM: 2000. Tach Count Multiplier: 4" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_2" edc:desc="1=Reported Minimum RPM: 1000. Tach Count Multiplier: 2" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="TACH_COUNT_MULTIPLIER_1" edc:desc="0=Reported Minimum RPM:  500. Tach Count Multiplier: 1" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EN_ALGO" edc:nzwidth="0x1" edc:desc="Enables the RPM based Fan Control Algorithm.\n                  1=The control circuitry is enabled and the Fan Driver output will be automatically updated to maintain the programmed fan speed\n        as indicated by the TACH Target Register.\n        0=The control circuitry is disabled and the fan driver output is determined by the Fan Driver Setting Register."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="POLARITY" edc:nzwidth="0x1" edc:desc="Determines the polarity of the PWM driver. This does NOT affect the drive setting registers. A setting of 0% drive will\n      still correspond to 0% drive independent of the polarity.\n      1 - The Polarity of the PWM driver is inverted. A drive setting of 00h will cause the output to be set at 100% duty cycle and\n       a drive setting of FFh will cause the output to be set at 0% duty cycle.\n       0 - the Polarity of the PWM driver is normal. A drive setting of 00h will cause the output to be set at 0% duty cycle and\n      a drive setting of FFh will cause the output to be set at 100% duty cycle."/>
            <edc:SFRFieldDef edc:cname="ERR_RNG" edc:nzwidth="0x2" edc:desc="Control some of the advanced options that affect the error window. When the measured fan speed is within the programmed\n         error window around the target speed, the fan drive setting is not updated. These bits only apply if the Fan Speed Control Algorithm is used.\n            3=200 RPM\n               2=100 RPM\n               1=50 RPM\n              0=0 RPM">
              <edc:SFRFieldSemantic edc:cname="RPM_200" edc:desc="3=200 RPM" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="RPM_100" edc:desc="2=100 RPM" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="RPM_50 " edc:desc="1=50 RPM " edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="RPM_0  " edc:desc="0=0 RPM  " edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DER_OPT" edc:nzwidth="0x2" edc:desc="Control some of the advanced options that affect the derivative portion of the RPM based fan control algorithm.\n        These bits only apply if the Fan Speed Control Algorithm is used."/>
            <edc:SFRFieldDef edc:cname="DIS_GLITCH" edc:nzwidth="0x1" edc:desc="Disables the low pass glitch filter that removes high frequency noise injected on the TACH pin.\n       1 - The glitch filter is disabled.\n      0 - The glitch filter is enabled."/>
            <edc:SFRFieldDef edc:cname="EN_RRC" edc:nzwidth="0x1" edc:desc="Enables the ramp rate control circuitry during the Manual Mode of operation.\n        1=The ramp rate control circuitry for the Manual Mode of operation is enabled. The PWM setting will follow the ramp rate controls\n       as determined by the Fan Step and Update Time settings. The maximum PWM step is capped at the Fan Step setting and is updated\n        based on the Update Time as given by the field UPDATE.\n         0=The ramp rate control circuitry for the Manual Mode of operation is disabled. When the Fan Drive Setting values are changed\n        and the RPM based Fan Control Algorithm is disabled, the fan driver will be set to the new setting immediately."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="PWM_DIV" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000001" edc:mclr="00000001" edc:_addr="0x4000A084">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="PWM_DIV" edc:nzwidth="0x8" edc:desc="The PWM Divide value determines the final frequency of the PWM driver. The driver base frequency is divided by the\n      PWM Divide value to determine the final frequency."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="GAIN" edc:nzwidth="0x8" edc:access="--nnnnnn" edc:por="00101010" edc:mclr="00101010" edc:impl="0x3F" edc:_addr="0x4000A085">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="GAINP" edc:nzwidth="0x2" edc:desc="The proportional gain term.\n       Gain Factor:\n          3=8x\n             2=4x\n              1=2x\n             0=1x">
              <edc:SFRFieldSemantic edc:cname="GAINP_8X" edc:desc="Gain Factor: 3=8x" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="GAINP_4X" edc:desc="Gain Factor: 2=4x" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="GAINP_2X" edc:desc="Gain Factor: 1=2x" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="GAINP_1X" edc:desc="Gain Factor: 0=1x" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="GAINI" edc:nzwidth="0x2" edc:desc="The integral gain term.\n        Gain Factor:\n                3=8x\n               2=4x\n                 1=2x\n                 0=1x">
              <edc:SFRFieldSemantic edc:cname="GAINI_8X" edc:desc="Gain Factor: 3=8x" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="GAINI_4X" edc:desc="Gain Factor: 2=4x" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="GAINI_2X" edc:desc="Gain Factor: 1=2x" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="GAINI_1X" edc:desc="Gain Factor: 0=1x" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="GAIND" edc:nzwidth="0x2" edc:desc="The derivative gain term.\n      Gain Factor:\n       3=8x\n           2=4x\n           1=2x\n              0=1x">
              <edc:SFRFieldSemantic edc:cname="GAIND_8X" edc:desc="Gain Factor: 3=8x" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="GAIND_4X" edc:desc="Gain Factor: 2=4x" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="GAIND_2X" edc:desc="Gain Factor: 1=2x" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="GAIND_1X" edc:desc="Gain Factor: 0=1x" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="SPIN_UP_CFG" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00011001" edc:mclr="00011001" edc:_addr="0x4000A086">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="SPINUP_TIME" edc:nzwidth="0x2" edc:desc="Determines the maximum Spin Time that the Spin Up Routine will run for. If a valid tachometer measurement is not\n           detected before the Spin Time has elapsed, an interrupt will be generated. When the RPM based Fan Control Algorithm is active,\n         the fan driver will attempt to re-start the fan immediately after the end of the last spin up attempt.\n               3=2 seconds\n               2=1 second\n                 1=500 ms\n               0=250 ms">
              <edc:SFRFieldSemantic edc:cname="SPINUP_2_SEC" edc:desc="3=2 seconds" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="SPINUP_1_SEC" edc:desc="2=1 second " edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="SPINUP_500_MSEC" edc:desc="1=500 ms" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="SPINUP_250_MSEC" edc:desc="0=250 ms" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPIN_LVL" edc:nzwidth="0x3" edc:desc="Determines the final drive level that is used by the Spin Up Routine.\n       7=65%\n             6=60%\n           5=55%\n            4=50%\n               3=45%\n            2=40%\n            1=35%\n           0=30%">
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_65" edc:desc="7=65%" edc:when="(field &amp; 0x7) == 0x7"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_60" edc:desc="6=60%" edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_55" edc:desc="5=55%" edc:when="(field &amp; 0x7) == 0x5"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_50" edc:desc="4=50%" edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_45" edc:desc="3=45%" edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_40" edc:desc="2=40%" edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_35" edc:desc="1=35%" edc:when="(field &amp; 0x7) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="SPIN_LVL_30" edc:desc="0=30%" edc:when="(field &amp; 0x7) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="NOKICK" edc:nzwidth="0x1" edc:desc="Determines if the Spin Up Routine will drive the fan to 100% duty cycle for 1/4 of the programmed spin up time before\n            driving it at the programmed level.\n              1=The Spin Up Routine will not drive the PWM to 100%. It will set the drive at the programmed spin level for the entire duration of\n         the programmed spin up time\n         0=The Spin Up Routine will drive the PWM to 100% for 1/4 of the programmed spin up time before reverting to the programmed spin level."/>
            <edc:SFRFieldDef edc:cname="DRIVE_FAIL_CNT" edc:nzwidth="0x2" edc:desc="Determines how many update cycles are used for the Drive Fail detection function. This circuitry determines whether the\n      fan can be driven to the desired Tach target. These settings only apply if the Fan Speed Control Algorithm is enabled.\n        3=Drive Fail detection circuitry will count for 64 update periods\n       2=Drive Fail detection circuitry will count for 32 update periods\n         1=Drive Fail detection circuitry will count for 16 update periods\n          0=Drive Fail detection circuitry is disabled.">
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_64_PERIOD" edc:desc="3=Drive Fail detection circuitry will count for 64 update periods" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_32_PERIOD" edc:desc="2=Drive Fail detection circuitry will count for 32 update periods" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_16_PERIOD" edc:desc="1=Drive Fail detection circuitry will count for 16 update periods" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DRIVE_FAIL_CNT_DIS" edc:desc="0=Drive Fail detection circuitry is disabled." edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="FAN1_STEP" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00010000" edc:mclr="00010000" edc:_addr="0x4000A087">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="FAN_STEP" edc:nzwidth="0x8" edc:desc="The Fan Step value represents the maximum step size the fan driver will take between update times.\n      When the PWM_BASE frequency range field in the PWM Driver Base Frequency Register is set to the value 1, 2 or 3, this 8-bit field\n        is added to the 10-bit PWM duty cycle, for a maximum step size of 25%. When the PWM_BASE field is set to 0, the PWM operates in\n        an 8-bit mode. In 8-bit mode, this 8-bit field is added to the 8-bit duty cycle, for a maximum step size of 100%."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="MIN_DRIVE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="01100110" edc:mclr="01100110" edc:_addr="0x4000A088">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="MIN_DRIVE" edc:nzwidth="0x8" edc:desc="The minimum drive setting."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="VAL_TACH_CNT" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="11110101" edc:mclr="11110101" edc:_addr="0x4000A089">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="VALID_TACH_CNT" edc:nzwidth="0x8" edc:desc="The maximum TACH Reading Register value to indicate that the fan is spinning properly."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="FAN1_DRIVE_FAIL_BAND" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnn---" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFF8" edc:_addr="0x4000A08A">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="FAN_DRIVE_FAIL_BAND" edc:nzwidth="0xD" edc:desc="The number of Tach counts used by the Fan Drive Fail detection circuitry."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="TACH_TGT" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnn---" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFF8" edc:_addr="0x4000A08C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TACH_TGT" edc:nzwidth="0xD" edc:desc="The target tachometer value."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="TACH_RD" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnn---" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFF8" edc:_addr="0x4000A08E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TACH_RD" edc:nzwidth="0xD" edc:desc="The current tachometer reading value."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="DRIV_BASE_FREQ" edc:nzwidth="0x8" edc:access="------nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3" edc:_addr="0x4000A090">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="PWM_BASE" edc:nzwidth="0x2" edc:desc="Determines the frequency range of the PWM fan driver (when enabled). PWM resolution is 10-bit, except when this field\n        is set to '0b', when it is 8-bit.\n                 3=2.34KHz\n                 2=4.67KHz\n                 1=23.4KHz\n                0=26.8KHz">
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_2KHZ" edc:desc="3=2.34KHz" edc:when="(field &amp; 0x3) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_4KHZ" edc:desc="2=4.67KHz" edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_23KHZ" edc:desc="1=23.4KHz" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="PWM_FAN_FREQ_26KHZ" edc:desc="0=26.8KHz" edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="FAN1" edc:cname="STS" edc:nzwidth="0x8" edc:access="--n---nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x23" edc:_addr="0x4000A091">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="FAN1">
            <edc:SFRFieldDef edc:cname="FAN_STALL" edc:nzwidth="0x1" edc:desc="The bit Indicates that the tachometer measurement on the Fan detects a stalled fan.  (R/WC)\n       0 - Stalled fan not detected.\n               1 - Stalled fan detected."/>
            <edc:SFRFieldDef edc:cname="FAN_SPIN" edc:nzwidth="0x1" edc:desc="The bit Indicates that the Spin up Routine for the Fan could not detect a valid tachometer reading within its maximum\n           time window. (R/WC)\n            1 - The Spin up Routine for the Fan could not detect a valid tachometer reading within its maximum time window.\n          0 - The Spin up Routine for the Fan detected a valid tachometer reading within its maximum time window."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIVE_FAIL" edc:nzwidth="0x1" edc:desc="The bit Indicates that the RPM-based Fan Speed Control Algorithm cannot drive the Fan to the desired target setting at\n       maximum drive. (R/WC)\n        1- The RPM-based Fan Speed Control Algorithm cannot drive Fan to the desired target setting at maximum drive.\n                0- The RPM-based Fan Speed Control Algorithm can drive Fan to the desired target setting."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x36E" edc:_addr="0x4000A092"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT" edc:cname="PFRS" edc:nzwidth="0x8" edc:access="nnnnnn--" edc:por="10000000" edc:mclr="10000000" edc:impl="0xFC" edc:_addr="0x4000A400">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VBAT">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="SOFT" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' if a was triggered by an assertion of the SOFT_SYS_RESET bit in the System Reset Register.\n            This bit is cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Test"/>
            <edc:SFRFieldDef edc:cname="RSTI" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' if a RESET_SYS was triggered by a low signal on the RSTI# input pin. This bit is\n             cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="WDT_EVT" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' if a RESET_SYS was triggered by a Watchdog Timer event. This bit is cleared to '0b' when\n            written with a '1b'; writes of a '0b' have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="SYS_RSTREQ" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' if a RESET_SYS was triggered by an ARM SYS_RSTREQ event. This bit is cleared to '0b' when\n         written with a '1b'; writes of a '0b' have no effect. (R/WC)"/>
            <edc:SFRFieldDef edc:cname="VBAT_RST" edc:nzwidth="0x1" edc:desc="The VBAT RST bit is set to '1' by hardware when a RESET_VBAT is detected. This is the register default value.\n          To clear VBAT RST EC firmware must write a '1' to this bit; writing a '0' to VBAT RST has no affect.(R/WC)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7" edc:_addr="0x4000A401"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT" edc:cname="CLK32_EN" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x4000A408">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VBAT">
            <edc:SFRFieldDef edc:cname="C32K_SUPPRESS" edc:nzwidth="0x1" edc:desc="1=32KHz clock domain is off while VTR is off (i.e., while on VBAT only). The 32KHz domain is always on\n          while VTR is on, so the PLL always has a reference.\n         0=32KHz clock domain is enabled while VTR is off (i.e., while on VBAT only). The clock source for the 32KHz domain is\n         determined by the other bits in this register"/>
            <edc:SFRFieldDef edc:cname="EXT_32K" edc:nzwidth="0x1" edc:desc="This bit selects the source for the 32KHz clock domain.\n             1=The 32KHZ_IN VTR-powered pin is used as a source for the 32KHz clock domain. If an activity detector does not detect a\n           clock on the selected source, the always-on 32KHz internal clock source is automatically selected\n                0=The always-on32Khz clock source is used as the source for the 32KHz clock domain."/>
            <edc:SFRFieldDef edc:cname="C32KHZ_SRC" edc:nzwidth="0x1" edc:desc="This field determines the source for the always-on 32KHz internal clock source. If set to '1b', this bit\n       will only take effect if an active clock has been detected on the crystal pins. Once the 32KHz source has been switched,\n          activity detection on the crystal no longer functions. Therefore, if the crystal oscillator uses a single-ended\n                 input, once started that input must not stop while this bit is '1b'.\n                  1=Crystal Oscillator. The selection between a singled-ended input or a resonant crystal is determined by XOSEL in this register\n         0=Silicon Oscillator."/>
            <edc:SFRFieldDef edc:cname="XOSEL" edc:nzwidth="0x1" edc:desc="This bit selects between a single-ended clock source for the crystal oscillator or an external parallel crystal.\n             1= the Crystal Oscillator is driven by a single-ended 32KHz clock source connected to the XTAL2 pin. \n                 0= the Crystal Oscillator requires a 32KHz parallel resonant crystal connected between the XTAL1 and XTAL2 pins (default)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0x4000A40C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT" edc:cname="MCNT_LO" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A420">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VBAT">
            <edc:SFRFieldDef edc:cname="MON_CNT" edc:nzwidth="0x20" edc:desc="Read-only register that increments by 1 every time it is read. It is reset to 0 on a VBAT Power On Reset."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VBAT" edc:cname="MCNT_HI" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A424">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VBAT">
            <edc:SFRFieldDef edc:cname="CNT_HWRD" edc:nzwidth="0x20" edc:desc="Thirty-two bit read/write register. If software sets this register to an incrementing value, based on an external\n         non-volatile store, this register may be combined with the Monotonic Counter Register to form a 64-bit monotonic counter."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VBAT" edc:cname="VWR_BCKP" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000A428">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VBAT">
            <edc:SFRFieldDef edc:cname="M2S_2H_BACKUP" edc:nzwidth="0x4" edc:desc="The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n        that corresponds to Virtual Wire Index 2h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n               edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic."/>
            <edc:SFRFieldDef edc:cname="M2S_42H_BACKUP" edc:nzwidth="0x4" edc:desc="The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n        that corresponds to Virtual Wire Index 42h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n                  edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3D4" edc:_addr="0x4000A42C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u320" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A800"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u321" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A804"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u322" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A808"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u323" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A80C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u324" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A810"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u325" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A814"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u326" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A818"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u327" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A81C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u328" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A820"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u329" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A824"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3210" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A828"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3211" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A82C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3212" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A830"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3213" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A834"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3214" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A838"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3215" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A83C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3216" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A840"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3217" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A844"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3218" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A848"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3219" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A84C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3220" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A850"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3221" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A854"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3222" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A858"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3223" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A85C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3224" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A860"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3225" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A864"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3226" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A868"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3227" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A86C"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3228" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A870"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3229" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A874"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3230" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A878"/>
      <edc:SFRDef ltx:memberofperipheral="VBAT_RAM" edc:cname="MEM_u3231" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000A87C"/>
      <edc:AdjustPoint edc:offset="0x400" edc:_addr="0x4000A880"/>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="-------------------------n-----n" edc:por="00000000000000000000000000000001" edc:mclr="00000000000000000000000000000001" edc:impl="0x41" edc:_addr="0x4000AC80">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="WT_EN" edc:nzwidth="0x1" edc:desc="The WT_EN bit is used to start and stop the Week Alarm Counter Register and the Clock Divider Register.\n           The value in the Counter Register is held when the WT_ENABLE bit is not asserted (0) and the count is resumed from the last value when the bit is asserted (1).\n             The 15-Bit Clock Divider is reset to 00h and the Week Alarm Interface is in its lowest power consumption state when the WT_ENABLE bit is not asserted."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="PWRUP_EN" edc:nzwidth="0x1" edc:desc="This bit controls the state of the Power-Up Event Output and enables Week POWER-UP Event decoding in the VBAT-Powered Control Interface.\n        1=Power-Up Event Output Enabled\n       0=Power-Up Event Output Disabled and Reset"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="ALARM_CNT" edc:nzwidth="0x20" edc:access="----nnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF" edc:_addr="0x4000AC84">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="WK_CNTR" edc:nzwidth="0x1C" edc:desc="While the WT_ENABLE bit is 1, this register is incremented at a 1 Hz rate. Writes of this register may require one second\n            to take effect. Reads return the current state of the register. Reads and writes complete independently of the state of WT_ENABLE."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="TMR_COMP" edc:nzwidth="0x20" edc:access="----nnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00001111111111111111111111111111" edc:mclr="00001111111111111111111111111111" edc:impl="0xFFFFFFF" edc:_addr="0x4000AC88">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="WK_COMP" edc:nzwidth="0x1C" edc:desc="A Week Alarm Interrupt and a Week Alarm Power-Up Event are asserted when the Week Alarm Counter Register is greater than\n         or equal to the contents of this register. Reads and writes complete independently of the state of WT_ENABLE."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="CLKDIV" edc:nzwidth="0x20" edc:access="-----------------nnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7FFF" edc:_addr="0x4000AC8C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="DIV" edc:nzwidth="0xF" edc:desc="Reads of this register return the current state of the Week Timer 15- bit clock divider."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="SS_INTR_SEL" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x4000AC90">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="SPISR" edc:nzwidth="0x4" edc:desc="This field determines the rate at which Sub-Second interrupt events are generated."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="SWK_CTRL" edc:nzwidth="0x20" edc:access="----------------------rrrrrr--rr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3F3" edc:_addr="0x4000AC94">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="SWKTMR_PWRUP_EVT_STS" edc:nzwidth="0x1" edc:desc="This bit is set to 1 when the Sub-Week Alarm Counter Register decrements from 1 to 0 and the POWERUP_EN is 1.\n          Writes of 1 clear this bit. Writes of 0 have no effect. Note: This bit MUST be cleared to remove a Sub-Week Timer Power-Up Event."/>
            <edc:SFRFieldDef edc:cname="WKTMR_PWRUP_EVT_STS" edc:nzwidth="0x1" edc:desc="This bit is set to 1 when the Week Alarm Counter Register is greater than or equal the contents of the Week Timer Compare\n       Register and the POWERUP_EN is 1. Writes of 1 clear this bit. Writes of 0 have no effect.\n              Note: This bit does not have to be cleared to remove a Week Timer Power-Up Event."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Test"/>
            <edc:SFRFieldDef edc:cname="TEST0" edc:nzwidth="0x1" edc:desc="Test"/>
            <edc:SFRFieldDef edc:cname="AU_RLD" edc:nzwidth="0x1" edc:desc="1= No reload occurs when the Sub-Week Counter expires\n       0= Reloads the SUBWEEK_COUNTER_LOAD field into the Sub- Week Counter when the counter expires."/>
            <edc:SFRFieldDef edc:cname="SWK_TICK" edc:nzwidth="0x3" edc:desc="This field selects the clock source for the Sub-Week Counter."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="SWK_ALARM" edc:nzwidth="0x20" edc:access="-------rrrrrrrrr-------rrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FF01FF" edc:_addr="0x4000AC98">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="CNTR_LOAD" edc:nzwidth="0x9" edc:desc="Writes with a non-zero value to this field reload the 9-bit Sub-Week Alarm counter. Writes of 0 disable the counter.\n       If the Sub-Week Alarm counter decrements to 0 and the AUTO_RELOAD bit is set, the value in this field is automatically loaded into the Sub-Week Alarm counter."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="CNTR_STS" edc:nzwidth="0x9" edc:desc="Reads of this register return the current state of the 9-bit Sub-Week Alarm counter."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="BGPO_DATA" edc:nzwidth="0x20" edc:access="----------------------nnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3FF" edc:_addr="0x4000AC9C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="BGPO" edc:nzwidth="0xA" edc:desc="Battery powered General Purpose Output. Each output pin may be individually configured to be either a VBAT-power BGPO or a VTR\n          powered GPIO, based on the corresponding settings in the BGPO Power Register. Additionally, each output pin may be individually configured\n                 to reset to 0 on either RESET_VTR or RESET_SYS, based on the corresponding settings in the BGPO Reset Register.\n                  For each bit [i] in the field: 1=BGPO[i] output is high; 0=BGPO[i] output is low."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="BGPO_PWR" edc:nzwidth="0x20" edc:access="--------------------------nnnnn-" edc:por="00000000000000000000000000111110" edc:mclr="00000000000000000000000000111110" edc:impl="0x3E" edc:_addr="0x4000ACA0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="BGPO_POWER" edc:nzwidth="0x5" edc:desc="Battery powered General Purpose Output power source. For each bit [i] in the field:\n         1=BGPO[i] is powered by VBAT. The BGPO[i] pin is always determined by the corresponding bit in the BGPO Data Register. The GPIO Input register\n            for the GPIO that is multiplexed with the BGPO always returns a '1b'.\n              0=The pin for BGPO[i] functions as a GPIO. When VTR is powered, the pin associated with BGPO[i] is determined by the GPIO associated with the pin.\n            When VTR is unpowered, the pin is tristated."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="WEEK" edc:cname="BGPO_RST" edc:nzwidth="0x20" edc:access="----------------------nnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3FF" edc:_addr="0x4000ACA4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="WEEK">
            <edc:SFRFieldDef edc:cname="BGPO_RESET" edc:nzwidth="0xA" edc:desc="Battery powered General Purpose Output reset event. For each bit [i] in the field:\n                1=BGPO[i] is reset to 0 on RESET_VTR; 0=BGPO[i] is reset to 0 on RESET_SYS."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x158" edc:_addr="0x4000ACA8"/>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="VCI_CTRL_STS" edc:nzwidth="0x20" edc:access="--------------nn---nnnnn-nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31F7F" edc:_addr="0x4000AE00">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="VCI_IN" edc:nzwidth="0x7" edc:desc="These bits provide the latched state of the associated VCI_IN# pin, if latching is enabled or the current state of the pin\n          if latching is not enabled. In both cases, the value is determined after the action of the VCI Polarity Register.\n          Note: The VCI_IN[6:0]# bits default to the state of their respective input pins."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="VCI_OVRD_IN" edc:nzwidth="0x1" edc:desc="This bit provides the current status of the VCI_OVRD_IN pin.\n                   Note: The VCI_OVRD_IN bit defaults to the state of the respective input pin."/>
            <edc:SFRFieldDef edc:cname="VCI_OUT" edc:nzwidth="0x1" edc:desc="This bit provides the current status of the VCI_OUT pin."/>
            <edc:SFRFieldDef edc:cname="VCI_FW_CTRL" edc:nzwidth="0x1" edc:desc="This bit can allow EC firmware to control the state of the VCI_OUT pin. For example, when VTR_PWRGD is asserted and the\n          FW_EXT bit is 1, clearing the VCI_FW_CNTRL bit de-asserts the active high VCI_OUT pin. BIOS must set this bit to 1 prior to setting\n                the FW_EXT bit to 1 on power up, in order to avoid glitches on the VCI_OUT pin."/>
            <edc:SFRFieldDef edc:cname="FW_EXT" edc:nzwidth="0x1" edc:desc="This bit controls selecting between the external VBAT-Powered Control Interface inputs, or the VCI_FW_CNTRL bit output to control the VCI_OUT pin.\n        1=VCI_OUT is determined by the VCI_FW_CNTRL field, when VTR is active\n                   0=VCI_OUT is determined by the external inputs.\n               Note: This bit used to be called GPO/nEXT. The name was changed to distinguish it from the BGPOs, which are elsewhere, and to remove a / in a bit name."/>
            <edc:SFRFieldDef edc:cname="FLTRS_BYPASS" edc:nzwidth="0x1" edc:desc="The Filters Bypass bit is used to enable and disable the input filters on the VCI_IN# pins.\n         1=Filters disabled; 0=Filters enabled (default)."/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="WK_ALRM" edc:nzwidth="0x1" edc:desc="If enabled by WK_ALRM_LE, this bit is set to 1 if the Week Alarm signal is asserted. It is reset by writes to WK_ALRM_LS."/>
            <edc:SFRFieldDef edc:cname="RTC_ALRM" edc:nzwidth="0x1" edc:desc="If enabled by RTC_ALRM_LE, this bit is set to 1 if the RTC Alarm signal is asserted. It is reset by writes to RTC_ALRM_LS."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="LATCH_EN" edc:nzwidth="0x20" edc:access="--------------nn---------nnnnnnn" edc:por="00000000000000000000000000110000" edc:mclr="00000000000000000000000000110000" edc:impl="0x3007F" edc:_addr="0x4000AE04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="LE" edc:nzwidth="0x7" edc:desc="Latching Enables. Latching occurs after the Polarity configuration, so a VCI_INi# pin is asserted when it is '0' if VCI_IN_POL is '0',\n       and asserted when it is '1' if VCI_IN_POL is '1'. For each bit in the field: \n          1=Enabled. Assertions of the VCI_INi# pin are held until the latch is reset by writing the corresponding LS bit\n          0=Not Enabled. The VCI_INi# signal is not latched but passed directly to the VCI_OUT logic"/>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="WK_ALRM_LE" edc:nzwidth="0x1" edc:desc="Latch enable for the Week Alarm Power-Up signal.\n          1=Enabled. Assertions of the Week Alarm are held until the latch is reset by writing the corresponding LS bit\n        0=Not Enabled. The Week Alarm signal is not latched but passed directly to the VCI_OUT logic"/>
            <edc:SFRFieldDef edc:cname="RTC_ALRM_LE" edc:nzwidth="0x1" edc:desc="Latch enable for the RTC Power-Up signal.\n             1=Enabled. Assertions of the RTC Alarm are held until the latch is reset by writing the corresponding LS bit\n           0=Not Enabled. The RTC Alarm signal is not latched but passed directly to the VCI_OUT logic"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="LATCH_RST" edc:nzwidth="0x20" edc:access="--------------nn---------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3007F" edc:_addr="0x4000AE08">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="LS" edc:nzwidth="0x7" edc:desc="Latch Resets. When a Latch Resets bit is written with a '1', the corresponding VCI_INi# latch is de-asserted ('1'). The VCI_INi#\n         input to the latch has priority over the Latch Reset input, so firmware cannot reset the latch while the VCI_INi# pin is asserted. Firmware\n                 should sample the state of the pin in the VCI Register before attempting to reset the latch. As noted in the Latch Enable Register,\n                 the assertion level is determined by the VCI_IN_POL bit. Reads of this register are undefined."/>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="WK_ALRM_LS" edc:nzwidth="0x1" edc:desc="Week Alarm Latch Reset. When this bit is written with a '1', the Week Alarm Event latch is reset.\n          The Week Alarm input to the latch has priority over the Reset input Reads of this register are undefined."/>
            <edc:SFRFieldDef edc:cname="RTC_ALRM_LS" edc:nzwidth="0x1" edc:desc="RTC Alarm Latch Reset. When this bit is written with a '1', the RTC Alarm Event latch is reset.\n           The RTC Alarm input to the latch has priority over the Reset input Reads of this register are undefined."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="INPUT_EN" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000001111" edc:mclr="00000000000000000000000000001111" edc:impl="0x7F" edc:_addr="0x4000AE0C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="IE" edc:nzwidth="0x7" edc:desc="Input Enables for VCI_IN# signals. After changing the input enable for a VCI input, firmware should reset the input latch and clear\n         any potential interrupt that may have been triggered by the input, as changing the enable may cause the internal status to change.\n                For each bit in the field:\n             1=Enabled. The corresponding VCI_IN# input is not gated and toggling the pin will affect the VCI_OUT pin\n        0=Not Enabled. the corresponding VCI_IN# input does not affect the VCI_OUT pin, even if the input is '0'. Unless the corresponding bit\n            in the VCI Buffer Enable Register is 1, latches are not asserted, even if the VCI_IN# pin is low, during a VBAT power transition"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="HLDOFF_CNT" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000AE10">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="TIME" edc:nzwidth="0x8" edc:desc="These bits determine the period of time the VCI_OUT logic is inhibited from re-asserting VCI_OUT after a SYS_SHDN# event.\n        FFh-01h=The Power On Inhibit Holdoff Time is set to a period between 125ms and 31.875 seconds.\n             0=The Power On Inhibit function is disabled."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="POLARITY" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x4000AE14">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="VCI_IN" edc:nzwidth="0x7" edc:desc="These bits determine the polarity of the VCI_IN input signals: For each bit in the field:\n          1=Active High. The value on the pins is inverted before use\n                0=Active Low (default)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="PEDGE_DET" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x4000AE18">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="VCI_IN" edc:nzwidth="0x7" edc:desc="These bits record a low to high transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n          1=Positive Edge Detected; 0=No edge detected."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="NEDGE_DET" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x4000AE1C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="VCI_IN" edc:nzwidth="0x7" edc:desc="These bits record a high to low transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n       1=Negative Edge Detected; 0=No edge detected."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="VCI" edc:cname="BUFFER_EN" edc:nzwidth="0x20" edc:access="-------------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7F" edc:_addr="0x4000AE20">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="VCI">
            <edc:SFRFieldDef edc:cname="V_BUF" edc:nzwidth="0x7" edc:desc="Input Buffer enable. After changing the buffer enable for a VCI input, firmware should reset the input latch and clear any\n       potential interrupt that may have been triggered by the input, as changing the buffer may cause the internal status to change. This register\n           has no effect when VTR is powered. When VTR is on, the input buffers are enabled only by the IE bit. For each bit in the field:\n                1=VCI_IN# input buffer enabled independent of the IE bit. The edge detection latches for this input are always enabled\n              0=VCI_IN# input buffer enabled by the IE bit. The edge detection latches are only enabled when the IE bit is 1 (default)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x9DC" edc:_addr="0x4000AE24"/>
      <edc:SFRDef ltx:memberofperipheral="LED0" edc:cname="CFG" edc:nzwidth="0x20" edc:access="---------------nnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFFF" edc:_addr="0x4000B800">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED0">
            <edc:SFRFieldDef edc:cname="CTRL" edc:nzwidth="0x2" edc:desc="CTRL 3=PWM is always on\n      2=LED blinking (standard PWM)\n      1=LED breathing configuration\n      0=PWM is always off. All internal registers and counters are reset to 0. Clocks are gated"/>
            <edc:SFRFieldDef edc:cname="CLK_SRC" edc:nzwidth="0x1" edc:desc="1=Clock source is the 48 MHz clock, 0=Clock source is the 32.768 KHz clock"/>
            <edc:SFRFieldDef edc:cname="SYNCH" edc:nzwidth="0x1" edc:desc="SYNCH  When this bit is '1', all counters for all LEDs are reset to their initial values.\n       When this bit is '0' in the LED Configuration Register for all LEDs, then all counters for LEDs that are configured to blink or breathe will increment or decrement, as required."/>
            <edc:SFRFieldDef edc:cname="PWM_SIZE" edc:nzwidth="0x2" edc:desc="PWM_SIZE This bit controls the behavior of PWM:\n      3=Reserved\n      2=PWM is configured as a 6-bit PWM\n      1=PWM is configured as a 7-bit PWM\n      0=PWM is configured as an 8-bit PWM"/>
            <edc:SFRFieldDef edc:cname="EN_UPDATE" edc:nzwidth="0x1" edc:desc="EN_UPDATE  This bit is set to 1 when written with a '1'. Writes of '0' have no effect.\n       Hardware clears this bit to 0 when the breathing configuration registers are updated at the end of a PWM period. The current state of the bit is readable any time."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="RST  Writes of '1' to this bit resets the PWM registers to their default values. This bit is self clearing.\n       Writes of '0' to this bit have no effect."/>
            <edc:SFRFieldDef edc:cname="WDT_RELOAD" edc:nzwidth="0x8" edc:desc="WDT_RELOAD  The PWM Watchdog Timer counter reload value. On system reset, it defaults to 14h, which corresponds to a 4 second Watchdog timeout value."/>
            <edc:SFRFieldDef edc:cname="SYMMETRY" edc:nzwidth="0x1" edc:desc="SYMMETRY  1=The rising and falling ramp times are in Asymmetric mode.\n      0=The rising and falling ramp times are in Symmetric mode."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED0" edc:cname="LIMIT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x4000B804">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED0">
            <edc:SFRFieldDef edc:cname="MIN" edc:nzwidth="0x8" edc:desc="In breathing mode, when the current duty cycle is less than or equal to this value the breathing apparatus holds \n       the current duty cycle for the period specified by the field LD in register LED_DELAY, then starts incrementing the current duty cycle In blinking mode,\n       this field defines the duty cycle of the blink function."/>
            <edc:SFRFieldDef edc:cname="MAX" edc:nzwidth="0x8" edc:desc="In breathing mode, when the current duty cycle is greater than or equal to this value the breathing apparatus holds \n       the current duty cycle for the period specified by the field HD in register LED_DELAY, then starts decrementing the current duty cycle"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED0" edc:cname="DLY" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFF" edc:_addr="0x4000B808">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED0">
            <edc:SFRFieldDef edc:cname="LOW_PULSE" edc:nzwidth="0xC" edc:desc="The number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal \n       to the value MIN in register LED_LIMIT."/>
            <edc:SFRFieldDef edc:cname="HIGH_PULSE" edc:nzwidth="0xC" edc:desc="In breathing mode, the number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater\n       than or equal to the value MAX in register LED_LIMIT."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED0" edc:cname="STEP" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000B80C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED0">
            <edc:SFRFieldDef edc:cname="S0" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 000."/>
            <edc:SFRFieldDef edc:cname="S1" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 001."/>
            <edc:SFRFieldDef edc:cname="S2" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 010."/>
            <edc:SFRFieldDef edc:cname="S3" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 011."/>
            <edc:SFRFieldDef edc:cname="S4" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 100."/>
            <edc:SFRFieldDef edc:cname="S5" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 101"/>
            <edc:SFRFieldDef edc:cname="S6" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 110."/>
            <edc:SFRFieldDef edc:cname="S7" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 111."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED0" edc:cname="INTRVL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000B810">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED0">
            <edc:SFRFieldDef edc:cname="I0" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 000b."/>
            <edc:SFRFieldDef edc:cname="I1" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 001b."/>
            <edc:SFRFieldDef edc:cname="I2" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 010b."/>
            <edc:SFRFieldDef edc:cname="I3" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 011b."/>
            <edc:SFRFieldDef edc:cname="I4" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 100b."/>
            <edc:SFRFieldDef edc:cname="I5" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 101b."/>
            <edc:SFRFieldDef edc:cname="I6" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 110b."/>
            <edc:SFRFieldDef edc:cname="I7" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 111b."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED0" edc:cname="OUTDLY" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000B814">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED0">
            <edc:SFRFieldDef edc:cname="DELAY" edc:nzwidth="0x8" edc:desc="The delay, in counts of the clock defined in Clock Source (CLKSRC), in which output transitions are delayed.\n      When this field is 0, there is no added transition delay. When the LED is programmed to be Always On or Always Off, the\n      Output Delay field has no effect."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xE8" edc:_addr="0x4000B818"/>
      <edc:SFRDef ltx:memberofperipheral="LED1" edc:cname="CFG" edc:nzwidth="0x20" edc:access="---------------nnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFFF" edc:_addr="0x4000B900">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED1">
            <edc:SFRFieldDef edc:cname="CTRL" edc:nzwidth="0x2" edc:desc="CTRL 3=PWM is always on\n      2=LED blinking (standard PWM)\n      1=LED breathing configuration\n      0=PWM is always off. All internal registers and counters are reset to 0. Clocks are gated"/>
            <edc:SFRFieldDef edc:cname="CLK_SRC" edc:nzwidth="0x1" edc:desc="1=Clock source is the 48 MHz clock, 0=Clock source is the 32.768 KHz clock"/>
            <edc:SFRFieldDef edc:cname="SYNCH" edc:nzwidth="0x1" edc:desc="SYNCH  When this bit is '1', all counters for all LEDs are reset to their initial values.\n       When this bit is '0' in the LED Configuration Register for all LEDs, then all counters for LEDs that are configured to blink or breathe will increment or decrement, as required."/>
            <edc:SFRFieldDef edc:cname="PWM_SIZE" edc:nzwidth="0x2" edc:desc="PWM_SIZE This bit controls the behavior of PWM:\n      3=Reserved\n      2=PWM is configured as a 6-bit PWM\n      1=PWM is configured as a 7-bit PWM\n      0=PWM is configured as an 8-bit PWM"/>
            <edc:SFRFieldDef edc:cname="EN_UPDATE" edc:nzwidth="0x1" edc:desc="EN_UPDATE  This bit is set to 1 when written with a '1'. Writes of '0' have no effect.\n       Hardware clears this bit to 0 when the breathing configuration registers are updated at the end of a PWM period. The current state of the bit is readable any time."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="RST  Writes of '1' to this bit resets the PWM registers to their default values. This bit is self clearing.\n       Writes of '0' to this bit have no effect."/>
            <edc:SFRFieldDef edc:cname="WDT_RELOAD" edc:nzwidth="0x8" edc:desc="WDT_RELOAD  The PWM Watchdog Timer counter reload value. On system reset, it defaults to 14h, which corresponds to a 4 second Watchdog timeout value."/>
            <edc:SFRFieldDef edc:cname="SYMMETRY" edc:nzwidth="0x1" edc:desc="SYMMETRY  1=The rising and falling ramp times are in Asymmetric mode.\n      0=The rising and falling ramp times are in Symmetric mode."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED1" edc:cname="LIMIT" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x4000B904">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED1">
            <edc:SFRFieldDef edc:cname="MIN" edc:nzwidth="0x8" edc:desc="In breathing mode, when the current duty cycle is less than or equal to this value the breathing apparatus holds \n       the current duty cycle for the period specified by the field LD in register LED_DELAY, then starts incrementing the current duty cycle In blinking mode,\n       this field defines the duty cycle of the blink function."/>
            <edc:SFRFieldDef edc:cname="MAX" edc:nzwidth="0x8" edc:desc="In breathing mode, when the current duty cycle is greater than or equal to this value the breathing apparatus holds \n       the current duty cycle for the period specified by the field HD in register LED_DELAY, then starts decrementing the current duty cycle"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED1" edc:cname="DLY" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFF" edc:_addr="0x4000B908">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED1">
            <edc:SFRFieldDef edc:cname="LOW_PULSE" edc:nzwidth="0xC" edc:desc="The number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal \n       to the value MIN in register LED_LIMIT."/>
            <edc:SFRFieldDef edc:cname="HIGH_PULSE" edc:nzwidth="0xC" edc:desc="In breathing mode, the number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater\n       than or equal to the value MAX in register LED_LIMIT."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED1" edc:cname="STEP" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000B90C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED1">
            <edc:SFRFieldDef edc:cname="S0" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 000."/>
            <edc:SFRFieldDef edc:cname="S1" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 001."/>
            <edc:SFRFieldDef edc:cname="S2" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 010."/>
            <edc:SFRFieldDef edc:cname="S3" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 011."/>
            <edc:SFRFieldDef edc:cname="S4" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 100."/>
            <edc:SFRFieldDef edc:cname="S5" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 101"/>
            <edc:SFRFieldDef edc:cname="S6" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 110."/>
            <edc:SFRFieldDef edc:cname="S7" edc:nzwidth="0x4" edc:desc="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 111."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED1" edc:cname="INTRVL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000B910">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED1">
            <edc:SFRFieldDef edc:cname="I0" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 000b."/>
            <edc:SFRFieldDef edc:cname="I1" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 001b."/>
            <edc:SFRFieldDef edc:cname="I2" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 010b."/>
            <edc:SFRFieldDef edc:cname="I3" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 011b."/>
            <edc:SFRFieldDef edc:cname="I4" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 100b."/>
            <edc:SFRFieldDef edc:cname="I5" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 101b."/>
            <edc:SFRFieldDef edc:cname="I6" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 110b."/>
            <edc:SFRFieldDef edc:cname="I7" edc:nzwidth="0x4" edc:desc="The number of PWM periods between updates to current duty cycle when the segment index is equal to 111b."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="LED1" edc:cname="OUTDLY" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000B914">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="LED1">
            <edc:SFRFieldDef edc:cname="DELAY" edc:nzwidth="0x8" edc:desc="The delay, in counts of the clock defined in Clock Source (CLKSRC), in which output transitions are delayed.\n      When this field is 0, there is no added transition delay. When the LED is programmed to be Always On or Always Off, the\n      Output Delay field has no effect."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x26E8" edc:_addr="0x4000B918"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ0SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E000"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ0EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E004"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ0RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E008"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ0EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E00C"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E010"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ1SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E014"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ1EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E018"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ1RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E01C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ1EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E020"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E024"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ2SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E028"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ2EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E02C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ2RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E030"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ2EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E034"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E038"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ3SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E03C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ3EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E040"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ3RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E044"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ3EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E048"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E04C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ4SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E050"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ4EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E054"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ4RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E058"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ4EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E05C"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E060"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ5SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E064"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ5EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E068"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ5RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E06C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ5EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E070"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E074"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ6SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E078"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ6EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E07C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ6RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E080"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ6EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E084"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E088"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ7SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E08C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ7EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E090"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ7RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E094"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ7EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E098"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E09C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ8SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0A0"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ8EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0A4"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ8RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0A8"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ8EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0AC"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E0B0"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ9SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0B4"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ9EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0B8"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ9RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0BC"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ9EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0C0"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E0C4"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ10SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0C8"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ10EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0CC"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ10RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0D0"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ10EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0D4"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E0D8"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ11SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0DC"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ11EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0E0"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ11RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0E4"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ11EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0E8"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E0EC"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ12SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0F0"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ12EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0F4"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ12RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0F8"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ12EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E0FC"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E100"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ13SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E104"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ13EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E108"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ13RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E10C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ13EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E110"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E114"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ14SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E118"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ14EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E11C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ14RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E120"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ14EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E124"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E128"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ15SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E12C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ15EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E130"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ15RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E134"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ15EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E138"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E13C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ16SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E140"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ16EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E144"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ16RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E148"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ16EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E14C"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E150"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ17SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E154"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ17EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E158"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ17RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E15C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ17EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E160"/>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000E164"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ18SRC" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E168"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ18EN_SET" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E16C"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ18RESULT" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E170"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="GIRQ18EN_CLR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000E174"/>
      <edc:AdjustPoint edc:offset="0x88" edc:_addr="0x4000E178"/>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="BLK_EN_SET" edc:nzwidth="0x20" edc:access="-nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7FFFFFFF" edc:_addr="0x4000E200">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ECIA">
            <edc:SFRFieldDef edc:cname="VTOR_EN_SET" edc:nzwidth="0x1F" edc:desc="Each GIRQx bit can be individually enabled to assert an interrupt event.\n          Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n         the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_ CLEAR bit. (0=disabled, 1=enabled) (R/WS)\n           1=Interrupts in the GIRQx Source Register may be enabled\n               0=No effect."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="BLK_EN_CLR" edc:nzwidth="0x20" edc:access="-nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7FFFFFFF" edc:_addr="0x4000E204">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ECIA">
            <edc:SFRFieldDef edc:cname="VTOR_EN_CLR" edc:nzwidth="0x1F" edc:desc="Each GIRQx bit can be individually disabled to inhibit an interrupt event.\n        Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n         the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_ CLEAR bit. (0=disabled, 1=enabled) (R/WC)\n                 1=All interrupts in the GIRQx Source Register are disabled\n             0=No effect."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="ECIA" edc:cname="BLK_IRQ_VTOR" edc:nzwidth="0x20" edc:access="-------rrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FFFFFF" edc:_addr="0x4000E208">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="ECIA">
            <edc:SFRFieldDef edc:cname="VTOR" edc:nzwidth="0x19" edc:desc="Each bit in this field reports the status of the group GIRQ interrupt assertion to the NVIC. If the GIRQx interrupt\n       is disabled as a group, by the Block Enable Clear Register, then the corresponding bit will be '0'b and no interrupt will be asserted."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x19FC" edc:_addr="0x4000E20C"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="AHB_ERR_ADDR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000FC08"/>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0x4000FC0C"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="AHB_ERR_CTRL" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x4000FC18"/>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x4000FC19"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="INTR_CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000001" edc:mclr="00000000000000000000000000000001" edc:_addr="0x4000FC1C"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="ETM_CTRL" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000FC20"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="DEBUG_CTRL" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x4000FC24">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="EN (JTAG_EN) This bit enables the JTAG/SWD debug port.\n           0= JTAG/SWD port disabled. JTAG/SWD cannot be enabled (i.e., the TRST# pin is ignored and the JTAG signals remain in their non-JTAG state)\n        1= JTAG/SWD port enabled. A high on TRST# enables JTAG or SWD, as determined by SWD_EN."/>
            <edc:SFRFieldDef edc:cname="PIN_CFG" edc:nzwidth="0x2" edc:desc="This field determines which pins are affected by the TRST# debug enable pin.3=Reserved\n           2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins\n           associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial\n          Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required\n                1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin\n           associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug\n             (SWD) and Serial Wire Viewer (SWV) are both required for debugging\n          0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.\n         This setting should be used when the JTAG TAP controller is required for debugging.">
              <edc:SFRFieldSemantic edc:cname="JTAG_TCK_TMS" edc:desc="2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins\n           associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial\n          Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required " edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="JTAG_TCK_TMS_TDO" edc:desc="1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin\n           associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug\n             (SWD) and Serial Wire Viewer (SWV) are both required for debugging" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="JTAG_TCK_TMS_TDO_TDI" edc:desc="0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.\n         This setting should be used when the JTAG TAP controller is required for debugging." edc:when="(field &amp; 0x3) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PU_EN" edc:nzwidth="0x1" edc:desc="If this bit is set to '1b' internal pull-up resistors are automatically enabled on the appropriate debugging port\n         wires whenever the debug port is enabled (the DEBUG_EN bit in this register is '1b' and the JTAG_RST# pin is high). The setting\n              of DEBUG_PIN_CFG determines which pins have pull-ups enabled when the debug port is enabled."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="OTP_LOCK" edc:nzwidth="0x20" edc:access="---------------------------nnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1F" edc:_addr="0x4000FC28">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Test"/>
            <edc:SFRFieldDef edc:cname="MCHIP_LOCK" edc:nzwidth="0x1" edc:desc="This bit controls access to Microchip region of the eFuse memory, bytes 32 to 127. Once written, this bit becomes Read Only.\n          If the JTAG_EN bit is 1 (enabled), the Private Key is inaccessible, independent of the state of this bit.\n             1=The Microchip region is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The Microchip region is accessible."/>
            <edc:SFRFieldDef edc:cname="PRIV_KEY_LOCK" edc:nzwidth="0x1" edc:desc="This bit controls access to Private Key region of the eFuse memory, bytes 0 to 31. Once written, this bit becomes Read Only.\n        If the JTAG_EN bit is 1 (enabled), the Private Key is inaccessible, independent of the state of this bit.\n           1=The Private Key is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The Private Key is accessible."/>
            <edc:SFRFieldDef edc:cname="USER_OTP_LOCK" edc:nzwidth="0x1" edc:desc="This bit controls access to the User region of the eFuse memory, bytes 192 to 511. Once written, this bit becomes Read Only.\n           If the JTAG_EN bit is 1 (enabled), the User region is inaccessible, independent of the state of this bit.\n          1=The User region is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The User region is accessible"/>
            <edc:SFRFieldDef edc:cname="PUB_KEY_LOCK" edc:nzwidth="0x1" edc:desc="This bit controls access to the Public Key region of the eFuse memory, bytes 128 to 191. Once written, this bit becomes Read Only.\n          If the JTAG_EN bit is 1 (enabled), the Public Key is inaccessible, independent of the state of this bit.\n            1=The Public Key is inaccessible (i.e, always returns 0 or 1 for every bit); 0=The Public Key is accessible"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="WDT_CNT" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000FC2C"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="AESH_BSWAP_CTRL" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0x4000FC30">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="IP_BYTE_SWAP_EN" edc:nzwidth="0x1" edc:desc="Used to enable byte swap on a DWORD during AHB read from AES / HASH block: 1=Enable; 0=Disable."/>
            <edc:SFRFieldDef edc:cname="OP_BYTE_SWAP_EN" edc:nzwidth="0x1" edc:desc="Used to enable byte swap on a DWORD during AHB write from AES / HASH block: 1=Enable; 0=Disable."/>
            <edc:SFRFieldDef edc:cname="IP_BLK_SWAP_EN" edc:nzwidth="0x3" edc:desc="Used to enable word swap on a DWORD during AHB read from AES / HASH block\n              4=Swap 32-bit doublewords in 128-byte blocks\n            3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...\n              2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...\n          1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n           0=Disable.">
              <edc:SFRFieldSemantic edc:cname="SWAP_128_BYTE_BLOCK" edc:desc="4=Swap 32-bit doublewords in 128-byte blocks " edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="SWAP_64_BYTE_BLOCK" edc:desc="3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,..." edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="SWAP_16_BYTE_BLOCK" edc:desc="2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,..." edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="SWAP_8_BYTE_BLOCK" edc:desc="1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n" edc:when="(field &amp; 0x7) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0=Disable." edc:when="(field &amp; 0x7) == 0x0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OP_BLK_SWAP_EN" edc:nzwidth="0x3" edc:desc="Used to enable word swap on a DWORD during AHB write from AES / HASH block\n           4=Swap 32-bit doublewords in 128-byte blocks\n                  3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n              0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...\n               2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...\n         1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n            0=Disable.">
              <edc:SFRFieldSemantic edc:cname="SWAP_128_BYTE_BLOCK" edc:desc="4=Swap 32-bit doublewords in 128-byte blocks " edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="SWAP_64_BYTE_BLOCK" edc:desc="3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,..." edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="SWAP_16_BYTE_BLOCK" edc:desc="2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,..." edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="SWAP_8_BYTE_BLOCK" edc:desc="1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n" edc:when="(field &amp; 0x7) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIS" edc:desc="0=Disable." edc:when="(field &amp; 0x7) == 0x0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x4000FC34"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="SYS_SHUTDWN_RST" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x4000FC3C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="SYS_SHDN_RST" edc:nzwidth="0x1" edc:desc="When this bit is asserted 1, the SYS_SHDN# output is deasserted"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000FC40"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="PECI_DIS" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x4000FC44">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="PECI_DISABLE" edc:nzwidth="0x1" edc:desc="When this bit is asserted 1, it disables the PECI pads to reduce leakage."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x18" edc:_addr="0x4000FC48"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="CRYPTO_SRST" edc:nzwidth="0x20" edc:access="-----------------------------nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7" edc:_addr="0x4000FC60">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="RNG_SFT_RST" edc:nzwidth="0x1" edc:desc="When this bit is asserted 1, the Random Number Generator block is reset."/>
            <edc:SFRFieldDef edc:cname="PUB_KEY_SFT_RST" edc:nzwidth="0x1" edc:desc="When this bit is asserted 1, the Public Key block is reset."/>
            <edc:SFRFieldDef edc:cname="AES_HASH_SFT_RST" edc:nzwidth="0x1" edc:desc="When this bit is asserted 1, the AES and Hash blocks are reset."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x4000FC64"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="GPIO_BANK_PWR" edc:nzwidth="0x20" edc:access="------------------------n----nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x87" edc:_addr="0x4000FC68">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="VTR_LVL1" edc:nzwidth="0x1" edc:desc="Voltage value on VTR1. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n               It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n          1=VTR1 is powered by 3.3V\n               0=VTR1 is powered by 1.8V."/>
            <edc:SFRFieldDef edc:cname="VTR_LVL2" edc:nzwidth="0x1" edc:desc="Voltage value on VTR2. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n        It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n       1=VTR2 is powered by 3.3V\n                0=VTR2 is powered by 1.8V."/>
            <edc:SFRFieldDef edc:cname="VTR_LVL3" edc:nzwidth="0x1" edc:desc="Voltage value on VTR3. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n           It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n              1=VTR3 is powered by 3.3V\n                 0=VTR3 is powered by 1.8V."/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="GPIO_BANK_PWR_LOCK" edc:nzwidth="0x1" edc:desc="GPIO Bank Power Lock. 0: VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are R/W\n        1 = VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are Read Only."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x4000FC6C"/>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="JTAG_MCFG" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000011" edc:mclr="00000000000000000000000000000011" edc:impl="0xF" edc:_addr="0x4000FC74">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="JTM_CLK" edc:nzwidth="0x3" edc:desc="This field determines the JTAG Master clock rate, derived from the 48MHz master clock.\n                7=375KHz; 6=750KHz; 5=1.5Mhz; 4=3Mhz; 3=6Mhz; 2=12Mhz; 1=24MHz; 0=Reserved.">
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_375KHz" edc:desc="7=375KHz" edc:when="(field &amp; 0x7) == 0x7"/>
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_750KHz" edc:desc="6=750KHz" edc:when="(field &amp; 0x7) == 0x6"/>
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_1MHz" edc:desc="5=1.5Mhz" edc:when="(field &amp; 0x7) == 0x5"/>
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_3Mhz" edc:desc="4=3Mhz" edc:when="(field &amp; 0x7) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_6Mhz" edc:desc="3=6Mhz" edc:when="(field &amp; 0x7) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_12Mhz" edc:desc="2=12Mhz" edc:when="(field &amp; 0x7) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="JTM_CLK_24MHz" edc:desc="1=24MHz" edc:when="(field &amp; 0x7) == 0x1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="MAS_SLV" edc:nzwidth="0x1" edc:desc="This bit controls the direction of the JTAG port. 1=The JTAG Port is configured as a Master\n          0=The JTAG Port is configures as a Slave."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="JTAG_MSTS" edc:nzwidth="0x20" edc:access="-------------------------------r" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x4000FC78">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="JTM_DONE" edc:nzwidth="0x1" edc:desc="This bit is set to '1b' when the JTAG Master Command Register is written. It becomes '0b' when shifting has completed.\n         Software can poll this bit to determine when a command has completed and it is therefore safe to remove the data in the JTAG Master TDO\n        Register and load new data into the JTAG Master TMS Register and the JTAG Master TDI Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="JTAG_MTDO" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000FC7C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="JTM_TDO" edc:nzwidth="0x20" edc:desc="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted into this register, starting with bit 0,\n        from the JTAG_TDO pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="JTAG_MTDI" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000FC80">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="JTM_TDI" edc:nzwidth="0x20" edc:desc="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n       onto the JTAG_TDI pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="JTAG_MTMS" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4000FC84">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="JTM_TMS" edc:nzwidth="0x20" edc:desc="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n         onto the JTAG_TMS pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EC_REG_BANK" edc:cname="JTAG_MCMD" edc:nzwidth="0x20" edc:access="---------------------------nnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1F" edc:_addr="0x4000FC88">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EC_REG_BANK">
            <edc:SFRFieldDef edc:cname="JTM_COUNT" edc:nzwidth="0x5" edc:desc="If the JTAG Port is configured as a Master, writing this register starts clocking and shifting on the JTAG port. The JTAG\n         Master port will shift JTM_COUNT+1 times, so writing a '0h' will shift 1 bit, and writing '31h' will shift 32 bits. The signal JTAG_CLK\n             will cycle JTM_COUNT+1 times. The contents of the JTAG Master TMS Register and the JTAG Master TDI Register will be shifted out on\n         the falling edge of JTAG_CLK and the.JTAG Master TDO Register will get shifted in on the rising edge of JTAG_CLK.\n                 If the JTAG Port is configured as a Slave, writing this register has no effect."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:SFRDataSector>
    <edc:SFRDataSector edc:regionid="GPIO_REGISTERS" edc:beginaddr="0x40080000" edc:endaddr="0x40082210" edc:rw="rw">
      <edc:AdjustPoint edc:offset="0x100" edc:_addr="0x40080000"/>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SYS_SLP_CTRL" edc:nzwidth="0x20" edc:access="----------------------------nn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xD" edc:_addr="0x40080100">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="SLP_MOD" edc:nzwidth="0x1" edc:desc="Selects the System Sleep mode"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="Test bit"/>
            <edc:SFRFieldDef edc:cname="SLP_ALL" edc:nzwidth="0x1" edc:desc="Initiates the System Sleep mode"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="PROC_CLK_CTRL" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000100" edc:mclr="00000000000000000000000000000100" edc:impl="0xFF" edc:_addr="0x40080104">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="DIV" edc:nzwidth="0x8" edc:desc="Selects the EC clock rate">
              <edc:SFRFieldSemantic edc:cname="DIV_BY_1" edc:desc="1: divide 48 MHz Ring Oscillator by 1" edc:when="(field &amp; 0xFF) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="DIV_BY_3" edc:desc="3: divide 48 MHz Ring Oscillator by 3" edc:when="(field &amp; 0xFF) == 0x3"/>
              <edc:SFRFieldSemantic edc:cname="DIV_BY_4" edc:desc="4: divide 48 MHz Ring Oscillator by 4" edc:when="(field &amp; 0xFF) == 0x4"/>
              <edc:SFRFieldSemantic edc:cname="DIV_BY_16" edc:desc="16: divide 48 MHz Ring Oscillator by 16" edc:when="(field &amp; 0xFF) == 0x10"/>
              <edc:SFRFieldSemantic edc:cname="DIV_BY_48" edc:desc="48: divide 48 MHz Ring Oscillator by 48" edc:when="(field &amp; 0xFF) == 0x30"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SLOW_CLK_CTRL" edc:nzwidth="0x20" edc:access="----------------------nnnnnnnnnn" edc:por="00000000000000000000000111100000" edc:mclr="00000000000000000000000111100000" edc:impl="0x3FF" edc:_addr="0x40080108">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="DIV" edc:nzwidth="0xA" edc:desc="DIV. n=Divide by n; 0=Clock off"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="OSC_ID" edc:nzwidth="0x20" edc:access="-----------------------nnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1FF" edc:_addr="0x4008010C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x8" edc:desc="Test bits"/>
            <edc:SFRFieldDef edc:cname="PLL_LOCK" edc:nzwidth="0x1" edc:desc="PLL Lock Status"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="PWR_RST_STS" edc:nzwidth="0x20" edc:access="-------------------nnn--nnn-nn--" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1CEC" edc:_addr="0x40080110">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="VCC_PWRGD_STS" edc:nzwidth="0x1" edc:desc="Indicates the status of VCC_PWRGD. 0 = PWRGD not asserted. 1 = PWRGD asserte."/>
            <edc:SFRFieldDef edc:cname="RST_H_STS" edc:nzwidth="0x1" edc:desc="Indicates the status of RESET_VCC. 0 = reset active. 1 = reset not active."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="VBAT_RST_STS" edc:nzwidth="0x1" edc:desc="VBAT reset status 0 = No reset occurred while VTR was off or since the last time this bit was cleared. 1 = A reset occurred.(R/WC)"/>
            <edc:SFRFieldDef edc:cname="RST_VTR_STS" edc:nzwidth="0x1" edc:desc="Indicates the status of VTR_RESET.(R/WC)\n        0 = No reset occurred since the last time this bit was cleared.\n                1 = A reset occurred."/>
            <edc:SFRFieldDef edc:cname="JTAG_RST_STS" edc:nzwidth="0x1" edc:desc="Indicates s RESET_SYS was triggered by a JTAG action.(R/WC)\n          0 = No JTAG reset occurred since the last time this bit was cleared.\n           1 = A reset occurred because of a JATAG command."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="_32K_ACTIVE" edc:nzwidth="0x1" edc:desc="32K_ACTIVE"/>
            <edc:SFRFieldDef edc:cname="PCICLK_ACTIVE" edc:nzwidth="0x1" edc:desc="PCICLK_ACTIVE"/>
            <edc:SFRFieldDef edc:cname="ESPI_CLK_ACTIVE" edc:nzwidth="0x1" edc:desc="ESPI_CLK_ACTIVE"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="PWR_RST_CTRL" edc:nzwidth="0x20" edc:access="-----------------------n-------n" edc:por="00000000000000000000000100000001" edc:mclr="00000000000000000000000100000001" edc:impl="0x101" edc:_addr="0x40080114">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="PWR_INV" edc:nzwidth="0x1" edc:desc="Used by FW to control internal RESET_VCC signal function and external PWROK pin. This bit is read-only when VCC_PWRGD\n                is de-asserted low."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="H_RST_SEL" edc:nzwidth="0x1" edc:desc="Determines what generates the internal platform reset signal. 1=LRESET# pin; 0=eSPI PLTRST# VWire"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SYS_RST" edc:nzwidth="0x20" edc:access="-----------------------n--------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x100" edc:_addr="0x40080118">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="SOFT_SYS_RST" edc:nzwidth="0x1" edc:desc="A write of a 1 forces an assertion of the RESET_SYS reset signal, resetting the device. A write of 0 has no effect."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0x4008011C"/>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SLP_EN_0" edc:nzwidth="0x20" edc:access="------------------------------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3" edc:_addr="0x40080130">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="JTAG_STAP_SLP_EN" edc:nzwidth="0x1" edc:desc="JTAG STAP Enable"/>
            <edc:SFRFieldDef edc:cname="OTP_SLP_EN" edc:nzwidth="0x1" edc:desc="eFuse Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SLP_EN_1" edc:nzwidth="0x20" edc:access="nnn----nnnnn--------nnnnnnnn-n-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE1F00FF5" edc:_addr="0x40080134">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="INT_SLP_EN" edc:nzwidth="0x1" edc:desc="Interrupt Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TACH0_SLP_EN" edc:nzwidth="0x1" edc:desc="TACH0 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="PWM0_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PMC_SLP_EN" edc:nzwidth="0x1" edc:desc="PMC Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="DMA_SLP_EN" edc:nzwidth="0x1" edc:desc="DMA Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TFDP_SLP_EN" edc:nzwidth="0x1" edc:desc="TFDP Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PROC_SLP_EN" edc:nzwidth="0x1" edc:desc="PROCESSOR Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="WDT_SLP_EN" edc:nzwidth="0x1" edc:desc="WDT Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="SMB0_SLP_EN" edc:nzwidth="0x1" edc:desc="SMB0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TACH1_SLP_EN" edc:nzwidth="0x1" edc:desc="TACH1 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PWM1_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM1 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PWM2_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM2 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PWM3_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM3 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PWM4_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM4 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PWM5_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM5 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="EC_REG_BANK_SLP_EN" edc:nzwidth="0x1" edc:desc="EC_REG_BANK Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TMR16_0_SLP_EN" edc:nzwidth="0x1" edc:desc="TIMER16_0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TMR16_1_SLP_EN" edc:nzwidth="0x1" edc:desc="TIMER16_1 Sleep Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SLP_EN_2" edc:nzwidth="0x20" edc:access="-------------n-----n---------nn-" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x41006" edc:_addr="0x40080138">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="UART0_SLP_EN" edc:nzwidth="0x1" edc:desc="UART 0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="UART1_SLP_EN" edc:nzwidth="0x1" edc:desc="UART 1 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="GLBL_CFG_SLP_EN" edc:nzwidth="0x1" edc:desc="GLBL_CFG"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="RTC_SLP_EN" edc:nzwidth="0x1" edc:desc="RTC Sleep Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SLP_EN_3" edc:nzwidth="0x20" edc:access="-nn----nnnn---nnnnnnnnn-----n---" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x61E3FE08" edc:_addr="0x4008013C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="ADC_SLP_EN" edc:nzwidth="0x1" edc:desc="ADC Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="GP_SPI0_SLP_EN" edc:nzwidth="0x1" edc:desc="GP SPI0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="HTMR_0_SLP_EN" edc:nzwidth="0x1" edc:desc="HTIMER 0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="KEYSCAN_SLP_EN" edc:nzwidth="0x1" edc:desc="KEYSCAN Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="RPMPWM_SLP_EN" edc:nzwidth="0x1" edc:desc="RPM-PWM Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="SMB1_SLP_EN" edc:nzwidth="0x1" edc:desc="SMB1 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="SMB2_SLP_EN" edc:nzwidth="0x1" edc:desc="SMB2 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="SMB3_SLP_EN" edc:nzwidth="0x1" edc:desc="SMB3 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="LED0_SLP_EN" edc:nzwidth="0x1" edc:desc="LED0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="LED1_SLP_EN" edc:nzwidth="0x1" edc:desc="LED1 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TMR16_2_SLP_EN" edc:nzwidth="0x1" edc:desc="TIMER16_2_Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TMR16_3_SLP_EN" edc:nzwidth="0x1" edc:desc="TIMER16_3 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TMR32_0_SLP_EN" edc:nzwidth="0x1" edc:desc="TIMER32_0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="TMR32_1_SLP_EN" edc:nzwidth="0x1" edc:desc="TIMER32_1 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="HTMR_1_SLP_EN" edc:nzwidth="0x1" edc:desc="HTIMER 1 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="CCTMR_SLP_EN" edc:nzwidth="0x1" edc:desc="Capture Compare Timer Sleep Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="SLP_EN_4" edc:nzwidth="0x20" edc:access="----------------n-nnn--nnnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xB9FD" edc:_addr="0x40080140">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="PWM10_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM10 Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER0_SLP_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER0 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER1_SLP_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER1 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER2_SLP_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER2 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER3_SLP_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER3 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="RTOS_SLP_EN" edc:nzwidth="0x1" edc:desc="PWM6 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="RPMPWM1_SLP_EN" edc:nzwidth="0x1" edc:desc="RPMPWM 1 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="QMSPI_SLP_EN" edc:nzwidth="0x1" edc:desc="Quad SPI Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="RC_ID1_SLP_EN" edc:nzwidth="0x1" edc:desc="RC_ID1 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="RC_ID2_SLP_EN" edc:nzwidth="0x1" edc:desc="RC_ID2 Sleep Enable"/>
            <edc:SFRFieldDef edc:cname="PROCHOT_SLP_EN" edc:nzwidth="0x1" edc:desc="PROCHOT Sleep Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FUJICL_SLP_EN" edc:nzwidth="0x1" edc:desc="Fujitsu Custom Logic Sleep Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0x40080144"/>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="CLK_REQ_0" edc:nzwidth="0x20" edc:access="------------------------------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3" edc:_addr="0x40080150">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="JTAG_STAP_CLK_REQ" edc:nzwidth="0x1" edc:desc="JTAG Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="EFUSE_CLK_REQ" edc:nzwidth="0x1" edc:desc="eFuse Clock Reuqired"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="CLK_REQ_1" edc:nzwidth="0x20" edc:access="nnn----nnnnn--------nnnnnnnn-n-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE1F00FF5" edc:_addr="0x40080154">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="INT_CLK_REQ" edc:nzwidth="0x1" edc:desc="Interrupt Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TACH0_CLK_REQ" edc:nzwidth="0x1" edc:desc="TACH0 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="PWM0_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PMC_CLK_REQ" edc:nzwidth="0x1" edc:desc="PMC Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="DMA_CLK_REQ" edc:nzwidth="0x1" edc:desc="DMA Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TFDP_CLK_REQ" edc:nzwidth="0x1" edc:desc="TFDP Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PROCESSOR_CLK_REQ" edc:nzwidth="0x1" edc:desc="PROCESSOR Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="WDT_CLK_REQ" edc:nzwidth="0x1" edc:desc="WDT Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="SMB0_CLK_REQ" edc:nzwidth="0x1" edc:desc="SMB0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TACH1_CLK_REQ" edc:nzwidth="0x1" edc:desc="TACH1 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PWM1_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM1 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PWM2_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM2 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PWM3_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM3 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PWM4_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM4 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PWM5_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM5 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="EC_REG_BANK_CLK_REQ" edc:nzwidth="0x1" edc:desc="EC_REG_BANK Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TMR16_0_CLK_REQ" edc:nzwidth="0x1" edc:desc="TIMER16_0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TMR16_1_CLK_REQ" edc:nzwidth="0x1" edc:desc="TIMER16_1 Clock Reuqired"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="CLK_REQ_2" edc:nzwidth="0x20" edc:access="-------------n-----n---------nn-" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x41006" edc:_addr="0x40080158">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="UART_0_CLK_REQ" edc:nzwidth="0x1" edc:desc="UART 0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="UART_1_CLK_REQ" edc:nzwidth="0x1" edc:desc="UART 1 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="GLBL_CFG_CLK_REQ" edc:nzwidth="0x1" edc:desc="GLBL_CFG Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="RTC_CLK_REQ" edc:nzwidth="0x1" edc:desc="RTC Clock Reuqired"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="CLK_REQ_3" edc:nzwidth="0x20" edc:access="-nn----nnnn---nnnnnnnnn-----n---" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x61E3FE08" edc:_addr="0x4008015C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="ADC_CLK_REQ" edc:nzwidth="0x1" edc:desc="ADC Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="GP_SPI0_CLK_REQ" edc:nzwidth="0x1" edc:desc="GP SPI0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="HTMR_0_CLK_REQ" edc:nzwidth="0x1" edc:desc="HTIMER 0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="KEYSCAN_CLK_REQ" edc:nzwidth="0x1" edc:desc="KEYSCAN Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="RPMPWM_CLK_REQ" edc:nzwidth="0x1" edc:desc="RPM-PWM Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="SMB1_CLK_REQ" edc:nzwidth="0x1" edc:desc="SMB1 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="SMB2_CLK_REQ" edc:nzwidth="0x1" edc:desc="SMB2 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="SMB3_CLK_REQ" edc:nzwidth="0x1" edc:desc="SMB3 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="LED0_CLK_REQ" edc:nzwidth="0x1" edc:desc="LED0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="LED1_CLK_REQ" edc:nzwidth="0x1" edc:desc="LED1 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TMR16_2_CLK_REQ" edc:nzwidth="0x1" edc:desc="TIMER16_2 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TMR16_3_CLK_REQ" edc:nzwidth="0x1" edc:desc="TIMER16_3 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TMR32_0_CLK_REQ" edc:nzwidth="0x1" edc:desc="TIMER32_0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="TMR32_1_CLK_REQ" edc:nzwidth="0x1" edc:desc="TIMER32_1 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="HTMR_1_CLK_REQ" edc:nzwidth="0x1" edc:desc="HTIMER 1 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="CCTMR_CLK_REQ" edc:nzwidth="0x1" edc:desc="Capture Compare Timer Clock Reuqired"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="CLK_REQ_4" edc:nzwidth="0x20" edc:access="----------------n-nnn--nnnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xB9FD" edc:_addr="0x40080160">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="PWM10_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM10 Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER0_CLK_REQ" edc:nzwidth="0x1" edc:desc="CNT_TMER0 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER1_CLK_REQ" edc:nzwidth="0x1" edc:desc="CNT_TMER1 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER2_CLK_REQ" edc:nzwidth="0x1" edc:desc="CNT_TMER2 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER3_CLK_REQ" edc:nzwidth="0x1" edc:desc="CNT_TMER3 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="RTOS_CLK_REQ" edc:nzwidth="0x1" edc:desc="PWM6 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="RPMPWM1_CLK_REQ" edc:nzwidth="0x1" edc:desc="RPMPWM 1 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="QSPI_CLK_REQ" edc:nzwidth="0x1" edc:desc="Quad SPI Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="RC_ID1_CLK_REQ" edc:nzwidth="0x1" edc:desc="RC_ID1 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="RC_ID2_CLK_REQ" edc:nzwidth="0x1" edc:desc="RC_ID2 Clock Reuqired"/>
            <edc:SFRFieldDef edc:cname="PROCHOT_CLK_REQ" edc:nzwidth="0x1" edc:desc="PROCHOT Clock Reuqired"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FUJICL_CLK_REQ" edc:nzwidth="0x1" edc:desc="Fujitsu Custom Logic Clock Reuqired"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0x40080164"/>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="RST_EN_0" edc:nzwidth="0x20" edc:access="------------------------------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3" edc:_addr="0x40080170">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="JTAG_STAP_RST_EN" edc:nzwidth="0x1" edc:desc="JTAG STAP Reset Enable"/>
            <edc:SFRFieldDef edc:cname="EFUSE_RST_EN" edc:nzwidth="0x1" edc:desc="eFuse Reset Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="RST_EN_1" edc:nzwidth="0x20" edc:access="nnn----nnnnn--------nnnnnnnn-n-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xE1F00FF5" edc:_addr="0x40080174">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="INT_RST_EN" edc:nzwidth="0x1" edc:desc="Interrupt Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TACH0_RST_EN" edc:nzwidth="0x1" edc:desc="TACH0 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="PWM0_RST_EN" edc:nzwidth="0x1" edc:desc="PWM0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PMC_RST_EN" edc:nzwidth="0x1" edc:desc="PMC Reset Enable"/>
            <edc:SFRFieldDef edc:cname="DMA_RST_EN" edc:nzwidth="0x1" edc:desc="DMA Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TFDP_RST_EN" edc:nzwidth="0x1" edc:desc="TFDP Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PROCESSOR_RST_EN" edc:nzwidth="0x1" edc:desc="PROCESSOR Reset Enable"/>
            <edc:SFRFieldDef edc:cname="WDT_RST_EN" edc:nzwidth="0x1" edc:desc="WDT Reset Enable"/>
            <edc:SFRFieldDef edc:cname="SMB0_RST_EN" edc:nzwidth="0x1" edc:desc="SMB0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TACH1_RST_EN" edc:nzwidth="0x1" edc:desc="TACH1 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="PWM1_RST_EN" edc:nzwidth="0x1" edc:desc="PWM1 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PWM2_RST_EN" edc:nzwidth="0x1" edc:desc="PWM2 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PWM3_RST_EN" edc:nzwidth="0x1" edc:desc="PWM3 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PWM4_RST_EN" edc:nzwidth="0x1" edc:desc="PWM4 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PWM5_RST_EN" edc:nzwidth="0x1" edc:desc="PWM5 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="EC_REG_BANK_RST_EN" edc:nzwidth="0x1" edc:desc="EC_REG_BANK Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TMR16_0_RST_EN" edc:nzwidth="0x1" edc:desc="TIMER16_0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TMR16_1_RST_EN" edc:nzwidth="0x1" edc:desc="TIMER16_1 Reset Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="RST_EN_2" edc:nzwidth="0x20" edc:access="-------------n-----n---------nn-" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x41006" edc:_addr="0x40080178">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="UART_0_RST_EN" edc:nzwidth="0x1" edc:desc="UART 0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="UART_1_RST_EN" edc:nzwidth="0x1" edc:desc="UART 1 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="GLBL_CFG_RST_EN" edc:nzwidth="0x1" edc:desc="GLBL_CFG Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="RTC_RST_EN" edc:nzwidth="0x1" edc:desc="RTC Reset Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="RST_EN_3" edc:nzwidth="0x20" edc:access="-nn----nnnn---nnnnnnnnn-----n---" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x61E3FE08" edc:_addr="0x4008017C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="ADC_RST_EN" edc:nzwidth="0x1" edc:desc="ADC Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="GP_SPI0_RST_EN" edc:nzwidth="0x1" edc:desc="GP SPI0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="HTMR_0_RST_EN" edc:nzwidth="0x1" edc:desc="HTIMER 0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="KEYSCAN_RST_EN" edc:nzwidth="0x1" edc:desc="KEYSCAN Reset Enable"/>
            <edc:SFRFieldDef edc:cname="RPMPWM_RST_EN" edc:nzwidth="0x1" edc:desc="RPM-PWM Reset Enable"/>
            <edc:SFRFieldDef edc:cname="SMB1_RST_EN" edc:nzwidth="0x1" edc:desc="SMB1 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="SMB2_RST_EN" edc:nzwidth="0x1" edc:desc="SMB2 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="SMB3_RST_EN" edc:nzwidth="0x1" edc:desc="SMB3 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="LED0_RST_EN" edc:nzwidth="0x1" edc:desc="LED0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="LED1_RST_EN" edc:nzwidth="0x1" edc:desc="LED1 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="TMR16_2_RST_EN" edc:nzwidth="0x1" edc:desc="TIMER16_2 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TMR16_3_RST_EN" edc:nzwidth="0x1" edc:desc="TIMER16_3 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TMR32_0_RST_EN" edc:nzwidth="0x1" edc:desc="TIMER32_0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="TMR32_1_RST_EN" edc:nzwidth="0x1" edc:desc="TIMER32_1 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="HTMR_1_RST_EN" edc:nzwidth="0x1" edc:desc="HTIMER 1 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="CCTMR_RST_EN" edc:nzwidth="0x1" edc:desc="Capture Compare Timer Reset Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="PCR" edc:cname="RST_EN_4" edc:nzwidth="0x20" edc:access="----------------n-nnn--nnnnnnn-n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xB9FD" edc:_addr="0x40080180">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="PCR">
            <edc:SFRFieldDef edc:cname="PWM10_RST_EN" edc:nzwidth="0x1" edc:desc="PWM10 Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER0_RST_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER0 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER1_RST_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER1 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER2_RST_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER2 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="CNT_TMER3_RST_EN" edc:nzwidth="0x1" edc:desc="CNT_TMER3 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="RTOS_RST_EN" edc:nzwidth="0x1" edc:desc="PWM6 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="RPMPWM1_RST_EN" edc:nzwidth="0x1" edc:desc="RPMPWM 1 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="QSPI_RST_EN" edc:nzwidth="0x1" edc:desc="Quad SPI Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="RC_ID1_RST_EN" edc:nzwidth="0x1" edc:desc="RC_ID1 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="RC_ID2_RST_EN" edc:nzwidth="0x1" edc:desc="RC_ID2 Reset Enable"/>
            <edc:SFRFieldDef edc:cname="PROCHOT_RST_EN" edc:nzwidth="0x1" edc:desc="PROCHOT Reset Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FUJICL_RST_EN" edc:nzwidth="0x1" edc:desc="Fujitsu Custom Logic Reset Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xE7C" edc:_addr="0x40080184"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL0" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL1" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL3" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008100C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL4" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL5" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL6" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL7" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008101C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL8" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL9" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL10" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL11" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008102C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL12" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081030">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL13" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081034">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL14" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081038">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL15" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008103C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL16" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081040">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL17" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081044">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL18" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081048">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL19" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008104C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL20" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL21" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL22" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081058">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL23" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008105C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL24" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081060">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL25" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081064">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL26" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081068">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL27" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008106C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL28" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081070">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL29" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081074">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL30" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081078">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL31" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008107C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL32" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081080">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL33" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081084">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL34" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081088">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL35" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008108C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL36" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081090">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL37" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081094">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL38" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081098">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL39" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008109C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL40" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL41" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL42" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL43" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL44" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810B0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL45" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810B4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL46" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810B8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL47" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810BC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL48" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL49" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810C4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL50" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810C8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL51" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810CC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL52" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL53" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL54" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL55" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810DC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL56" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810E0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL57" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810E4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL58" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810E8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL59" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810EC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL60" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810F0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL61" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810F4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL62" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810F8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL63" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400810FC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL64" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081100">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL65" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081104">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL66" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081108">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL67" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008110C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL68" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081110">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL69" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081114">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL70" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081118">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL71" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008111C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL72" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081120">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL73" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081124">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL74" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081128">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL75" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008112C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL76" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081130">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL77" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081134">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL78" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081138">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL79" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008113C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL80" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081140">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL81" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081144">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL82" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081148">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL83" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008114C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL84" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081150">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL85" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081154">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL86" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081158">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL87" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008115C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL88" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081160">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL89" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081164">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL90" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081168">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL91" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008116C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL92" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081170">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL93" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081174">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL94" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081178">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL95" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008117C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL96" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081180">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL97" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081184">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL98" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081188">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL99" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008118C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL100" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081190">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL101" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081194">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL102" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081198">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL103" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008119C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL104" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL105" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL106" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL107" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL108" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811B0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL109" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811B4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL110" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811B8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL111" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811BC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL112" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL113" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811C4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL114" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811C8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL115" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811CC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL116" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL117" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL118" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL119" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811DC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL120" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811E0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL121" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811E4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL122" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811E8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL123" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811EC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL124" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811F0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL125" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811F4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL126" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811F8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL127" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400811FC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL128" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081200">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL129" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081204">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL130" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081208">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL131" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008120C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL132" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081210">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL133" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081214">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL134" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081218">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL135" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008121C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL136" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081220">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL137" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081224">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL138" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081228">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL139" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008122C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL140" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081230">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL141" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081234">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL142" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081238">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL143" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008123C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL144" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081240">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL145" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081244">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL146" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081248">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL147" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008124C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL148" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081250">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL149" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081254">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL150" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081258">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL151" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008125C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL152" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081260">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL153" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081264">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL154" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081268">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL155" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008126C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL156" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081270">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL157" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081274">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL158" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081278">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL159" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008127C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL160" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081280">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL161" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081284">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL162" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081288">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL163" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008128C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL164" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081290">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL165" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081294">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL166" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x40081298">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL167" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x4008129C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL168" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400812A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL169" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400812A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL170" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400812A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL171" edc:nzwidth="0x20" edc:access="-------n-------n--nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1013FFF" edc:_addr="0x400812AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="PU_PD" edc:nzwidth="0x2" edc:desc="These bits are used to enable an internal pull-up or pull-down resistor.\n                00 = None, 01 = Pull Up Enabled, 10 = Pull Down Enabled, 11 = None"/>
            <edc:SFRFieldDef edc:cname="PWR_GATING" edc:nzwidth="0x2" edc:desc="The GPIO pin will be tristated when the selected power well is off.\n            00 = VTR Power Rail, 01 = VCC Main Power Rail (as determined by the VCC_PWRGD input), 1x = Reserved"/>
            <edc:SFRFieldDef edc:cname="INTR_DET" edc:nzwidth="0x3" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n           0 000 = Low Level Sensitive\n               0 001 = High Level Sensitive\n              0 100 = Interrupt events are disabled\n             1 101 = Rising Edge Triggered\n             1 110 = Falling Edge Triggered\n           1 111 = Either edge triggered"/>
            <edc:SFRFieldDef edc:cname="EDGE_EN" edc:nzwidth="0x1" edc:desc="When combined with the field INTERRUPT_DETECTION in this register, determines the interrupt capability of the GPIO input.\n         0 = Edge detection disabled, 1 = Edge detection enabled"/>
            <edc:SFRFieldDef edc:cname="OUT_BUFF_TYPE" edc:nzwidth="0x1" edc:desc="Unless explicitly stated otherwise, pins with (I/O/OD) or (O/OD) in their buffer type column in the tables are\n           compliant with the following Programmable OD/PP Multiplexing Design Rule: Each compliant pin has a programmable open drain/push-pull\n           buffer controlled by the Output Buffer Type bit in the associated Pin Control Register. The state of this bit controls the mode of\n          the interface buffer for all selected functions, including the GPIO function. 0 = Push-Pull, 1 = Open Drain"/>
            <edc:SFRFieldDef edc:cname="GPIO_DIR" edc:nzwidth="0x1" edc:desc="This bit controls the buffer direction only when the MUX_CONTROL field is '00' selecting the pin signal function to\n        be GPIO. When the MUX_CONTROL field is greater than '00' (i.e., a non-GPIO signal function is selected) this bit has no affect\n            and the selected signal function logic directly controls the pin direction. 0 = Input, 1 = Output"/>
            <edc:SFRFieldDef edc:cname="GPIO_OUT_SEL" edc:nzwidth="0x1" edc:desc="This control bit determines which register is used to update the data register for GPIO outputs.\n            0=GPIO output data for this GPIO come from the ALTERNATE_GPIO_DATA field of this register; writes to the bit representing\n              this GPIO in the GPIO Output Register do not affect the GPIO; 1=GPIO output data for this GPIO come from the bit representing\n          this GPIO in the GPIO Output Register; writes to the ALTERNATE_GPIO_DATA field of this register do not affect the GPIO."/>
            <edc:SFRFieldDef edc:cname="POL" edc:nzwidth="0x1" edc:desc="When the Polarity bit is set to '1' and the MUX_CONTROL bits are greater than '00', the selected signal function outputs\n       are inverted and Interrupt Detection sense is inverted. When the MUX_CONTROL field selects the GPIO signal function (Mux='00'), the\n          Polarity bit does not effect the output. Regardless of the state of the MUX_CONTROL field and the Polarity bit, the state of the pin\n         is always reported without inversion in the GPIO input register. 1=Inverted; 0=Non-inverted"/>
            <edc:SFRFieldDef edc:cname="MUX_CTRL" edc:nzwidth="0x2" edc:desc="This field determines the active signal function for a pin. 00 = GPIO Function Selected, 01 = Signal Function 1 Selected,\n              10 = Signal Function 2 Selected, 11 = Signal Function 3 Selected."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="ALT_GPIO_DATA" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the last data written to the GPIO output data register bit; reads do not return the\n          current output value of the GPIO pin if it is configured as an output. If the GPIO_OUTPUT_SEL      T bit in this register is '1', then\n                  this bit is Read Only and the GPIO output data register bit is only written by the GPIO Output Register. If the GPIO_OUTPUT_SELECT\n          bit in this register is '0', then this bit is R/W, and the bit corresponding to this GPIO in the GPIO Output Register is Read Only."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="GPIO_INP" edc:nzwidth="0x1" edc:desc="Reads of this bit always return the state of GPIO input from the pad, independent of the Mux selection for the pin\n      or the Direction. This bit is forced high when the selected power well is off as selected by the POWER_GATING field in this register."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x50" edc:_addr="0x400812B0"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PARIN0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081300"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PARIN1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081304"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PARIN2" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081308"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PARIN3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008130C"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PARIN4" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081310"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PARIN5" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081314"/>
      <edc:AdjustPoint edc:offset="0x68" edc:_addr="0x40081318"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PAROUT0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081380"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PAROUT1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081384"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PAROUT2" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081388"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PAROUT3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008138C"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PAROUT4" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081390"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="PAROUT5" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40081394"/>
      <edc:AdjustPoint edc:offset="0x168" edc:_addr="0x40081398"/>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P0" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081500">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P1" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081504">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P2" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081508">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P3" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008150C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P4" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081510">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P5" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081514">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P6" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081518">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P7" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008151C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P8" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081520">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P9" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081524">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P10" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081528">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P11" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008152C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P12" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081530">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P13" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081534">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P14" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081538">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P15" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008153C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P16" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081540">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P17" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081544">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P18" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081548">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P19" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008154C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P20" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081550">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P21" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081554">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P22" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081558">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P23" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008155C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P24" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081560">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P25" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081564">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P26" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081568">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P27" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008156C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P28" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081570">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P29" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081574">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P30" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081578">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P31" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008157C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P32" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081580">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P33" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081584">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P34" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081588">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P35" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008158C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P36" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081590">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P37" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081594">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P38" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081598">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P39" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008159C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P40" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P41" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P42" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P43" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P44" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815B0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P45" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815B4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P46" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815B8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P47" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815BC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P48" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P49" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815C4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P50" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815C8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P51" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815CC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P52" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P53" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P54" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P55" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815DC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P56" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815E0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P57" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815E4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P58" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815E8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P59" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815EC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P60" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815F0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P61" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815F4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P62" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815F8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P63" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400815FC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P64" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081600">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P65" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081604">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P66" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081608">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P67" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008160C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P68" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081610">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P69" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081614">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P70" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081618">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P71" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008161C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P72" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081620">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P73" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081624">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P74" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081628">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P75" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008162C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P76" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081630">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P77" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081634">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P78" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081638">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P79" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008163C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P80" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081640">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P81" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081644">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P82" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081648">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P83" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008164C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P84" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081650">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P85" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081654">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P86" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081658">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P87" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008165C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P88" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081660">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P89" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081664">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P90" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081668">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P91" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008166C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P92" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081670">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P93" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081674">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P94" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081678">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P95" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008167C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P96" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081680">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P97" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081684">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P98" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081688">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P99" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008168C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P100" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081690">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P101" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081694">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P102" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081698">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P103" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008169C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P104" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P105" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P106" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P107" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P108" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816B0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P109" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816B4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P110" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816B8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P111" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816BC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P112" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816C0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P113" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816C4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P114" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816C8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P115" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816CC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P116" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816D0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P117" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816D4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P118" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816D8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P119" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816DC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P120" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816E0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P121" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816E4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P122" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816E8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P123" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816EC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P124" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816F0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P125" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816F4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P126" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816F8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P127" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400816FC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P128" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081700">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P129" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081704">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P130" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081708">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P131" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008170C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P132" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081710">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P133" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081714">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P134" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081718">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P135" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008171C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P136" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081720">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P137" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081724">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P138" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081728">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P139" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008172C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P140" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081730">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P141" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081734">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P142" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081738">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P143" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008173C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P144" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081740">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P145" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081744">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P146" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081748">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P147" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008174C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P148" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081750">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P149" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081754">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P150" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081758">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P151" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008175C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P152" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081760">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P153" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081764">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P154" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081768">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P155" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008176C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P156" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081770">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P157" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081774">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P158" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081778">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P159" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008177C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P160" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081780">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P161" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081784">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P162" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081788">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P163" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008178C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P164" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081790">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P165" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081794">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P166" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x40081798">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P167" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x4008179C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P168" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400817A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P169" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400817A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P170" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400817A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="GPIO" edc:cname="CTRL2P171" edc:nzwidth="0x20" edc:access="--------------------------nn---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x31" edc:_addr="0x400817AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="GPIO">
            <edc:SFRFieldDef edc:cname="SLEW_RATE" edc:nzwidth="0x1" edc:desc="This bit is used to select the slew rate on the pin. 0 = slow (half frequency), 1 = fast"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="DRIV_STREN" edc:nzwidth="0x2" edc:desc="These bits are used to select the drive strength on the pin. The drive strength is the same whether the pin is\n          powered by 3.3V or 1.8V. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x850" edc:_addr="0x400817B0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="CTRL" edc:nzwidth="0x10" edc:access="-----------nnnnn" edc:por="0000000000010000" edc:mclr="0000000000010000" edc:impl="0x1F" edc:_addr="0x40082000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EFUSE">
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="Block enable: 1=block is enabled for operation; 0=block is disabled and in lowest power state."/>
            <edc:SFRFieldDef edc:cname="RST" edc:nzwidth="0x1" edc:desc="Block reset: 1=Block is reset; 0=Normal operation. This bit self-clears and always reads back 0."/>
            <edc:SFRFieldDef edc:cname="EXT_PGM" edc:nzwidth="0x1" edc:desc="External programming enable: 1=eFUSE programming is done via external pin interface 0=Manual/Normal mode.\n         eFUSE programming is done via this block's register set."/>
            <edc:SFRFieldDef edc:cname="FSOURCE_EN_PRGM" edc:nzwidth="0x1" edc:desc="FSOURCE pin enable for programming: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for PROGRAM mode.\n         Only set this bit when FSOURCE_EN_READ bit is already 0 to avoid shorting the power pad to ground;\n                  0=FSOURCE switch logic isolates eFUSE FSOURCE pin from power pad."/>
            <edc:SFRFieldDef edc:cname="FSOURCE_EN_READ" edc:nzwidth="0x1" edc:desc="FSOURCE pin enable for reading: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for read mode.\n        Only set this bit when FSOURCE_EN_PRGM bit is already 0 to avoid shorting the power pad to ground;\n          0=FSOURCE switch logic isolates eFUSE FSOURCE pin from ground."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x40082002"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="MAN_CTRL" edc:nzwidth="0x10" edc:access="----------nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3F" edc:_addr="0x40082004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EFUSE">
            <edc:SFRFieldDef edc:cname="MAN_ENABLE" edc:nzwidth="0x1" edc:desc="Manual mode enable bit: 1=Manual mode is enabled and this register interfaces to the eFUSE;\n         0=Normal mode, internal controller interfaces to eFUSE IP. This bit only takes affect when REG_CTRL.EXT_PRGM bit is 0."/>
            <edc:SFRFieldDef edc:cname="IP_CS" edc:nzwidth="0x1" edc:desc="eFUSE chip select (CS) pin: 1=eFUSE is enabled for PROGRAM/READ modes; 0=eFUSE is disabled and in low power state."/>
            <edc:SFRFieldDef edc:cname="IP_PRGM_EN" edc:nzwidth="0x1" edc:desc="eFUSE program enable. Can also be considered the write signal: 1=eFUSE is programming; 0=eFUSE is in read mode."/>
            <edc:SFRFieldDef edc:cname="IP_PRCHG" edc:nzwidth="0x1" edc:desc="eFUSE precharge: 1=outputs are being precharged; 0=outputs are not precharged."/>
            <edc:SFRFieldDef edc:cname="IP_SENSE_PULSE" edc:nzwidth="0x1" edc:desc="eFUSE sense, outputs are valid on falling edge of this bit."/>
            <edc:SFRFieldDef edc:cname="IP_OE" edc:nzwidth="0x1" edc:desc="eFUSE output enable. The IP might tri-state at various times, so this bit isolates the outputs to avoid potential crowbar.\n        1=eFUSE outputs enabled for read; 0=eFUSE outputs isolated"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="MAN_MOD_ADDR" edc:nzwidth="0x20" edc:access="--------------------nnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFF" edc:_addr="0x40082006">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EFUSE">
            <edc:SFRFieldDef edc:cname="IP_ADDR_LO" edc:nzwidth="0xA" edc:desc="Manual mode address, selecting the bit address within a 1K bit block."/>
            <edc:SFRFieldDef edc:cname="IP_ADDR_HI" edc:nzwidth="0x2" edc:desc="Manual mode address, selecting a 1K bit block of eFuse data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x4008200A"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="MAN_MOD_DATA" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x4008200C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="EFUSE">
            <edc:SFRFieldDef edc:cname="IP_DATA" edc:nzwidth="0x10" edc:desc="Manual mode data: This field connects to the eFUSE data output pins."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082010"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082014"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW2" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082018"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008201C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW4" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082020"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW5" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082024"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW6" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082028"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW7" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008202C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW8" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082030"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW9" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082034"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW10" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082038"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW11" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008203C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW12" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082040"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW13" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082044"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW14" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082048"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW15" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008204C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW16" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082050"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW17" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082054"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW18" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082058"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW19" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008205C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW20" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082060"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW21" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082064"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW22" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082068"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW23" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008206C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW24" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082070"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW25" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082074"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW26" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082078"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW27" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008207C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW28" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082080"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW29" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082084"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW30" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082088"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW31" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008208C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW32" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082090"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW33" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082094"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW34" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082098"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW35" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008209C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW36" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820A0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW37" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820A4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW38" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820A8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW39" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820AC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW40" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820B0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW41" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820B4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW42" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820B8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW43" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820BC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW44" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820C0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW45" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820C4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW46" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820C8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW47" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820CC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW48" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820D0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW49" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820D4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW50" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820D8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW51" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820DC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW52" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820E0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW53" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820E4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW54" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820E8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW55" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820EC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW56" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820F0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW57" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820F4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW58" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820F8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW59" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400820FC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW60" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082100"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW61" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082104"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW62" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082108"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW63" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008210C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW64" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082110"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW65" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082114"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW66" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082118"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW67" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008211C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW68" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082120"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW69" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082124"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW70" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082128"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW71" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008212C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW72" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082130"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW73" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082134"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW74" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082138"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW75" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008213C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW76" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082140"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW77" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082144"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW78" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082148"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW79" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008214C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW80" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082150"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW81" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082154"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW82" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082158"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW83" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008215C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW84" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082160"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW85" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082164"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW86" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082168"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW87" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008216C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW88" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082170"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW89" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082174"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW90" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082178"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW91" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008217C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW92" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082180"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW93" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082184"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW94" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082188"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW95" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008218C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW96" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082190"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW97" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082194"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW98" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082198"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW99" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008219C"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW100" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821A0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW101" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821A4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW102" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821A8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW103" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821AC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW104" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821B0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW105" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821B4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW106" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821B8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW107" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821BC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW108" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821C0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW109" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821C4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW110" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821C8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW111" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821CC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW112" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821D0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW113" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821D4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW114" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821D8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW115" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821DC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW116" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821E0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW117" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821E4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW118" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821E8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW119" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821EC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW120" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821F0"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW121" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821F4"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW122" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821F8"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW123" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400821FC"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW124" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082200"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW125" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082204"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW126" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x40082208"/>
      <edc:SFRDef ltx:memberofperipheral="EFUSE" edc:cname="EFUSE_MEM_DW127" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x4008220C"/>
    </edc:SFRDataSector>
    <edc:SFRDataSector edc:regionid="HOST_DEVICE_REGISTERS" edc:beginaddr="0x400F0000" edc:endaddr="0x400FFF24" edc:rw="rw">
      <edc:AdjustPoint edc:offset="0x5000" edc:_addr="0x400F0000"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="SEC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5000"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="SEC_ALARM" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5001"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="MIN" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5002"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="MIN_ALARM" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5003"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="HR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5004"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="HR_ALARM" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5005"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="DAY_OF_WK" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5006"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="DAY_OF_MON" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5007"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="MONTH" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5008"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="YEAR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F5009"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="REGA" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F500A"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="REGB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F500B"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="REGC" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F500C"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="REGD" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400F500D"/>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x400F500E"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0x400F5010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTC">
            <edc:SFRFieldDef edc:cname="BLK_EN" edc:nzwidth="0x1" edc:desc="BLK_EN This bit must be '1' in order for the block to function internally. Registers may be initialized first, before\n      setting this bit to '1' to start operation."/>
            <edc:SFRFieldDef edc:cname="SOFT_RST" edc:nzwidth="0x1" edc:desc="SOFT_RST A '1' written to this bit position will trigger the RTC_RST reset, resetting the block and all registers except\n      this one and the Test Register. This bit is self-clearing at the end of the reset, one cycle of Host Bus Clock later, and so requires\n      no waiting."/>
            <edc:SFRFieldDef edc:cname="TEST" edc:nzwidth="0x1" edc:desc="TEST"/>
            <edc:SFRFieldDef edc:cname="ALM_EN" edc:nzwidth="0x1" edc:desc="ALM_EN  1=Enables the Alarm features, 0=Disables the Alarm features"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="WK_ALARM" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x400F5014"/>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="DAYLT_SAVF" edc:nzwidth="0x20" edc:access="nnnnnnnn-----nnn-----nnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF0707FF" edc:_addr="0x400F5018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTC">
            <edc:SFRFieldDef edc:cname="DST_MON" edc:nzwidth="0x8" edc:desc="This field matches the Month Register."/>
            <edc:SFRFieldDef edc:cname="DST_DAY_OF_WK" edc:nzwidth="0x3" edc:desc="This field matches the Day of Week Register bits[2:0]."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="DST_WK" edc:nzwidth="0x3" edc:desc="5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="DST_HR" edc:nzwidth="0x7" edc:desc="This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n      to the 24/12 Hour mode and DM mode settings at the time of writing."/>
            <edc:SFRFieldDef edc:cname="DST_AM_PM" edc:nzwidth="0x1" edc:desc="This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n      of writing."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="RTC" edc:cname="DAYLT_SAVB" edc:nzwidth="0x20" edc:access="nnnnnnnn-----nnn-----nnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF0707FF" edc:_addr="0x400F501C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="RTC">
            <edc:SFRFieldDef edc:cname="DST_MON" edc:nzwidth="0x8" edc:desc="This field matches the Month Register."/>
            <edc:SFRFieldDef edc:cname="DST_DAY_OF_WK" edc:nzwidth="0x3" edc:desc="This field matches the Day of Week Register bits[2:0]."/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="DST_WK" edc:nzwidth="0x3" edc:desc="5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="DST_HR" edc:nzwidth="0x7" edc:desc="This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n      to the 24/12 Hour mode and DM mode settings at the time of writing."/>
            <edc:SFRFieldDef edc:cname="DST_AM_PM" edc:nzwidth="0x1" edc:desc="This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n      of writing."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xAEE7" edc:_addr="0x400F5020"/>
      <edc:SFRDef ltx:memberofperipheral="GCR" edc:cname="LDN" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400FFF07"/>
      <edc:AdjustPoint edc:offset="0x18" edc:_addr="0x400FFF08"/>
      <edc:SFRDef ltx:memberofperipheral="GCR" edc:cname="DEV_ID" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00110001" edc:mclr="00110001" edc:_addr="0x400FFF20"/>
      <edc:SFRDef ltx:memberofperipheral="GCR" edc:cname="DEV_REV" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:_addr="0x400FFF21"/>
    </edc:SFRDataSector>
    <edc:GPRDataSector edc:regionid="CRYPTO_RAM" edc:beginaddr="0x40100000" edc:endaddr="0x40106000" edc:rw="rw"/>
    <edc:SFRDataSector edc:regionid="SCS" edc:beginaddr="0xE000E000" edc:endaddr="0xE000EF04" edc:rw="rw">
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0xE000E000"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="ICTR" edc:impl="0xF" edc:access="----------------------------rrrr" edc:por="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Interrupt Controller Type Register" edc:_addr="0xE000E004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0">
            <edc:SFRFieldDef edc:nzwidth="0x4" edc:cname="INTLINESNUM" edc:desc="Number of interrupt lines supported by NVIC in granularities of 32."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ACTLR" edc:nzwidth="0x20" edc:access="----------------------nn-----nnn" edc:impl="0x307" edc:_addr="0xE000E008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="DISMCYCINT" edc:nzwidth="0x1" edc:desc="Disable interruption of LDM/STM instructions"/>
            <edc:SFRFieldDef edc:cname="DISDEFWBUF" edc:nzwidth="0x1" edc:desc="Disable wruite buffer use during default memory map accesses"/>
            <edc:SFRFieldDef edc:cname="DISFOLD" edc:nzwidth="0x1" edc:desc="Disable IT folding"/>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="DISFPCA" edc:nzwidth="0x1" edc:desc="Disable automatic update of CONTROL.FPCA"/>
            <edc:SFRFieldDef edc:cname="DISOOFP" edc:nzwidth="0x1" edc:desc="Disable out-of-order FP instructions"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0xE000E00C"/>
      <edc:SFRDef ltx:memberofperipheral="SysTick" edc:cname="CSR" edc:nzwidth="0x20" edc:access="---------------n-------------nnn" edc:por="00000000000000000000000000000100" edc:mclr="00000000000000000000000000000100" edc:impl="0x10007" edc:_addr="0xE000E010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SysTick">
            <edc:SFRFieldDef edc:cname="ENABLE" edc:nzwidth="0x1" edc:desc="SysTick Counter Enable">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Counter disabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Counter enabled" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="TICKINT" edc:nzwidth="0x1" edc:desc="SysTick Exception Request Enable">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Counting down to 0 does not assert the SysTick exception request" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Counting down to 0 asserts the SysTick exception request" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CLKSOURCE" edc:nzwidth="0x1" edc:desc="Clock Source 0=external, 1=processor">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="External clock" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Processor clock" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xD"/>
            <edc:SFRFieldDef edc:cname="COUNTFLAG" edc:nzwidth="0x1" edc:desc="Timer counted to 0 since last read of register"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SysTick" edc:cname="RVR" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:impl="0xFFFFFF" edc:_addr="0xE000E014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SysTick">
            <edc:SFRFieldDef edc:cname="RELOAD" edc:nzwidth="0x18" edc:desc="Value to load into the SysTick Current Value Register when the counter reaches 0"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SysTick" edc:cname="CVR" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:impl="0xFFFFFF" edc:_addr="0xE000E018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SysTick">
            <edc:SFRFieldDef edc:cname="CURRENT" edc:nzwidth="0x18" edc:desc="Current value at the time the register is accessed"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SysTick" edc:cname="CALIB" edc:nzwidth="0x20" edc:access="rr------rrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xC0FFFFFF" edc:_addr="0xE000E01C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SysTick">
            <edc:SFRFieldDef edc:cname="TENMS" edc:nzwidth="0x18" edc:desc="Reload value to use for 10ms timing"/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="SKEW" edc:nzwidth="0x1" edc:desc="TENMS is rounded from non-integer ratio">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="10ms calibration value is exact" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="10ms calibration value is inexact, because of the clock frequency" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="NOREF" edc:nzwidth="0x1" edc:desc="No Separate Reference Clock">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="The reference clock is provided" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="The reference clock is not provided" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xE0" edc:_addr="0xE000E020"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="ISER0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xE000E100">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="SETENA" edc:nzwidth="0x20" edc:desc="Interrupt set enable bits"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7C" edc:_addr="0xE000E104"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="ICER0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xE000E180">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="CLRENA" edc:nzwidth="0x20" edc:desc="Interrupt clear-enable bits"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7C" edc:_addr="0xE000E184"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="ISPR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xE000E200">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="SETPEND" edc:nzwidth="0x20" edc:desc="Interrupt set-pending bits"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7C" edc:_addr="0xE000E204"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="ICPR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xE000E280">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="CLRPEND" edc:nzwidth="0x20" edc:desc="Interrupt clear-pending bits"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x7C" edc:_addr="0xE000E284"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IABR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xE000E300">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="ACTIVE" edc:nzwidth="0x20" edc:desc="Interrupt active bits"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xFC" edc:_addr="0xE000E304"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP0" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E400">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP1" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E401">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP2" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E402">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP3" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E403">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP4" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP5" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E405">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP6" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E406">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="IP7" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0xE000E407">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="PRI0" edc:nzwidth="0x3" edc:desc="Priority of interrupt n"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8F8" edc:_addr="0xE000E408"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="CPUID" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="01000001000011111100001001000000" edc:mclr="01000001000011111100001001000000" edc:_addr="0xE000ED00">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="REVISION" edc:nzwidth="0x4" edc:desc="Processor revision number"/>
            <edc:SFRFieldDef edc:cname="PARTNO" edc:nzwidth="0xC" edc:desc="Process Part Number, 0xC24=Cortex-M4"/>
            <edc:SFRFieldDef edc:cname="CONSTANT" edc:nzwidth="0x4" edc:desc="Constant"/>
            <edc:SFRFieldDef edc:cname="VARIANT" edc:nzwidth="0x4" edc:desc="Variant number"/>
            <edc:SFRFieldDef edc:cname="IMPLEMENTER" edc:nzwidth="0x8" edc:desc="Implementer code, 0x41=ARM"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ICSR" edc:nzwidth="0x20" edc:access="n--nnnn-nn----nnnnnnn--nnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x9EC3F9FF" edc:_addr="0xE000ED04">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="VECTACTIVE" edc:nzwidth="0x9" edc:desc="Active exception number"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="RETTOBASE" edc:nzwidth="0x1" edc:desc="No preempted active exceptions to execute"/>
            <edc:SFRFieldDef edc:cname="VECTPENDING" edc:nzwidth="0x6" edc:desc="Exception number of the highest priority pending enabled exception"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="ISRPENDING" edc:nzwidth="0x1" edc:desc="Interrupt pending flag"/>
            <edc:SFRFieldDef edc:cname="ISRPREEMPT" edc:nzwidth="0x1" edc:desc="Debug only"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="PENDSTCLR" edc:nzwidth="0x1" edc:desc="SysTick clear-pending bit">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="No effect" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Removes the pending state from the SysTick exception" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PENDSTSET" edc:nzwidth="0x1" edc:desc="SysTick set-pending bit">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Write: no effect; read: SysTick exception is not pending" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Write: changes SysTick exception state to pending; read: SysTick exception is pending" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PENDSVCLR" edc:nzwidth="0x1" edc:desc="PendSV clear-pending bit">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="No effect" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Removes the pending state from the PendSV exception" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PENDSVSET" edc:nzwidth="0x1" edc:desc="PendSV set-pending bit">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Write: no effect; read: PendSV exception is not pending" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Write: changes PendSV exception state to pending; read: PendSV exception is pending" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="NMIPENDSET" edc:nzwidth="0x1" edc:desc="NMI set-pending bit">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Write: no effect; read: NMI exception is not pending" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Write: changes NMI exception state to pending; read: NMI exception is pending" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0xE000ED08"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="AIRCR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnn----nnn-----nnn" edc:por="11111010000001010000000000000000" edc:mclr="11111010000001010000000000000000" edc:impl="0xFFFF8707" edc:_addr="0xE000ED0C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="VECTRESET" edc:nzwidth="0x1" edc:desc="Must write 0"/>
            <edc:SFRFieldDef edc:cname="VECTCLRACTIVE" edc:nzwidth="0x1" edc:desc="Must write 0"/>
            <edc:SFRFieldDef edc:cname="SYSRESETREQ" edc:nzwidth="0x1" edc:desc="System Reset Request">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="No system reset request" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Asserts a signal to the outer system that requests a reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="PRIGROUP" edc:nzwidth="0x3" edc:desc="Interrupt priority grouping"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="ENDIANNESS" edc:nzwidth="0x1" edc:desc="Data endianness, 0=little, 1=big">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Little-endian" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Big-endian" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="VECTKEY" edc:nzwidth="0x10" edc:desc="Register key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="SCR" edc:nzwidth="0x20" edc:access="---------------------------n-nn-" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x16" edc:_addr="0xE000ED10">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SLEEPONEXIT" edc:nzwidth="0x1" edc:desc="Sleep-on-exit on handler return">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Do not sleep when returning to Thread mode" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Enter sleep, or deep sleep, on return from an ISR" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SLEEPDEEP" edc:nzwidth="0x1" edc:desc="Deep Sleep used as low power mode">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Sleep" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Deep sleep" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SEVONPEND" edc:nzwidth="0x1" edc:desc="Send Event on Pending bit">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Only enabled interrupts or events can wakeup the processor, disabled interrupts are excluded" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Enabled events and all interrupts, including disabled interrupts, can wakeup the processor" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="CCR" edc:nzwidth="0x20" edc:access="----------------------nn---nn-nn" edc:por="00000000000000000000001000000000" edc:mclr="00000000000000000000001000000000" edc:impl="0x31B" edc:_addr="0xE000ED14">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="NONBASETHRDENA" edc:nzwidth="0x1" edc:desc="Indicates how processor enters Thread mode"/>
            <edc:SFRFieldDef edc:cname="USERSETMPEND" edc:nzwidth="0x1" edc:desc="Enables unprivileged software access to STIR register"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="UNALIGN_TRP" edc:nzwidth="0x1" edc:desc="Enables unaligned access traps">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="Do not trap unaligned halfword and word accesses" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="Trap unaligned halfword and word accesses" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DIV_0_TRP" edc:nzwidth="0x1" edc:desc="Enables divide by 0 trap"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="BFHFNMIGN" edc:nzwidth="0x1" edc:desc="Ignore LDM/STM BusFault for -1/-2 priority handlers"/>
            <edc:SFRFieldDef edc:cname="STKALIGN" edc:nzwidth="0x1" edc:desc="Indicates stack alignment on exception entry">
              <edc:SFRFieldSemantic edc:cname="VALUE_0" edc:desc="4-byte aligned" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="VALUE_1" edc:desc="8-byte aligned" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="SHPR1" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:impl="0xFFFFFF" edc:_addr="0xE000ED18">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="PRI_4" edc:nzwidth="0x8" edc:desc="Priority of system handler 4, MemManage"/>
            <edc:SFRFieldDef edc:cname="PRI_5" edc:nzwidth="0x8" edc:desc="Priority of system handler 5, BusFault"/>
            <edc:SFRFieldDef edc:cname="PRI_6" edc:nzwidth="0x8" edc:desc="Priority of system handler 6, UsageFault"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="SHPR2" edc:nzwidth="0x20" edc:access="nnnnnnnn------------------------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF000000" edc:_addr="0xE000ED1C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:AdjustPoint edc:offset="0x18"/>
            <edc:SFRFieldDef edc:cname="PRI_11" edc:nzwidth="0x8" edc:desc="Priority of system handler 11, SVCall"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="SHPR3" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn----------------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF0000" edc:_addr="0xE000ED20">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:AdjustPoint edc:offset="0x10"/>
            <edc:SFRFieldDef edc:cname="PRI_14" edc:nzwidth="0x8" edc:desc="Priority of system handler 14, PendSV"/>
            <edc:SFRFieldDef edc:cname="PRI_15" edc:nzwidth="0x8" edc:desc="Priority of system handler 15, SysTick exception"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="SHCSR" edc:nzwidth="0x20" edc:access="-------------nnnnnnnnn-nn---n-nn" edc:impl="0x7FD8B" edc:_addr="0xE000ED24">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="MEMFAULTACT" edc:nzwidth="0x1" edc:desc="MemManage exception active bit"/>
            <edc:SFRFieldDef edc:cname="BUSFAULTACT" edc:nzwidth="0x1" edc:desc="BusFault exception active bit"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="USGFAULTACT" edc:nzwidth="0x1" edc:desc="UsageFault exception active bit"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="SVCALLACT" edc:nzwidth="0x1" edc:desc="SVCall active bit"/>
            <edc:SFRFieldDef edc:cname="MONITORACT" edc:nzwidth="0x1" edc:desc="DebugMonitor exception active bit"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="PENDSVACT" edc:nzwidth="0x1" edc:desc="PendSV exception active bit"/>
            <edc:SFRFieldDef edc:cname="SYSTICKACT" edc:nzwidth="0x1" edc:desc="SysTick exception active bit"/>
            <edc:SFRFieldDef edc:cname="USGFAULTPENDED" edc:nzwidth="0x1" edc:desc="UsageFault exception pending bit"/>
            <edc:SFRFieldDef edc:cname="MEMFAULTPENDED" edc:nzwidth="0x1" edc:desc="MemManage exception pending bit"/>
            <edc:SFRFieldDef edc:cname="BUSFAULTPENDED" edc:nzwidth="0x1" edc:desc="BusFault exception pending bit"/>
            <edc:SFRFieldDef edc:cname="SVCALLPENDED" edc:nzwidth="0x1" edc:desc="SVCall pending bit"/>
            <edc:SFRFieldDef edc:cname="MEMFAULTENA" edc:nzwidth="0x1" edc:desc="MemManage enable bit"/>
            <edc:SFRFieldDef edc:cname="BUSFAULTENA" edc:nzwidth="0x1" edc:desc="BusFault enable bit"/>
            <edc:SFRFieldDef edc:cname="USGFAULTENA" edc:nzwidth="0x1" edc:desc="UsageFault enable bit"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="CFSR" edc:nzwidth="0x20" edc:access="------nn----nnnnn-nnnnnnn-nnn-nn" edc:impl="0x30FBFBB" edc:_addr="0xE000ED28">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="IACCVIOL" edc:nzwidth="0x1" edc:desc="Instruction access violation"/>
            <edc:SFRFieldDef edc:cname="DACCVIOL" edc:nzwidth="0x1" edc:desc="Data access violation"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="MUNSTKERR" edc:nzwidth="0x1" edc:desc="MemManage Fault on unstacking for exception return"/>
            <edc:SFRFieldDef edc:cname="MSTKERR" edc:nzwidth="0x1" edc:desc="MemManage Fault on stacking for exception entry"/>
            <edc:SFRFieldDef edc:cname="MLSPERR" edc:nzwidth="0x1" edc:desc="MemManager Fault occured during FP lazy state preservation"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="MMARVALID" edc:nzwidth="0x1" edc:desc="MemManage Fault Address Register valid"/>
            <edc:SFRFieldDef edc:cname="IBUSERR" edc:nzwidth="0x1" edc:desc="Instruction bus error"/>
            <edc:SFRFieldDef edc:cname="PRECISERR" edc:nzwidth="0x1" edc:desc="Precise data bus error"/>
            <edc:SFRFieldDef edc:cname="IMPRECISERR" edc:nzwidth="0x1" edc:desc="Imprecise data bus error"/>
            <edc:SFRFieldDef edc:cname="UNSTKERR" edc:nzwidth="0x1" edc:desc="BusFault on unstacking for exception return"/>
            <edc:SFRFieldDef edc:cname="STKERR" edc:nzwidth="0x1" edc:desc="BusFault on stacking for exception entry"/>
            <edc:SFRFieldDef edc:cname="LSPERR" edc:nzwidth="0x1" edc:desc="BusFault occured during FP lazy state preservation"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="BFARVALID" edc:nzwidth="0x1" edc:desc="BusFault Address Register valid"/>
            <edc:SFRFieldDef edc:cname="UNDEFINSTR" edc:nzwidth="0x1" edc:desc="Undefined instruction UsageFault"/>
            <edc:SFRFieldDef edc:cname="INVSTATE" edc:nzwidth="0x1" edc:desc="Invalid state UsageFault"/>
            <edc:SFRFieldDef edc:cname="INVPC" edc:nzwidth="0x1" edc:desc="Invalid PC load UsageFault"/>
            <edc:SFRFieldDef edc:cname="NOCP" edc:nzwidth="0x1" edc:desc="No coprocessor UsageFault"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="UNALIGNED" edc:nzwidth="0x1" edc:desc="Unaligned access UsageFault"/>
            <edc:SFRFieldDef edc:cname="DIVBYZERO" edc:nzwidth="0x1" edc:desc="Divide by zero UsageFault"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="HFSR" edc:nzwidth="0x20" edc:access="nn----------------------------n-" edc:impl="0xC0000002" edc:_addr="0xE000ED2C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="VECTTBL" edc:nzwidth="0x1" edc:desc="BusFault on a Vector Table read during exception processing"/>
            <edc:AdjustPoint edc:offset="0x1C"/>
            <edc:SFRFieldDef edc:cname="FORCED" edc:nzwidth="0x1" edc:desc="Forced Hard Fault"/>
            <edc:SFRFieldDef edc:cname="DEBUGEVT" edc:nzwidth="0x1" edc:desc="Debug: always write 0"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="DFSR" edc:nzwidth="0x20" edc:access="---------------------------nnnnn" edc:impl="0x1F" edc:_addr="0xE000ED30">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="HALTED" edc:nzwidth="0x1"/>
            <edc:SFRFieldDef edc:cname="BKPT" edc:nzwidth="0x1"/>
            <edc:SFRFieldDef edc:cname="DWTTRAP" edc:nzwidth="0x1"/>
            <edc:SFRFieldDef edc:cname="VCATCH" edc:nzwidth="0x1"/>
            <edc:SFRFieldDef edc:cname="EXTERNAL" edc:nzwidth="0x1"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="MMFAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xE000ED34">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="ADDRESS" edc:nzwidth="0x20" edc:desc="Address that generated the MemManage fault"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="BFAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xE000ED38">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="ADDRESS" edc:nzwidth="0x20" edc:desc="Address that generated the BusFault"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="AFSR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xE000ED3C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:SFRFieldDef edc:cname="IMPDEF" edc:nzwidth="0x20" edc:desc="AUXFAULT input signals"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="PFR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xE000ED40"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="PFR1" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xE000ED44"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="DFR" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED48"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ADR" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED4C"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="MMFR0" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED50"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="MMFR1" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED54"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="MMFR2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED58"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="MMFR3" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED5C"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ISAR0" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED60"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ISAR1" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED64"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ISAR2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED68"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ISAR3" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED6C"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="ISAR4" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xE000ED70"/>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0xE000ED74"/>
      <edc:SFRDef ltx:memberofperipheral="SystemControl" edc:cname="CPACR" edc:nzwidth="0x20" edc:access="--------nnnn--------------------" edc:impl="0xF00000" edc:_addr="0xE000ED88">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SystemControl">
            <edc:AdjustPoint edc:offset="0x14"/>
            <edc:SFRFieldDef edc:cname="CP10" edc:nzwidth="0x2" edc:desc="Access privileges for coprocessor 10">
              <edc:SFRFieldSemantic edc:cname="DENIED" edc:desc="Access denied" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="PRIV" edc:desc="Privileged access only" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="FULL" edc:desc="Full access" edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CP11" edc:nzwidth="0x2" edc:desc="Access privileges for coprocessor 11">
              <edc:SFRFieldSemantic edc:cname="DENIED" edc:desc="Access denied" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="PRIV" edc:desc="Privileged access only" edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="FULL" edc:desc="Full access" edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0xE000ED8C"/>
      <edc:SFRDef ltx:memberofperipheral="MPU" edc:cname="TYPE" edc:nzwidth="0x20" edc:access="--------rrrrrrrrrrrrrrrr-------r" edc:por="00000000000000000000100000000000" edc:mclr="00000000000000000000100000000000" edc:impl="0xFFFF01" edc:_addr="0xE000ED90">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="MPU">
            <edc:SFRFieldDef edc:cname="SEPARATE" edc:nzwidth="0x1" edc:desc="Indicates support for unified or separate instruction and date memory maps."/>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="DREGION" edc:nzwidth="0x8" edc:desc="Indicates the number of supported MPU instruction regions."/>
            <edc:SFRFieldDef edc:cname="IREGION" edc:nzwidth="0x8" edc:desc="Indicates the number of supported MPU data regions."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="MPU" edc:cname="CTRL" edc:nzwidth="0x20" edc:access="-----------------------------nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7" edc:_addr="0xE000ED94">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="MPU">
            <edc:SFRFieldDef edc:cname="ENABLE" edc:nzwidth="0x1" edc:desc="Enables the MPU"/>
            <edc:SFRFieldDef edc:cname="HFNMIENA" edc:nzwidth="0x1" edc:desc="Enables the operation of MPU during hard fault, NMI, and FAULTMASK handlers."/>
            <edc:SFRFieldDef edc:cname="PRIVDEFENA" edc:nzwidth="0x1" edc:desc="Enables privileged software access to the default memory map."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="MPU" edc:cname="RNR" edc:nzwidth="0x20" edc:access="------------------------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0xE000ED98">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="MPU">
            <edc:SFRFieldDef edc:cname="REGION" edc:nzwidth="0x8" edc:desc="Indicates the MPU region referenced by the MPU_RBAR and MPU_RASR registers."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="MPU" edc:cname="RBAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xE000ED9C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="MPU">
            <edc:SFRFieldDef edc:cname="REGION" edc:nzwidth="0x4" edc:desc="MPU region field."/>
            <edc:SFRFieldDef edc:cname="VALID" edc:nzwidth="0x1" edc:desc="MPU Region Number valid bit."/>
            <edc:SFRFieldDef edc:cname="ADDR" edc:nzwidth="0x1B" edc:desc="Region base address field."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="MPU" edc:cname="RASR" edc:nzwidth="0x20" edc:access="---n-nnn--nnnnnnnnnnnnnn--nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x173FFF3F" edc:_addr="0xE000EDA0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="MPU">
            <edc:SFRFieldDef edc:cname="ENABLE" edc:nzwidth="0x1" edc:desc="Region enable bit."/>
            <edc:SFRFieldDef edc:cname="SIZE" edc:nzwidth="0x5" edc:desc="Specifies the size of the MPU protection region."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="SRD" edc:nzwidth="0x8" edc:desc="Subregion disable bits."/>
            <edc:SFRFieldDef edc:cname="B" edc:nzwidth="0x1" edc:desc="MPU access permission attributes."/>
            <edc:SFRFieldDef edc:cname="C" edc:nzwidth="0x1" edc:desc="MPU access permission attributes."/>
            <edc:SFRFieldDef edc:cname="S" edc:nzwidth="0x1" edc:desc="Shareable bit."/>
            <edc:SFRFieldDef edc:cname="TEX" edc:nzwidth="0x3" edc:desc="MPU access permission attributes."/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="AP" edc:nzwidth="0x3" edc:desc="Access permission field."/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="XN" edc:nzwidth="0x1" edc:desc="Instruction access disable bit."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x15C" edc:_addr="0xE000EDA4"/>
      <edc:SFRDef ltx:memberofperipheral="NVIC" edc:cname="STIR" edc:nzwidth="0x20" edc:access="-----------------------wwwwwwwww" edc:impl="0x1FF" edc:_addr="0xE000EF00">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="NVIC">
            <edc:SFRFieldDef edc:cname="INTID" edc:nzwidth="0x9" edc:desc="Interrupt ID to trigger"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:SFRDataSector>
    <edc:ExternalSector edc:regionid="EXTERNAL_FLASH" edc:beginaddr="0x50000000" edc:endaddr="0x58000000" edc:isexecutable="true" edc:rw="rw" edc:type="flash"/>
    <edc:DeviceIDSector edc:regionid="devid" edc:beginaddr="0x400FFF20" edc:endaddr="0x400FFF24" edc:value="0x31" edc:mask="0xFF"/>
    <edc:RegisterMap edc:id="UART0/DATA">
      <edc:MuxedSFRDef edc:nzwidth="0x8" edc:addr="0x400F2400">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="RX_DAT" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000"/>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="TX_DAT" edc:nzwidth="0x8" edc:access="wwwwwwww" edc:por="00000000" edc:mclr="00000000"/>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="IEN" edc:nzwidth="0x8" edc:access="----nnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0xF" edc:addr="0x400F2401">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="ERDAI" edc:nzwidth="0x1" edc:desc="ERDAI This bit enables the Received Data Available Interrupt (and timeout interrupts in the FIFO mode) when set to logic '1'."/>
            <edc:SFRFieldDef edc:cname="ETHREI" edc:nzwidth="0x1" edc:desc="ETHREI This bit enables the Transmitter Holding Register Empty Interrupt when set to logic '1'."/>
            <edc:SFRFieldDef edc:cname="ELSI" edc:nzwidth="0x1" edc:desc="ELSI This bit enables the Received Line Status Interrupt when set to logic '1'."/>
            <edc:SFRFieldDef edc:cname="EMSI" edc:nzwidth="0x1" edc:desc="EMSI  This bit enables the MODEM Status Interrupt when set to logic '1'."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:MuxedSFRDef edc:nzwidth="0x8" edc:addr="0x400F2402">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="FIFO_CR" edc:nzwidth="0x8" edc:access="ww--wwww" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
                <edc:SFRFieldDef edc:cname="EXRF" edc:nzwidth="0x1" edc:desc="EXRF Enable XMIT and RECV FIFO."/>
                <edc:SFRFieldDef edc:cname="CLR_RECV_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'."/>
                <edc:SFRFieldDef edc:cname="CLR_XMIT_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing."/>
                <edc:SFRFieldDef edc:cname="DMA_MODE_SEL" edc:nzwidth="0x1" edc:desc="DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip."/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="RECV_FIFO_TRIG_LVL" edc:nzwidth="0x2" edc:desc="RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="INT_ID" edc:nzwidth="0x8" edc:access="rr--rrrr" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
                <edc:SFRFieldDef edc:cname="IPEND" edc:nzwidth="0x1" edc:desc="IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending."/>
                <edc:SFRFieldDef edc:cname="INTID" edc:nzwidth="0x3" edc:desc="INTID  These bits identify the highest priority interrupt pending"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="FIFO_EN" edc:nzwidth="0x2" edc:desc="These two bits are set when the FIFO CONTROL Register bit 0 equals 1."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="LCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2403">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="WORD_LEN" edc:nzwidth="0x2" edc:desc="WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="STOP_BITS" edc:nzwidth="0x1" edc:desc="STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="EN_PAR" edc:nzwidth="0x1" edc:desc="ENABLE_PARITY  Parity Enable bit."/>
            <edc:SFRFieldDef edc:cname="PAR_SEL" edc:nzwidth="0x1" edc:desc="PARITY_SELECT Even Parity Select bit."/>
            <edc:SFRFieldDef edc:cname="STICK_PAR" edc:nzwidth="0x1" edc:desc="STICK_PARITY  Stick Parity bit."/>
            <edc:SFRFieldDef edc:cname="BRK_CTRL" edc:nzwidth="0x1" edc:desc="BREAK_CONTROL Set Break Control bit"/>
            <edc:SFRFieldDef edc:cname="DLAB" edc:nzwidth="0x1" edc:desc="DLAB Divisor Latch Access Bit (DLAB)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="MCR" edc:nzwidth="0x8" edc:access="---nnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1F" edc:addr="0x400F2404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="DTR" edc:nzwidth="0x1" edc:desc="DTR  This bit controls the Data Terminal Ready (nDTR) output."/>
            <edc:SFRFieldDef edc:cname="RTS" edc:nzwidth="0x1" edc:desc="RTS  This bit controls the Request To Send (nRTS) output."/>
            <edc:SFRFieldDef edc:cname="OUT1" edc:nzwidth="0x1" edc:desc="OUT1 This bit controls the Output 1 (OUT1) bit."/>
            <edc:SFRFieldDef edc:cname="OUT2" edc:nzwidth="0x1" edc:desc="OUT2  This bit is used to enable an UART interrupt."/>
            <edc:SFRFieldDef edc:cname="LOOPBACK" edc:nzwidth="0x1" edc:desc="LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="LSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2405">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="DATA_READY" edc:nzwidth="0x1" edc:desc="DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO"/>
            <edc:SFRFieldDef edc:cname="OVERRUN" edc:nzwidth="0x1" edc:desc="OVERRUN  Overrun Error."/>
            <edc:SFRFieldDef edc:cname="PE" edc:nzwidth="0x1" edc:desc="PARITY ERROR  Parity Error."/>
            <edc:SFRFieldDef edc:cname="FRAME_ERR" edc:nzwidth="0x1" edc:desc="FRAME_ERROR Framing Error."/>
            <edc:SFRFieldDef edc:cname="BRK_INTR" edc:nzwidth="0x1" edc:desc="BREAK_INTERRUPT   Break Interrupt."/>
            <edc:SFRFieldDef edc:cname="TRANS_EMPTY" edc:nzwidth="0x1" edc:desc="TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission."/>
            <edc:SFRFieldDef edc:cname="TRANS_ERR" edc:nzwidth="0x1" edc:desc="Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty."/>
            <edc:SFRFieldDef edc:cname="FIFO_ERR" edc:nzwidth="0x1" edc:desc="FIFO_ERROR"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="MSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2406">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="CTS" edc:nzwidth="0x1" edc:desc="CTS  Delta Clear To Send (DCTS)."/>
            <edc:SFRFieldDef edc:cname="DSR" edc:nzwidth="0x1" edc:desc="DSR  Delta Data Set Ready (DDSR)."/>
            <edc:SFRFieldDef edc:cname="RI" edc:nzwidth="0x1" edc:desc="RI  Trailing Edge of Ring Indicator (TERI)."/>
            <edc:SFRFieldDef edc:cname="DCD" edc:nzwidth="0x1" edc:desc="DCD  Delta Data Carrier Detect (DDCD)."/>
            <edc:SFRFieldDef edc:cname="nCTS" edc:nzwidth="0x1" edc:desc="nCTS  This bit is the complement of the Clear To Send (nCTS) input."/>
            <edc:SFRFieldDef edc:cname="nDSR" edc:nzwidth="0x1" edc:desc="This bit is the complement of the Data Set Ready (nDSR) input."/>
            <edc:SFRFieldDef edc:cname="nRI" edc:nzwidth="0x1" edc:desc="nRI This bit is the complement of the Ring Indicator (nRI) input."/>
            <edc:SFRFieldDef edc:cname="nDCD" edc:nzwidth="0x1" edc:desc="nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="SCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2407"/>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2730"/>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="CFG_SEL" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:addr="0x400F27F0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="CLK_SRC" edc:nzwidth="0x1" edc:desc="CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources"/>
            <edc:SFRFieldDef edc:cname="PWR" edc:nzwidth="0x1" edc:desc="POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET"/>
            <edc:SFRFieldDef edc:cname="POLAR" edc:nzwidth="0x1" edc:desc="POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:RegisterMap>
    <edc:RegisterMap edc:id="UART0/DLAB">
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="BAUDRT_LSB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2400"/>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="BAUDRT_MSB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2401"/>
      <edc:MuxedSFRDef edc:nzwidth="0x8" edc:addr="0x400F2402">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="FIFO_CR" edc:nzwidth="0x8" edc:access="ww--wwww" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
                <edc:SFRFieldDef edc:cname="EXRF" edc:nzwidth="0x1" edc:desc="EXRF Enable XMIT and RECV FIFO."/>
                <edc:SFRFieldDef edc:cname="CLR_RECV_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'."/>
                <edc:SFRFieldDef edc:cname="CLR_XMIT_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing."/>
                <edc:SFRFieldDef edc:cname="DMA_MODE_SEL" edc:nzwidth="0x1" edc:desc="DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip."/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="RECV_FIFO_TRIG_LVL" edc:nzwidth="0x2" edc:desc="RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="INT_ID" edc:nzwidth="0x8" edc:access="rr--rrrr" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
                <edc:SFRFieldDef edc:cname="IPEND" edc:nzwidth="0x1" edc:desc="IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending."/>
                <edc:SFRFieldDef edc:cname="INTID" edc:nzwidth="0x3" edc:desc="INTID  These bits identify the highest priority interrupt pending"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="FIFO_EN" edc:nzwidth="0x2" edc:desc="These two bits are set when the FIFO CONTROL Register bit 0 equals 1."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="LCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2403">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="WORD_LEN" edc:nzwidth="0x2" edc:desc="WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="STOP_BITS" edc:nzwidth="0x1" edc:desc="STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="EN_PAR" edc:nzwidth="0x1" edc:desc="ENABLE_PARITY  Parity Enable bit."/>
            <edc:SFRFieldDef edc:cname="PAR_SEL" edc:nzwidth="0x1" edc:desc="PARITY_SELECT Even Parity Select bit."/>
            <edc:SFRFieldDef edc:cname="STICK_PAR" edc:nzwidth="0x1" edc:desc="STICK_PARITY  Stick Parity bit."/>
            <edc:SFRFieldDef edc:cname="BRK_CTRL" edc:nzwidth="0x1" edc:desc="BREAK_CONTROL Set Break Control bit"/>
            <edc:SFRFieldDef edc:cname="DLAB" edc:nzwidth="0x1" edc:desc="DLAB Divisor Latch Access Bit (DLAB)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="MCR" edc:nzwidth="0x8" edc:access="---nnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1F" edc:addr="0x400F2404">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="DTR" edc:nzwidth="0x1" edc:desc="DTR  This bit controls the Data Terminal Ready (nDTR) output."/>
            <edc:SFRFieldDef edc:cname="RTS" edc:nzwidth="0x1" edc:desc="RTS  This bit controls the Request To Send (nRTS) output."/>
            <edc:SFRFieldDef edc:cname="OUT1" edc:nzwidth="0x1" edc:desc="OUT1 This bit controls the Output 1 (OUT1) bit."/>
            <edc:SFRFieldDef edc:cname="OUT2" edc:nzwidth="0x1" edc:desc="OUT2  This bit is used to enable an UART interrupt."/>
            <edc:SFRFieldDef edc:cname="LOOPBACK" edc:nzwidth="0x1" edc:desc="LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="LSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2405">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="DATA_READY" edc:nzwidth="0x1" edc:desc="DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO"/>
            <edc:SFRFieldDef edc:cname="OVERRUN" edc:nzwidth="0x1" edc:desc="OVERRUN  Overrun Error."/>
            <edc:SFRFieldDef edc:cname="PE" edc:nzwidth="0x1" edc:desc="PARITY ERROR  Parity Error."/>
            <edc:SFRFieldDef edc:cname="FRAME_ERR" edc:nzwidth="0x1" edc:desc="FRAME_ERROR Framing Error."/>
            <edc:SFRFieldDef edc:cname="BRK_INTR" edc:nzwidth="0x1" edc:desc="BREAK_INTERRUPT   Break Interrupt."/>
            <edc:SFRFieldDef edc:cname="TRANS_EMPTY" edc:nzwidth="0x1" edc:desc="TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission."/>
            <edc:SFRFieldDef edc:cname="TRANS_ERR" edc:nzwidth="0x1" edc:desc="Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty."/>
            <edc:SFRFieldDef edc:cname="FIFO_ERR" edc:nzwidth="0x1" edc:desc="FIFO_ERROR"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="MSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2406">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="CTS" edc:nzwidth="0x1" edc:desc="CTS  Delta Clear To Send (DCTS)."/>
            <edc:SFRFieldDef edc:cname="DSR" edc:nzwidth="0x1" edc:desc="DSR  Delta Data Set Ready (DDSR)."/>
            <edc:SFRFieldDef edc:cname="RI" edc:nzwidth="0x1" edc:desc="RI  Trailing Edge of Ring Indicator (TERI)."/>
            <edc:SFRFieldDef edc:cname="DCD" edc:nzwidth="0x1" edc:desc="DCD  Delta Data Carrier Detect (DDCD)."/>
            <edc:SFRFieldDef edc:cname="nCTS" edc:nzwidth="0x1" edc:desc="nCTS  This bit is the complement of the Clear To Send (nCTS) input."/>
            <edc:SFRFieldDef edc:cname="nDSR" edc:nzwidth="0x1" edc:desc="This bit is the complement of the Data Set Ready (nDSR) input."/>
            <edc:SFRFieldDef edc:cname="nRI" edc:nzwidth="0x1" edc:desc="nRI This bit is the complement of the Ring Indicator (nRI) input."/>
            <edc:SFRFieldDef edc:cname="nDCD" edc:nzwidth="0x1" edc:desc="nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="SCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2407"/>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2730"/>
      <edc:SFRDef ltx:memberofperipheral="UART0" edc:cname="CFG_SEL" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:addr="0x400F27F0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART0">
            <edc:SFRFieldDef edc:cname="CLK_SRC" edc:nzwidth="0x1" edc:desc="CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources"/>
            <edc:SFRFieldDef edc:cname="PWR" edc:nzwidth="0x1" edc:desc="POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET"/>
            <edc:SFRFieldDef edc:cname="POLAR" edc:nzwidth="0x1" edc:desc="POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:RegisterMap>
    <edc:RegisterMap edc:id="UART1/DATA">
      <edc:MuxedSFRDef edc:nzwidth="0x8" edc:addr="0x400F2800">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="RX_DAT" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000"/>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="TX_DAT" edc:nzwidth="0x8" edc:access="wwwwwwww" edc:por="00000000" edc:mclr="00000000"/>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="IEN" edc:nzwidth="0x8" edc:access="----nnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0xF" edc:addr="0x400F2801">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="ERDAI" edc:nzwidth="0x1" edc:desc="ERDAI This bit enables the Received Data Available Interrupt (and timeout interrupts in the FIFO mode) when set to logic '1'."/>
            <edc:SFRFieldDef edc:cname="ETHREI" edc:nzwidth="0x1" edc:desc="ETHREI This bit enables the Transmitter Holding Register Empty Interrupt when set to logic '1'."/>
            <edc:SFRFieldDef edc:cname="ELSI" edc:nzwidth="0x1" edc:desc="ELSI This bit enables the Received Line Status Interrupt when set to logic '1'."/>
            <edc:SFRFieldDef edc:cname="EMSI" edc:nzwidth="0x1" edc:desc="EMSI  This bit enables the MODEM Status Interrupt when set to logic '1'."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:MuxedSFRDef edc:nzwidth="0x8" edc:addr="0x400F2802">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="FIFO_CR" edc:nzwidth="0x8" edc:access="ww--wwww" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
                <edc:SFRFieldDef edc:cname="EXRF" edc:nzwidth="0x1" edc:desc="EXRF Enable XMIT and RECV FIFO."/>
                <edc:SFRFieldDef edc:cname="CLR_RECV_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'."/>
                <edc:SFRFieldDef edc:cname="CLR_XMIT_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing."/>
                <edc:SFRFieldDef edc:cname="DMA_MODE_SEL" edc:nzwidth="0x1" edc:desc="DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip."/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="RECV_FIFO_TRIG_LVL" edc:nzwidth="0x2" edc:desc="RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="INT_ID" edc:nzwidth="0x8" edc:access="rr--rrrr" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
                <edc:SFRFieldDef edc:cname="IPEND" edc:nzwidth="0x1" edc:desc="IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending."/>
                <edc:SFRFieldDef edc:cname="INTID" edc:nzwidth="0x3" edc:desc="INTID  These bits identify the highest priority interrupt pending"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="FIFO_EN" edc:nzwidth="0x2" edc:desc="These two bits are set when the FIFO CONTROL Register bit 0 equals 1."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="LCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2803">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="WORD_LEN" edc:nzwidth="0x2" edc:desc="WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="STOP_BITS" edc:nzwidth="0x1" edc:desc="STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="EN_PAR" edc:nzwidth="0x1" edc:desc="ENABLE_PARITY  Parity Enable bit."/>
            <edc:SFRFieldDef edc:cname="PAR_SEL" edc:nzwidth="0x1" edc:desc="PARITY_SELECT Even Parity Select bit."/>
            <edc:SFRFieldDef edc:cname="STICK_PAR" edc:nzwidth="0x1" edc:desc="STICK_PARITY  Stick Parity bit."/>
            <edc:SFRFieldDef edc:cname="BRK_CTRL" edc:nzwidth="0x1" edc:desc="BREAK_CONTROL Set Break Control bit"/>
            <edc:SFRFieldDef edc:cname="DLAB" edc:nzwidth="0x1" edc:desc="DLAB Divisor Latch Access Bit (DLAB)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="MCR" edc:nzwidth="0x8" edc:access="---nnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1F" edc:addr="0x400F2804">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="DTR" edc:nzwidth="0x1" edc:desc="DTR  This bit controls the Data Terminal Ready (nDTR) output."/>
            <edc:SFRFieldDef edc:cname="RTS" edc:nzwidth="0x1" edc:desc="RTS  This bit controls the Request To Send (nRTS) output."/>
            <edc:SFRFieldDef edc:cname="OUT1" edc:nzwidth="0x1" edc:desc="OUT1 This bit controls the Output 1 (OUT1) bit."/>
            <edc:SFRFieldDef edc:cname="OUT2" edc:nzwidth="0x1" edc:desc="OUT2  This bit is used to enable an UART interrupt."/>
            <edc:SFRFieldDef edc:cname="LOOPBACK" edc:nzwidth="0x1" edc:desc="LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="LSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2805">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="DATA_READY" edc:nzwidth="0x1" edc:desc="DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO"/>
            <edc:SFRFieldDef edc:cname="OVERRUN" edc:nzwidth="0x1" edc:desc="OVERRUN  Overrun Error."/>
            <edc:SFRFieldDef edc:cname="PE" edc:nzwidth="0x1" edc:desc="PARITY ERROR  Parity Error."/>
            <edc:SFRFieldDef edc:cname="FRAME_ERR" edc:nzwidth="0x1" edc:desc="FRAME_ERROR Framing Error."/>
            <edc:SFRFieldDef edc:cname="BRK_INTR" edc:nzwidth="0x1" edc:desc="BREAK_INTERRUPT   Break Interrupt."/>
            <edc:SFRFieldDef edc:cname="TRANS_EMPTY" edc:nzwidth="0x1" edc:desc="TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission."/>
            <edc:SFRFieldDef edc:cname="TRANS_ERR" edc:nzwidth="0x1" edc:desc="Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty."/>
            <edc:SFRFieldDef edc:cname="FIFO_ERR" edc:nzwidth="0x1" edc:desc="FIFO_ERROR"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="MSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2806">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="CTS" edc:nzwidth="0x1" edc:desc="CTS  Delta Clear To Send (DCTS)."/>
            <edc:SFRFieldDef edc:cname="DSR" edc:nzwidth="0x1" edc:desc="DSR  Delta Data Set Ready (DDSR)."/>
            <edc:SFRFieldDef edc:cname="RI" edc:nzwidth="0x1" edc:desc="RI  Trailing Edge of Ring Indicator (TERI)."/>
            <edc:SFRFieldDef edc:cname="DCD" edc:nzwidth="0x1" edc:desc="DCD  Delta Data Carrier Detect (DDCD)."/>
            <edc:SFRFieldDef edc:cname="nCTS" edc:nzwidth="0x1" edc:desc="nCTS  This bit is the complement of the Clear To Send (nCTS) input."/>
            <edc:SFRFieldDef edc:cname="nDSR" edc:nzwidth="0x1" edc:desc="This bit is the complement of the Data Set Ready (nDSR) input."/>
            <edc:SFRFieldDef edc:cname="nRI" edc:nzwidth="0x1" edc:desc="nRI This bit is the complement of the Ring Indicator (nRI) input."/>
            <edc:SFRFieldDef edc:cname="nDCD" edc:nzwidth="0x1" edc:desc="nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="SCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2807"/>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2B30"/>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="CFG_SEL" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:addr="0x400F2BF0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="CLK_SRC" edc:nzwidth="0x1" edc:desc="CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources"/>
            <edc:SFRFieldDef edc:cname="PWR" edc:nzwidth="0x1" edc:desc="POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET"/>
            <edc:SFRFieldDef edc:cname="POLAR" edc:nzwidth="0x1" edc:desc="POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:RegisterMap>
    <edc:RegisterMap edc:id="UART1/DLAB">
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="BAUDRT_LSB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2800"/>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="BAUDRT_MSB" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2801"/>
      <edc:MuxedSFRDef edc:nzwidth="0x8" edc:addr="0x400F2802">
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="FIFO_CR" edc:nzwidth="0x8" edc:access="ww--wwww" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
                <edc:SFRFieldDef edc:cname="EXRF" edc:nzwidth="0x1" edc:desc="EXRF Enable XMIT and RECV FIFO."/>
                <edc:SFRFieldDef edc:cname="CLR_RECV_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'."/>
                <edc:SFRFieldDef edc:cname="CLR_XMIT_FIFO" edc:nzwidth="0x1" edc:desc="CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing."/>
                <edc:SFRFieldDef edc:cname="DMA_MODE_SEL" edc:nzwidth="0x1" edc:desc="DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip."/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="RECV_FIFO_TRIG_LVL" edc:nzwidth="0x2" edc:desc="RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
        <edc:SelectSFR>
          <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="INT_ID" edc:nzwidth="0x8" edc:access="rr--rrrr" edc:por="00000000" edc:mclr="00000000" edc:impl="0xCF">
            <edc:SFRModeList>
              <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
                <edc:SFRFieldDef edc:cname="IPEND" edc:nzwidth="0x1" edc:desc="IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending."/>
                <edc:SFRFieldDef edc:cname="INTID" edc:nzwidth="0x3" edc:desc="INTID  These bits identify the highest priority interrupt pending"/>
                <edc:AdjustPoint edc:offset="0x2"/>
                <edc:SFRFieldDef edc:cname="FIFO_EN" edc:nzwidth="0x2" edc:desc="These two bits are set when the FIFO CONTROL Register bit 0 equals 1."/>
              </edc:SFRMode>
            </edc:SFRModeList>
          </edc:SFRDef>
        </edc:SelectSFR>
      </edc:MuxedSFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="LCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2803">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="WORD_LEN" edc:nzwidth="0x2" edc:desc="WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="STOP_BITS" edc:nzwidth="0x1" edc:desc="STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character."/>
            <edc:SFRFieldDef edc:cname="EN_PAR" edc:nzwidth="0x1" edc:desc="ENABLE_PARITY  Parity Enable bit."/>
            <edc:SFRFieldDef edc:cname="PAR_SEL" edc:nzwidth="0x1" edc:desc="PARITY_SELECT Even Parity Select bit."/>
            <edc:SFRFieldDef edc:cname="STICK_PAR" edc:nzwidth="0x1" edc:desc="STICK_PARITY  Stick Parity bit."/>
            <edc:SFRFieldDef edc:cname="BRK_CTRL" edc:nzwidth="0x1" edc:desc="BREAK_CONTROL Set Break Control bit"/>
            <edc:SFRFieldDef edc:cname="DLAB" edc:nzwidth="0x1" edc:desc="DLAB Divisor Latch Access Bit (DLAB)."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="MCR" edc:nzwidth="0x8" edc:access="---nnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1F" edc:addr="0x400F2804">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="DTR" edc:nzwidth="0x1" edc:desc="DTR  This bit controls the Data Terminal Ready (nDTR) output."/>
            <edc:SFRFieldDef edc:cname="RTS" edc:nzwidth="0x1" edc:desc="RTS  This bit controls the Request To Send (nRTS) output."/>
            <edc:SFRFieldDef edc:cname="OUT1" edc:nzwidth="0x1" edc:desc="OUT1 This bit controls the Output 1 (OUT1) bit."/>
            <edc:SFRFieldDef edc:cname="OUT2" edc:nzwidth="0x1" edc:desc="OUT2  This bit is used to enable an UART interrupt."/>
            <edc:SFRFieldDef edc:cname="LOOPBACK" edc:nzwidth="0x1" edc:desc="LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="LSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2805">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="DATA_READY" edc:nzwidth="0x1" edc:desc="DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO"/>
            <edc:SFRFieldDef edc:cname="OVERRUN" edc:nzwidth="0x1" edc:desc="OVERRUN  Overrun Error."/>
            <edc:SFRFieldDef edc:cname="PE" edc:nzwidth="0x1" edc:desc="PARITY ERROR  Parity Error."/>
            <edc:SFRFieldDef edc:cname="FRAME_ERR" edc:nzwidth="0x1" edc:desc="FRAME_ERROR Framing Error."/>
            <edc:SFRFieldDef edc:cname="BRK_INTR" edc:nzwidth="0x1" edc:desc="BREAK_INTERRUPT   Break Interrupt."/>
            <edc:SFRFieldDef edc:cname="TRANS_EMPTY" edc:nzwidth="0x1" edc:desc="TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission."/>
            <edc:SFRFieldDef edc:cname="TRANS_ERR" edc:nzwidth="0x1" edc:desc="Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty."/>
            <edc:SFRFieldDef edc:cname="FIFO_ERR" edc:nzwidth="0x1" edc:desc="FIFO_ERROR"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="MSR" edc:nzwidth="0x8" edc:access="rrrrrrrr" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2806">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="CTS" edc:nzwidth="0x1" edc:desc="CTS  Delta Clear To Send (DCTS)."/>
            <edc:SFRFieldDef edc:cname="DSR" edc:nzwidth="0x1" edc:desc="DSR  Delta Data Set Ready (DDSR)."/>
            <edc:SFRFieldDef edc:cname="RI" edc:nzwidth="0x1" edc:desc="RI  Trailing Edge of Ring Indicator (TERI)."/>
            <edc:SFRFieldDef edc:cname="DCD" edc:nzwidth="0x1" edc:desc="DCD  Delta Data Carrier Detect (DDCD)."/>
            <edc:SFRFieldDef edc:cname="nCTS" edc:nzwidth="0x1" edc:desc="nCTS  This bit is the complement of the Clear To Send (nCTS) input."/>
            <edc:SFRFieldDef edc:cname="nDSR" edc:nzwidth="0x1" edc:desc="This bit is the complement of the Data Set Ready (nDSR) input."/>
            <edc:SFRFieldDef edc:cname="nRI" edc:nzwidth="0x1" edc:desc="nRI This bit is the complement of the Ring Indicator (nRI) input."/>
            <edc:SFRFieldDef edc:cname="nDCD" edc:nzwidth="0x1" edc:desc="nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input."/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="SCR" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2807"/>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="ACTIVATE" edc:nzwidth="0x8" edc:access="nnnnnnnn" edc:por="00000000" edc:mclr="00000000" edc:addr="0x400F2B30"/>
      <edc:SFRDef ltx:memberofperipheral="UART1" edc:cname="CFG_SEL" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:addr="0x400F2BF0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UART1">
            <edc:SFRFieldDef edc:cname="CLK_SRC" edc:nzwidth="0x1" edc:desc="CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources"/>
            <edc:SFRFieldDef edc:cname="PWR" edc:nzwidth="0x1" edc:desc="POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET"/>
            <edc:SFRFieldDef edc:cname="POLAR" edc:nzwidth="0x1" edc:desc="POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:RegisterMap>
    <edc:CodeSector edc:beginaddr="0x000B0000" edc:endaddr="0x00128000" edc:regionid="ram"/>
    <edc:BootConfigSector edc:beginaddr="0x00000000" edc:endaddr="0x00010000" edc:iswritable="false" edc:regionid="rom"/>
    <edc:EmulatorSector edc:beginaddr="0xE0001000" edc:endaddr="0xE000F000" edc:regionid="emulation"/>
  </edc:PhysicalSpace>
  <edc:DataFlashSpace edc:regionid="eeprom" edc:beginaddr="0x0" edc:endaddr="0x800" edc:magicoffset="0x60000000"/>
</edc:PIC>
