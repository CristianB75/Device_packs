<?xml version="1.0" encoding="UTF-8"?>
<avr-tools-device-file xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" schema-version="4.3" xsi:noNamespaceSchemaLocation="../../schema/avr_tools_device_file.xsd">
  <file timestamp="2020-03-24T11:15:30Z"/>
  <variants>
    <variant ordercode="CEC1712H-B2-I/SX" package="WFBGA84" speedmax="48000000" tempmax="+85" tempmin="-40" vccmax="3.63" vccmin="3.135"/>
  </variants>
  <devices>
    <device name="CEC1712H_B2_SX" architecture="CORTEX-M4" family="CEC1712H_B2_SX" series="CEC1712H_B2_SX">
      <address-spaces>
        <address-space id="base" name="base" start="0" size="0x100000000" endianness="little">
          <memory-segment name="CODE_SRAM" start="0x000E0000" size="0x38000" type="ram" rw="RW" exec="true"/>
          <memory-segment name="DATA_SRAM" start="0x00118000" size="0x8000" type="ram" rw="RW"/>
          <memory-segment name="DATA_SRAM_ALIAS" start="0x20000000" size="0x8000" type="ram" rw="RW"/>
          <memory-segment name="EC_DEVICE_REGISTERS" start="0x40000000" size="0x80000" type="io" rw="RW"/>
          <memory-segment name="GPIO_REGISTERS" start="0x40080000" size="0x10000" type="io" rw="RW"/>
          <memory-segment name="HOST_DEVICE_REGISTERS" start="0x400F0000" size="0x100000" type="io" rw="RW"/>
          <memory-segment name="CRYPTO_RAM" start="0x40100000" size="0x6000" type="ram" rw="R"/>
          <memory-segment name="SCS" start="0xE000E000" size="0x00001000" type="io" rw="RW"/>
          <memory-segment name="EXTERNAL_FLASH" start="0x50000000" size="0x8000000" type="flash" rw="RW" external="true" exec="true"/>
        </address-space>
      </address-spaces>
      <parameters>
        <param name="__MPU_PRESENT" value="0" caption="MPU present or not"/>
        <param name="__CM4_REV" value="0x0100" caption="CM4 Core Revision"/>
        <param name="__NVIC_PRIO_BITS" value="3" caption="Number of Bits used for Priority Levels"/>
        <param name="__Vendor_SysTickConfig" value="0" caption="Set to 1 if different SysTick Config is used"/>
        <param name="__VTOR_PRESENT" value="1" caption="Vector Table Offset Regisrer present or not"/>
        <param name="__ARCH_ARM" value="1"/>
        <param name="__ARCH_ARM_CORTEX_M" value="1"/>
        <param name="LITTLE_ENDIAN" value="1" />
        <param name="EXTERNAL_APPLICATION_FLASH" value="1" />
        <param name="__REVID" value="1" />
      </parameters>
      <peripherals>
        <module name="PCR" id="100" version="1.0">
          <instance name="PCR">
            <register-group name="PCR" name-in-module="PCR" address-space="base" offset="0x40080100"/>
	    <signals>
              <signal group="nRESET_IN"   function="A" pad="nRESET_IN"/>
              <signal group="VCC_PWRGD"   function="B" pad="GPIO057"/>
              <signal group="CLK32kHz_IN"    function="B" pad="GPIO165"/>
              <signal group="XTAL1"       function="A" pad="XTAL1"/>
              <signal group="XTAL2"       function="A" pad="XTAL2"/>
              <signal group="PWROK"   function="B" pad="GPIO106"/>
            </signals>
          </instance>
        </module>
        <module name="DMA_MAIN" id="85a" version="1.0">
          <instance name="DMA_MAIN">
            <register-group name="DMA_MAIN" name-in-module="DMA_MAIN" address-space="base" offset="0x40002400"/>
          </instance>
        </module>
        <module name="DMA_CHAN00" id="85b" version="1.0">
          <instance name="DMA_CHAN00">
            <register-group name="DMA_CHAN00" name-in-module="DMA_CHAN00" address-space="base" offset="0x40002440"/>
          </instance>
        </module>
        <module name="DMA_CHAN01" id="85c" version="1.0">
          <instance name="DMA_CHAN01">
            <register-group name="DMA_CHAN01" name-in-module="DMA_CHAN01" address-space="base" offset="0x40002480"/>
          </instance>
        </module>
        <module name="DMA_CHAN02" id="85d" version="1.0">
          <instance name="DMA_CHAN02">
            <register-group name="DMA_CHAN02" name-in-module="DMA_CHAN02" address-space="base" offset="0x400024C0"/>
          </instance>
          <instance name="DMA_CHAN03">
            <register-group name="DMA_CHAN03" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002500"/>
          </instance>
          <instance name="DMA_CHAN04">
            <register-group name="DMA_CHAN04" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002540"/>
          </instance>
          <instance name="DMA_CHAN05">
            <register-group name="DMA_CHAN05" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002580"/>
          </instance>
          <instance name="DMA_CHAN06">
            <register-group name="DMA_CHAN06" name-in-module="DMA_CHAN02" address-space="base" offset="0x400025C0"/>
          </instance>
          <instance name="DMA_CHAN07">
            <register-group name="DMA_CHAN07" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002600"/>
          </instance>
          <instance name="DMA_CHAN08">
            <register-group name="DMA_CHAN08" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002640"/>
          </instance>
          <instance name="DMA_CHAN09">
            <register-group name="DMA_CHAN09" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002680"/>
          </instance>
          <instance name="DMA_CHAN10">
            <register-group name="DMA_CHAN10" name-in-module="DMA_CHAN02" address-space="base" offset="0x400026C0"/>
          </instance>
          <instance name="DMA_CHAN11">
            <register-group name="DMA_CHAN11" name-in-module="DMA_CHAN02" address-space="base" offset="0x40002700"/>
          </instance>
        </module>
        <module name="ECIA" version="1.0">
          <instance name="ECIA">
            <register-group name="ECIA" name-in-module="ECIA" address-space="base" offset="0x4000E000"/>
          </instance>
        </module>
        <module name="GCR" id="101" version="1.0">
          <instance name="GCR">
            <register-group name="GCR" name-in-module="GCR" address-space="base" offset="0x400FFF00"/>
          </instance>
        </module>
        <module name="UART" id="39" version="1.0">
          <instance name="UART0">
            <register-group name="UART0" name-in-module="UART" address-space="base" offset="0x400F2400"/>
	    <signals>
              <signal group="UART0_TX"    function="B" pad="GPIO104"/>
              <signal group="UART0_RX"    function="B" pad="GPIO105"/>
              <signal group="UART0_CTS_n" function="C" pad="GPIO143"/>
              <signal group="UART0_RTS_n" function="C" pad="GPIO144"/>
            </signals>
          </instance>
          <instance name="UART1">
            <register-group name="UART1" name-in-module="UART" address-space="base" offset="0x400F2800"/>
	    <signals>
              <signal group="UART1_TX"    function="B" pad="GPIO170"/>
              <signal group="UART1_RX"    function="B" pad="GPIO171"/>
            </signals>
          </instance>
	  <instance name="UART2">
            <register-group name="UART2" name-in-module="UART" address-space="base" offset="0x400F2C00"/>
	    <signals>
              <signal group="UART2_TX"         function="D" pad="GPIO146"/>
              <signal group="UART2_RX"         function="D" pad="GPIO145"/>
            </signals>
          </instance>
        </module>
        <module name="GPIO" id="26" version="1.0">
          <instance name="GPIO">
            <register-group name="GPIO" name-in-module="GPIO" address-space="base" offset="0x40081000"/>
	    <signals>



              <signal group="GPIO000" function="B" pad="GPIO000"/>
              <signal group="GPIO002" function="A" pad="GPIO002"/>
              <signal group="GPIO003" function="A" pad="GPIO003"/>
              <signal group="GPIO004" function="A" pad="GPIO004"/>
              <signal group="GPIO012" function="A" pad="GPIO012"/>
              <signal group="GPIO013" function="A" pad="GPIO013"/>
              <signal group="GPIO015" function="A" pad="GPIO015"/>
              <signal group="GPIO016" function="A" pad="GPIO016"/>
              <signal group="GPIO020" function="A" pad="GPIO020"/>
              <signal group="GPIO021" function="A" pad="GPIO021"/>
              <signal group="GPIO026" function="A" pad="GPIO026"/>
              <signal group="GPIO027" function="A" pad="GPIO027"/>
              <signal group="GPIO030" function="A" pad="GPIO030"/>
              <signal group="GPIO032" function="A" pad="GPIO032"/>
              <signal group="GPIO034" function="A" pad="GPIO034"/>
              <signal group="GPIO045" function="A" pad="GPIO045"/>
              <signal group="GPIO046" function="A" pad="GPIO046"/>
              <signal group="GPIO047" function="A" pad="GPIO047"/>
              <signal group="GPIO050" function="A" pad="GPIO050"/>
              <signal group="GPIO051" function="A" pad="GPIO051"/>
              <signal group="GPIO053" function="A" pad="GPIO053"/>
              <signal group="GPIO055" function="A" pad="GPIO055"/>
              <signal group="GPIO056" function="A" pad="GPIO056"/>
              <signal group="GPIO057" function="A" pad="GPIO057"/>
              <signal group="GPIO063" function="A" pad="GPIO063"/>
              <signal group="GPIO065" function="A" pad="GPIO065"/>
              <signal group="GPIO070" function="A" pad="GPIO070"/>
              <signal group="GPIO071" function="A" pad="GPIO071"/>
              <signal group="GPIO104" function="A" pad="GPIO104"/>
              <signal group="GPIO105" function="A" pad="GPIO105"/>
              <signal group="GPIO106" function="A" pad="GPIO106"/>
              <signal group="GPIO107" function="A" pad="GPIO107"/>
              <signal group="GPIO112" function="A" pad="GPIO112"/>
              <signal group="GPIO113" function="A" pad="GPIO113"/>
              <signal group="GPIO120" function="A" pad="GPIO120"/>
              <signal group="GPIO121" function="A" pad="GPIO121"/>
              <signal group="GPIO122" function="A" pad="GPIO122"/>
              <signal group="GPIO123" function="A" pad="GPIO123"/>
              <signal group="GPIO124" function="A" pad="GPIO124"/>
              <signal group="GPIO125" function="A" pad="GPIO125"/>
              <signal group="GPIO126" function="A" pad="GPIO126"/>
              <signal group="GPIO127" function="A" pad="GPIO127"/>
              <signal group="GPIO130" function="A" pad="GPIO130"/>
              <signal group="GPIO131" function="A" pad="GPIO131"/>
              <signal group="GPIO132" function="A" pad="GPIO132"/>
              <signal group="GPIO140" function="A" pad="GPIO140"/>
              <signal group="GPIO143" function="A" pad="GPIO143"/>
              <signal group="GPIO144" function="A" pad="GPIO144"/>
              <signal group="GPIO145" function="A" pad="GPIO145"/>
              <signal group="GPIO146" function="A" pad="GPIO146"/>
              <signal group="GPIO147" function="A" pad="GPIO147"/>
              <signal group="GPIO150" function="A" pad="GPIO150"/>
              <signal group="GPIO156" function="A" pad="GPIO156"/>
              <signal group="GPIO157" function="A" pad="GPIO157"/>
              <signal group="GPIO163" function="B" pad="GPIO163"/>
              <signal group="GPIO165" function="A" pad="GPIO165"/>
              <signal group="GPIO170" function="A" pad="GPIO170"/>
              <signal group="GPIO171" function="A" pad="GPIO171"/>
              <signal group="GPIO200" function="A" pad="GPIO200"/>
              <signal group="GPIO201" function="A" pad="GPIO201"/>
              <signal group="GPIO202" function="A" pad="GPIO202"/>
              <signal group="GPIO203" function="A" pad="GPIO203"/>
              <signal group="GPIO204" function="A" pad="GPIO204"/>
              <signal group="GPIO223" function="A" pad="GPIO223"/>
              <signal group="GPIO224" function="A" pad="GPIO224"/>
              <signal group="GPIO227" function="A" pad="GPIO227"/>
              <signal group="GPIO250" function="B" pad="GPIO250"/>
              <signal group="GPIO253" function="A" pad="GPIO253"/>
            </signals>
          </instance>
        </module>
        <module name="WDT" id="88" version="1.0">
          <instance name="WDT">
            <register-group name="WDT" name-in-module="WDT" address-space="base" offset="0x40000400"/>
          </instance>
        </module>
        <module name="TIMER16" id="108a" version="1.0">
          <instance name="TIMER16_0">
            <register-group name="TIMER16_0" name-in-module="TIMER16" address-space="base" offset="0x40000C00"/>
          </instance>
          <instance name="TIMER16_1">
            <register-group name="TIMER16_1" name-in-module="TIMER16" address-space="base" offset="0x40000C20"/>
          </instance>
        </module>
        <module name="TIMER32" id="108b" version="1.0">
          <instance name="TIMER32_0">
            <register-group name="TIMER32_0" name-in-module="TIMER32" address-space="base" offset="0x40000C80"/>
          </instance>
          <instance name="TIMER32_1">
            <register-group name="TIMER32_1" name-in-module="TIMER32" address-space="base" offset="0x40000CA0"/>
          </instance>
        </module>
        <module name="CCT" id="12" version="1.0">
          <instance name="CCT">
            <register-group name="CCT" name-in-module="CCT" address-space="base" offset="0x40001000"/>
	    <signals>
              <signal group="ICT0_TACH0"  function="B" pad="GPIO050"/>
              <signal group="ICT1_TACH1"  function="B" pad="GPIO051"/>
              <signal group="ICT5"   function="C" pad="GPIO140"/>
              <signal group="ICT1_TACH1"  function="B" pad="GPIO051"/>
              <signal group="ICT3"   function="D" pad="GPIO016"/>
              <signal group="ICT5"   function="D" pad="GPIO065"/>
              <signal group="ICT8"   function="D" pad="GPIO063"/>
              <signal group="ICT10"  function="C" pad="GPIO015"/>
              <signal group="ICT11"  function="D" pad="GPIO046"/>
              <signal group="ICT14"  function="D" pad="GPIO045"/>
              <signal group="ICT13"  function="D" pad="GPIO047"/>
              <signal group="ICT9"   function="C" pad="GPIO113"/>
              <signal group="ICT12"  function="D" pad="GPIO124"/>
            </signals>
          </instance>
        </module>
        <module name="HTM" id="29" version="1.0">
          <instance name="HTM0">
            <register-group name="HTM0" name-in-module="HTM" address-space="base" offset="0x40009800"/>
          </instance>
          <instance name="HTM1">
            <register-group name="HTM1" name-in-module="HTM" address-space="base" offset="0x40009820"/>
          </instance>
        </module>
        <module name="RTOS" id="140" version="1.0">
          <instance name="RTOS">
            <register-group name="RTOS" name-in-module="RTOS" address-space="base" offset="0x40007400"/>
          </instance>
        </module>
        <module name="RTC" id="126" version="1.0">
          <instance name="RTC">
            <register-group name="RTC" name-in-module="RTC" address-space="base" offset="0x400F5000"/>
          </instance>
        </module>
        <module name="WEEK" id="76" version="1.0">
          <instance name="WEEK">
            <register-group name="WEEK" name-in-module="WEEK" address-space="base" offset="0x4000AC80"/>
          </instance>
        </module>
        <module name="TACH" id="66" version="1.0">
          <instance name="TACH0">
            <register-group name="TACH0" name-in-module="TACH" address-space="base" offset="0x40006000"/>
	    <signals>
              <signal group="ICT0_TACH0"  function="B" pad="GPIO050"/>
            </signals>
          </instance>
          <instance name="TACH1">
            <register-group name="TACH1" name-in-module="TACH" address-space="base" offset="0x40006010"/>
	    <signals>
              <signal group="ICT1_TACH1"  function="B" pad="GPIO051"/>
            </signals>
          </instance>
        </module>
        <module name="PWM" id="54" version="1.0">
          <instance name="PWM0">
            <register-group name="PWM0" name-in-module="PWM" address-space="base" offset="0x40005800"/>
	    <signals>
              <signal group="PWM0"  function="B" pad="GPIO053"/>
            </signals>
          </instance>
          <instance name="PWM2">
            <register-group name="PWM2" name-in-module="PWM" address-space="base" offset="0x40005820"/>
	    <signals>
              <signal group="PWM2"  function="B" pad="GPIO055"/>
              <signal group="PWM2"  function="B" pad="GPIO045"/>
            </signals>
          </instance>
          <instance name="PWM3">
            <register-group name="PWM3" name-in-module="PWM" address-space="base" offset="0x40005830"/>
	    <signals>
              <signal group="PWM3"  function="B" pad="GPIO056"/>
              <signal group="PWM3"  function="C" pad="GPIO047"/>
            </signals>
          </instance>
          <instance name="PWM5">
            <register-group name="PWM5" name-in-module="PWM" address-space="base" offset="0x40005850"/>
	    <signals>
              <signal group="PWM5"  function="B" pad="GPIO002"/>
            </signals>
          </instance>
          <instance name="PWM6">
            <register-group name="PWM6" name-in-module="PWM" address-space="base" offset="0x40005860"/>
	    <signals>
              <signal group="PWM6"  function="C" pad="GPIO063"/>
            </signals>
          </instance>
          <instance name="PWM7">
            <register-group name="PWM7" name-in-module="PWM" address-space="base" offset="0x40005870"/>
	    <signals>
              <signal group="PWM7"  function="B" pad="GPIO015"/>
            </signals>
          </instance>
        </module>
        <module name="ADC" id="177" version="1.0">
          <instance name="ADC">
            <register-group name="ADC" name-in-module="ADC" address-space="base" offset="0x40007C00"/>
	    <signals>
              <signal group="VREF_ADC"   function="A" pad="VREF_ADC"/>
              <signal group="ADC00"      function="B" pad="GPIO200"/>
              <signal group="ADC01"      function="B" pad="GPIO201"/>
              <signal group="ADC02"      function="B" pad="GPIO202"/>
              <signal group="ADC03"      function="B" pad="GPIO203"/>
              <signal group="ADC04"      function="B" pad="GPIO204"/>
            </signals>
          </instance>
        </module>
        <module name="LED" id="111" version="1.0">
          <instance name="LED0">
            <register-group name="LED0" name-in-module="LED" address-space="base" offset="0x4000B800"/>
	    <signals>
              <signal group="LED0"  function="B" pad="GPIO156"/>
            </signals>
          </instance>
          <instance name="LED1">
            <register-group name="LED1" name-in-module="LED" address-space="base" offset="0x4000B900"/>
	    <signals>
              <signal group="LED1"  function="B" pad="GPIO157"/>
            </signals>
          </instance>
        </module>
        <module name="SMB" id="31" version="1.0">
          <instance name="SMB0">
            <register-group name="SMB0" name-in-module="SMB" address-space="base" offset="0x40004000"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
          <instance name="SMB1">
            <register-group name="SMB1" name-in-module="SMB" address-space="base" offset="0x40004400"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
          <instance name="SMB2">
            <register-group name="SMB2" name-in-module="SMB" address-space="base" offset="0x40004800"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
          <instance name="SMB3">
            <register-group name="SMB3" name-in-module="SMB" address-space="base" offset="0x40004C00"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
          <instance name="SMB4">
            <register-group name="SMB4" name-in-module="SMB" address-space="base" offset="0x40005000"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
        </module>
        <module name="I2C" id="31" version="1.0">
          <instance name="I2C0">
            <register-group name="I2C0" name-in-module="I2C" address-space="base" offset="0x40005100"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
          <instance name="I2C1">
            <register-group name="I2C1" name-in-module="I2C" address-space="base" offset="0x40005200"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
          <instance name="I2C2">
            <register-group name="I2C2" name-in-module="I2C" address-space="base" offset="0x40005300"/>
	     <signals>
              <signal group="SDA"  index="0" function="B" pad="GPIO003"/>
              <signal group="SCL"  index="0" function="B" pad="GPIO004"/>
              <signal group="SDA"  index="1" function="B" pad="GPIO130"/>
              <signal group="SCL"  index="1" function="B" pad="GPIO131"/>
              <signal group="SDA"  index="4" function="B" pad="GPIO143"/>
              <signal group="SCL"  index="4" function="B" pad="GPIO144"/>
              <signal group="SDA"  index="6" function="B" pad="GPIO132"/>
              <signal group="SCL"  index="6" function="B" pad="GPIO140"/>
              <signal group="SDA"  index="7" function="B" pad="GPIO012"/>
              <signal group="SCL"  index="7" function="B" pad="GPIO013"/>
              <signal group="SDA"  index="9"  function="B" pad="GPIO145"/>
              <signal group="SCL"  index="9"  function="B" pad="GPIO146"/>
              <signal group="SDA"  index="10" function="C" pad="GPIO030"/>
              <signal group="SCL"  index="10" function="D" pad="GPIO107"/>
              <signal group="SDA"  index="12" function="D" pad="GPIO026"/>
              <signal group="SCL"  index="12" function="D" pad="GPIO027"/>
              <signal group="SDA"  index="14" function="C" pad="GPIO070"/>
              <signal group="SCL"  index="14" function="C" pad="GPIO071"/>
              <signal group="SDA"  index="15" function="B" pad="GPIO147"/>
              <signal group="SCL"  index="15" function="B" pad="GPIO150"/>
            </signals>
          </instance>
        </module>
        <module name="QMSPI" id="147" version="1.0">
          <instance name="QMSPI">
            <register-group name="QMSPI" name-in-module="QMSPI" address-space="base" offset="0x40070000"/>
	    <signals>
              <signal group="SHD_CLK"    index="0" function="C" pad="GPIO056"/>
              <signal group="SHD_CS1_n"  index="0" function="C" pad="GPIO002"/>
              <signal group="SHD_CS0_n"  index="0" function="C" pad="GPIO055"/>
              <signal group="SHD_IO0"    index="0" function="B" pad="GPIO223"/>
              <signal group="SHD_IO1"    index="0" function="C" pad="GPIO224"/>
              <signal group="SHD_IO2"    index="0" function="B" pad="GPIO227"/>
              <signal group="SHD_IO3"    index="0" function="C" pad="GPIO016"/>
              <signal group="PVT_IO0"    index="0" function="B" pad="GPIO121"/>
              <signal group="PVT_IO1"    index="0" function="B" pad="GPIO122"/>
              <signal group="PVT_IO2"    index="0" function="B" pad="GPIO123"/>
              <signal group="PVT_CS_n"   index="0" function="B" pad="GPIO124"/>
              <signal group="PVT_CLK"    index="0" function="B" pad="GPIO125"/>
              <signal group="PVT_IO3"    index="0" function="B" pad="GPIO126"/>
            </signals>
          </instance>
        </module>
        <module name="TFDP" id="68" version="1.0">
          <instance name="TFDP">
            <register-group name="TFDP" name-in-module="TFDP" address-space="base" offset="0x40008C00"/>
	    <signals>
              <signal group="TFDP_CLK"  index="0" function="C" pad="GPIO104"/>
              <signal group="TFDP_DATA"  index="0" function="C" pad="GPIO105"/>
            </signals>
          </instance>
        </module>
        <module name="VCI" id="75" version="1.0">
          <instance name="VCI">
            <register-group name="VCI" name-in-module="VCI" address-space="base" offset="0x4000AE00"/>
	    <signals>
              <signal group="SYSPWR_PRES_VCI_IN3_n" function="A" pad="GPIO000"/>
              <signal group="BGPO0"                 function="B" pad="GPIO253"/>
              <signal group="VCI_IN0_n"             function="A" pad="GPIO163"/>
              <signal group="VCI_OUT"               function="A" pad="GPIO250"/>
            </signals>
          </instance>
        </module>
        <module name="VBAT_RAM" id="93" version="1.0">
          <instance name="VBAT_RAM">
            <register-group name="VBAT_RAM" name-in-module="VBAT_RAM" address-space="base" offset="0x4000A800"/>
          </instance>
        </module>
        <module name="VBAT" id="94" version="1.0">
          <instance name="VBAT">
            <register-group name="VBAT" name-in-module="VBAT" address-space="base" offset="0x4000A400"/>
          </instance>
        </module>
        <module name="EC_REG_BANK" id="95" version="1.0">
          <instance name="EC_REG_BANK">
            <register-group name="EC_REG_BANK" name-in-module="EC_REG_BANK" address-space="base" offset="0x4000FC00"/>
          </instance>
        </module>
        <module name="OTP" id="96" version="1.0">
          <instance name="OTP">
            <register-group name="OTP" name-in-module="OTP" address-space="base" offset="0x40082000"/>
          </instance>
        </module>
        <module name="NVIC" version="1.0.0">
          <instance name="NVIC">
            <register-group name="NVIC" name-in-module="NVIC" address-space="base" offset="0xE000E100"/>
            <parameters>
              <param name="NUM_IRQ" value="32" caption="Number of interrupt requests"/>
              <param name="__NVIC_PRIO_BITS" value="3" caption="Number of NVIC interrupt priority bits"/>
            </parameters>
          </instance>
        </module>
        <module name="SysTick" version="1.0.0">
          <instance name="SysTick">
            <register-group name="SysTick" name-in-module="SysTick" address-space="base" offset="0xE000E010"/>
          </instance>
        </module>
        <module name="SystemControl" version="1.0.0">
          <instance name="SystemControl">
            <register-group name="SystemControl" name-in-module="SystemControl" address-space="base" offset="0xE000E000"/>
          </instance>
        </module>
        <module name="CRYPTO" version="1.0.0">
          <instance name="PKE_ERR">
          </instance>
          <instance name="PKE_END">
          </instance>
          <instance name="RNG">
          </instance>
          <instance name="AES">
          </instance>
          <instance name="HASH">
          </instance>
        </module>
      </peripherals>
      <interrupts>
        <interrupt name="Reset"       index="-15" caption="Reset Vector, invoked on Power up and warm reset"/>
        <interrupt name="NonMaskableInt" index="-14" caption="Non maskable Interrupt, cannot be stopped or preempted"/>
        <interrupt name="HardFault"   index="-13" caption="Hard Fault, all classes of Fault"/>
        <interrupt name="BusFault"    index="-11" caption="Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory related Fault"/>
        <interrupt name="UsageFault"  index="-10" caption="Usage Fault, i.e. Undef Instruction, Illegal State Transition"/>
        <interrupt name="SVCall"      index="-5" caption="System Service Call via SVC instruction"/>
        <interrupt name="DebugMonitor" index="-4" caption="Debug Monitor"/>
        <interrupt name="PendSV"      index="-2" caption="Pendable request for system service"/>
        <interrupt name="SysTick"     index="-1" caption="System Tick Timer"/>
        <interrupt name="GIRQ08"      index="0" module-instance="GPIO"/>
        <interrupt name="GIRQ09"      index="1" module-instance="GPIO"/>
        <interrupt name="GIRQ10"      index="2" module-instance="GPIO"/>
        <interrupt name="GIRQ11"      index="3" module-instance="GPIO"/>
        <interrupt name="GIRQ12"      index="4" module-instance="GPIO"/>
        <interrupt name="GIRQ13"      index="5" module-instance="SMB0"/>
        <interrupt name="GIRQ14"      index="6" module-instance="DMA_CHAN00"/>
        <interrupt name="GIRQ15"      index="7" module-instance="UART0"/>
        <interrupt name="GIRQ16"      index="8" module-instance="PKE_ERR"/>
        <interrupt name="GIRQ18"      index="10" module-instance="QMSPI"/>
        <interrupt name="GIRQ20"      index="12" module-instance="OTP"/>
        <interrupt name="GIRQ21"      index="13" module-instance="WDT"/>
        <interrupt name="GIRQ23"      index="14" module-instance="TIMER16_0"/>
        <interrupt name="GIRQ26"      index="17" module-instance="GPIO"/>
        <interrupt name="I2CSMB0"     index="20" module-instance="SMB0"/>
        <interrupt name="I2CSMB1"     index="21" module-instance="SMB1"/>
        <interrupt name="I2CSMB2"     index="22" module-instance="SMB2"/>
        <interrupt name="I2CSMB3"     index="23" module-instance="SMB3"/>
        <interrupt name="DMA_CH00"    index="24" module-instance="DMA_CHAN00"/>
        <interrupt name="DMA_CH01"    index="25" module-instance="DMA_CHAN01"/>
        <interrupt name="DMA_CH02"    index="26" module-instance="DMA_CHAN02"/>
        <interrupt name="DMA_CH03"    index="27" module-instance="DMA_CHAN03"/>
        <interrupt name="DMA_CH04"    index="28" module-instance="DMA_CHAN04"/>
        <interrupt name="DMA_CH05"    index="29" module-instance="DMA_CHAN05"/>
        <interrupt name="DMA_CH06"    index="30" module-instance="DMA_CHAN06"/>
        <interrupt name="DMA_CH07"    index="31" module-instance="DMA_CHAN07"/>
        <interrupt name="DMA_CH08"    index="32" module-instance="DMA_CHAN08"/>
        <interrupt name="DMA_CH09"    index="33" module-instance="DMA_CHAN09"/>
        <interrupt name="DMA_CH10"    index="34" module-instance="DMA_CHAN10"/>
        <interrupt name="DMA_CH11"    index="35" module-instance="DMA_CHAN11"/>
        <interrupt name="UART0"       index="40" module-instance="UART0"/>
        <interrupt name="UART1"       index="41" module-instance="UART1"/>
        <interrupt name="UART2"       index="44" module-instance="UART2"/>

        <interrupt name="PKE_ERR"     index="65" module-instance="PKE_ERR"/>
        <interrupt name="PKE_END"     index="66" module-instance="PKE_END"/>
        <interrupt name="RNG"         index="67" module-instance="RNG"/>
        <interrupt name="AES"         index="68" module-instance="AES"/>
        <interrupt name="HASH"        index="69" module-instance="HASH"/>
        <interrupt name="TACH0"       index="71" module-instance="TACH0"/>
        <interrupt name="TACH1"       index="72" module-instance="TACH1"/>
        <interrupt name="ADC_SNGL"    index="78" module-instance="ADC"/>
        <interrupt name="ADC_RPT"     index="79" module-instance="ADC"/>
        <interrupt name="LED0"        index="83" module-instance="LED0"/>
        <interrupt name="LED1"        index="84" module-instance="LED1"/>
        <interrupt name="QMSPI"       index="91" module-instance="QMSPI"/>
        <interrupt name="TMR"         index="111" module-instance="RTOS"/>
        <interrupt name="HTMR0"       index="112" module-instance="HTM0"/>
        <interrupt name="HTMR1"       index="113" module-instance="HTM1"/>
        <interrupt name="WK"          index="114" module-instance="WEEK"/>
        <interrupt name="WKSUB"       index="115" module-instance="WEEK"/>
        <interrupt name="WKSEC"       index="116" module-instance="WEEK"/>
        <interrupt name="WKSUBSEC"    index="117" module-instance="WEEK"/>
        <interrupt name="SYSPWR"      index="118" module-instance="WEEK"/>
        <interrupt name="RTC"         index="119" module-instance="RTC"/>
        <interrupt name="RTC_ALARM"   index="120" module-instance="RTC"/>
        <interrupt name="VCI_IN0"     index="122" module-instance="VCI"/>
        <interrupt name="VCI_IN1"     index="123" module-instance="VCI"/>
        <interrupt name="PS2_0A_WAKE" index="129" module-instance="PS2_0"/>
        <interrupt name="TIMER16_0" index="136" module-instance="TIMER16_0"/>
        <interrupt name="TIMER16_1" index="137" module-instance="TIMER16_1"/>
        <interrupt name="TIMER32_0" index="140" module-instance="TIMER32_0"/>
        <interrupt name="TIMER32_1" index="141" module-instance="TIMER32_1"/>
        <interrupt name="CCT"       index="146" module-instance="CCT"/>
        <interrupt name="CCT_CAP0"  index="147" module-instance="CCT"/>
        <interrupt name="CCT_CAP1"  index="148" module-instance="CCT"/>
        <interrupt name="CCT_CAP2"  index="149" module-instance="CCT"/>
        <interrupt name="CCT_CAP3"  index="150" module-instance="CCT"/>
        <interrupt name="CCT_CAP4"  index="151" module-instance="CCT"/>
        <interrupt name="CCT_CAP5"  index="152" module-instance="CCT"/>
        <interrupt name="CCT_CMP0"  index="153" module-instance="CCT"/>
        <interrupt name="CCT_CMP1"  index="154" module-instance="CCT"/>
        <interrupt name="I2CSMB4"   index="158" module-instance="SMB4"/>
        <interrupt name="I2C0"      index="168" module-instance="I2C0"/>
        <interrupt name="I2C1"      index="169" module-instance="I2C1"/>
        <interrupt name="I2C2"      index="170" module-instance="I2C2"/>
        <interrupt name="WDT"       index="171" module-instance="WDT"/>
      </interrupts>
      <interfaces>
        <interface type="swd" name="SWD"/>
      </interfaces>
    </device>
  </devices>
  <modules>
    <module name="PCR" id="100" version="1.0" caption="The Power, Clocks, and Resets (PCR) Section identifies clock sources, and reset inputs to the chip">
      <register-group name="PCR" caption="The Power, Clocks, and Resets (PCR) Section identifies clock sources, and reset inputs to the chip">
        <register name="SYS_SLP_CTRL" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="System Sleep Control">
          <bitfield name="SLP_MOD" caption="Selects the System Sleep mode" mask="0x1"/>
          <bitfield name="TEST" caption="Test bit" mask="0x4"/>
          <bitfield name="SLP_ALL" caption="Initiates the System Sleep mode" mask="0x8"/>
        </register>
        <register name="PROC_CLK_CTRL" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000004" caption="Processor Clock Control Register [7:0] Processor Clock Divide Value (PROC_DIV)">
          <bitfield name="DIV" caption="Selects the EC clock rate" mask="0xFF" values="PCR_PROC_CLK_CTRL__DIV"/>
        </register>
        <register name="SLOW_CLK_CTRL" offset="0x8" rw="RW" size="4" access-size="4" initval="0x000001E0" caption="Configures the EC_CLK clock domain">
          <bitfield name="DIV" caption="SLOW_CLOCK_DIVIDE. n=Divide by n; 0=Clock off" mask="0x3FF"/>
        </register>
        <register name="OSC_ID" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Oscillator ID Register">
          <bitfield name="TEST" caption="Test bits" mask="0xFF"/>
          <bitfield name="PLL_LOCK" caption="PLL Lock Status" mask="0x100"/>
        </register>
        <register name="PWR_RST_STS" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000050" caption="PCR Power Reset Status Register">
          <bitfield name="VCC_PWRGD_STS" caption="Indicates the status of VCC_PWRGD. 0 = PWRGD not asserted. 1 = PWRGD asserte." mask="0x4"/>
          <bitfield name="RST_H_STS" caption="Indicates the status of RESET_VCC. 0 = reset active. 1 = reset not active." mask="0x8"/>
          <bitfield name="RST_VTR_STS" caption="Indicates the status of RESET_VTR. 0 = reset active. 1 = reset not active.(R/W1C)" mask="0x10"/>
          <bitfield name="VBAT_RST_STS" caption="VBAT reset status 0 = No reset occurred while VTR was off or since the last time this bit was cleared. 1 = A reset occurred.(R/WC)" mask="0x20"/>
          <bitfield name="RST_SYS_STS" caption="Indicates the status of RESET_SYS.(R/W1C)\n
               0 = No reset occurred since the last time this bit was cleared.\n
               1 = A reset occurred." mask="0x40"/>
          <bitfield name="JTAG_RST_STS" caption="Indicates status of JTAG_TRST# pin.\n
               0 = No JTAG reset occurred since the last time this bit was cleared.\n
               1 = A reset occurred because of a JTAG command." mask="0x80"/>
          <bitfield name="WDT_EVENT" caption="Indicates that a WDT_EVENT happened. (R/W1C)\n
               0 = Not active.\n
               1 = A WDT_EVENT occured." mask="0x100"/>
          <bitfield name="ACTIVE_32K" caption="ACTIVE_32K (32K_ACTIVE)" mask="0x400"/>
          <bitfield name="PCICLK_ACTIVE" caption="PCICLK_ACTIVE (PCICLK_ACTIVE)" mask="0x800"/>
        </register>
        <register name="PWR_RST_CTRL" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000101" caption="Power Reset Control Register">
          <bitfield name="PWR_INV" caption="Used by FW to control internal RESET_VCC signal function and external PWROK pin. This bit is read-only when VCC_PWRGD\n
			  is de-asserted low." mask="0x1"/>
          <bitfield name="H_RST_SEL" caption="Determines what generates the internal platform reset signal. 1=LRESET# pin; 0=eSPI PLTRST# VWire" mask="0x100"/>
        </register>
        <register name="SYS_RST" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00000000" caption="System Reset Register">
          <bitfield name="SOFT_SYS_RST" caption="A write of a 1 forces an assertion of the RESET_SYS reset signal, resetting the device. A write of 0 has no effect." mask="0x100"/>
        </register>
        <register name="SLP_EN_0" offset="0x30" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Sleep Enable 0 Register">
          <bitfield name="OTP_SLP_EN" caption="OTP Enable" mask="0x2"/>
        </register>
        <register name="SLP_EN_1" offset="0x34" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Sleep Enable 1 Register">
          <bitfield name="INT_SLP_EN" caption="Interrupt Sleep Enable" mask="0x1"/>
          <bitfield name="TACH0_SLP_EN" caption="TACH0 Sleep Enable (TACH0_SLP_EN)" mask="0x4"/>
          <bitfield name="PWM0_SLP_EN" caption="PWM0 Sleep Enable (PWM0_SLP_EN)" mask="0x10"/>
          <bitfield name="PMC_SLP_EN" caption="PMC Sleep Enable (PMC_SLP_EN)" mask="0x20"/>
          <bitfield name="DMA_SLP_EN" caption="DMA Sleep Enable (DMA_SLP_EN)" mask="0x40"/>
          <bitfield name="TFDP_SLP_EN" caption="TFDP Sleep Enable (TFDP_SLP_EN)" mask="0x80"/>
          <bitfield name="PROC_SLP_EN" caption="PROCESSOR Sleep Enable (PROCESSOR_SLP_EN)" mask="0x100"/>
          <bitfield name="SMB0_SLP_EN" caption="SMB0 Sleep Enable (SMB0_SLP_EN)" mask="0x400"/>
          <bitfield name="TACH2_SLP_EN" caption="TACH2 Sleep Enable (TACH2_SLP_EN)" mask="0x1000"/>
          <bitfield name="PWM1_SLP_EN" caption="PWM1 Sleep Enable (PWM1_SLP_EN)" mask="0x100000"/>
          <bitfield name="PWM4_SLP_EN" caption="PWM4 Sleep Enable (PWM4_SLP_EN)" mask="0x800000"/>
          <bitfield name="PWM6_SLP_EN" caption="PWM6 Sleep Enable (PWM6_SLP_EN)" mask="0x2000000"/>
          <bitfield name="PWM7_SLP_EN" caption="PWM7 Sleep Enable (PWM7_SLP_EN)" mask="0x4000000"/>
          <bitfield name="EC_REG_BANK_SLP_EN" caption="EC_REG_BANK Sleep Enable (EC_REG_BANK_SLP_EN)" mask="0x20000000"/>
          <bitfield name="TMR16_0_SLP_EN" caption="TIMER16_0 Sleep Enable (TIMER16_0_SLP_EN)" mask="0x40000000"/>
          <bitfield name="TMR16_1_SLP_EN" caption="TIMER16_1 Sleep Enable (TIMER16_1_SLP_EN)" mask="0x80000000"/>
        </register>
        <register name="SLP_EN_2" offset="0x38" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Sleep Enable 2 Register">
          <bitfield name="UART0_SLP_EN" caption="UART 0 Sleep Enable" mask="0x2"/>
          <bitfield name="UART1_SLP_EN" caption="UART 1 Sleep Enable" mask="0x4"/>
        </register>
        <register name="SLP_EN_3" offset="0x3C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Sleep Enable 3 Register">
          <bitfield name="ADC_SLP_EN" caption="ADC Sleep Enable (ADC_SLP_EN)" mask="0x8"/>
          <bitfield name="PS2_0_SLP_EN" caption="PS2_0 Sleep Enable (PS2_0_SLP_EN)" mask="0x20"/>
          <bitfield name="HTM_0_SLP_EN" caption="Hibernation Timer 0 Sleep Enable (HTM_0_SLP_EN)" mask="0x400"/>
          <bitfield name="SMB1_SLP_EN" caption="SMB1 Sleep Enable (SMB1_SLP_EN)" mask="0x2000"/>
          <bitfield name="SMB2_SLP_EN" caption="SMB2 Sleep Enable (SMB2_SLP_EN)" mask="0x4000"/>
          <bitfield name="SMB3_SLP_EN" caption="SMB3 Sleep Enable (SMB3_SLP_EN)" mask="0x8000"/>
          <bitfield name="LED0_SLP_EN" caption="LED0 Sleep Enable (LED0_SLP_EN)" mask="0x10000"/>
          <bitfield name="SMB4_SLP_EN" caption="SMB4 Sleep Enable (SMB4_SLP_EN)" mask="0x100000"/>
          <bitfield name="TMR32_0_SLP_EN" caption="TIMER32_0 Sleep Enable (TIMER32_0_SLP_EN)" mask="0x800000"/>
          <bitfield name="TMR32_1_SLP_EN" caption="TIMER32_1 Sleep Enable (TIMER32_1_SLP_EN)" mask="0x1000000"/>
          <bitfield name="PKE_SLP_EN" caption="PKE Sleep Enable" mask="0x4000000"/>
          <bitfield name="RNG_SLP_EN" caption="RNG Sleep Enable" mask="0x8000000"/>
          <bitfield name="AES_HASH_SLP_EN" caption="AES_HASH Sleep Enable" mask="0x10000000"/>
          <bitfield name="HTM_1_SLP_EN" caption="Hibernation TIMER 1 Sleep Enable (HTM_1_SLP_EN)" mask="0x20000000"/>
          <bitfield name="CCT_SLP_EN" caption="Capture Compare Timer Sleep Enable (CCTIMER_SLP_EN)" mask="0x40000000"/>
        </register>
        <register name="SLP_EN_4" offset="0x40" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Sleep Enable 4 Register">
          <bitfield name="QMSPI_SLP_EN" caption="Quad Master SPI Sleep Enable" mask="0x100"/>
        </register>
        <register name="CLK_REQ_0" offset="0x50" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Clock Required 0 Register">
          <bitfield name="JTAG_STAP_CLK_REQ" caption="JTAG STAP Enable" mask="0x1"/>
          <bitfield name="OTP_CLK_REQ" caption="OTP Enable" mask="0x2"/>
        </register>
        <register name="CLK_REQ_1" offset="0x54" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Clock Required 1 Register">
          <bitfield name="INT_CLK_REQ" caption="Interrupt Clock Required" mask="0x1"/>
          <bitfield name="TACH0_CLK_REQ" caption="TACH0 Clock Required (TACH0_CLK_REQ)" mask="0x4"/>
          <bitfield name="PWM0_CLK_REQ" caption="PWM0 Clock Required (PWM0_CLK_REQ)" mask="0x10"/>
          <bitfield name="PMC_CLK_REQ" caption="PMC Clock Required (PMC_CLK_REQ)" mask="0x20"/>
          <bitfield name="DMA_CLK_REQ" caption="DMA Clock Required (DMA_CLK_REQ)" mask="0x40"/>
          <bitfield name="TFDP_CLK_REQ" caption="TFDP Clock Required (TFDP_CLK_REQ)" mask="0x80"/>
          <bitfield name="PROC_CLK_REQ" caption="PROCESSOR Clock Required (PROCESSOR_CLK_REQ)" mask="0x100"/>
          <bitfield name="WDT_CLK_REQ" caption="WDT Clock Required (WDT_CLK_REQ)" mask="0x200"/>
          <bitfield name="SMB0_CLK_REQ" caption="SMB0 Clock Required (SMB0_CLK_REQ)" mask="0x400"/>
          <bitfield name="TACH2_CLK_REQ" caption="TACH2 Clock Required (TACH2_CLK_REQ)" mask="0x1000"/>
          <bitfield name="PWM1_CLK_REQ" caption="PWM1 Clock Required (PWM1_CLK_REQ)" mask="0x100000"/>
          <bitfield name="PWM4_CLK_REQ" caption="PWM4 Clock Required (PWM4_CLK_REQ)" mask="0x800000"/>
          <bitfield name="PWM6_CLK_REQ" caption="PWM6 Clock Required (PWM6_CLK_REQ)" mask="0x2000000"/>
          <bitfield name="PWM7_CLK_REQ" caption="PWM7 Clock Required (PWM7_CLK_REQ)" mask="0x4000000"/>
          <bitfield name="EC_REG_BANK_CLK_REQ" caption="EC_REG_BANK Clock Required (EC_REG_BANK_CLK_REQ)" mask="0x20000000"/>
          <bitfield name="TMR16_0_CLK_REQ" caption="TIMER16_0 Clock Required (TIMER16_0_CLK_REQ)" mask="0x40000000"/>
          <bitfield name="TMR16_1_CLK_REQ" caption="TIMER16_1 Clock Required (TIMER16_1_CLK_REQ)" mask="0x80000000"/>
        </register>
        <register name="CLK_REQ_2" offset="0x58" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Clock Required 2 Register">
          <bitfield name="IMAP_CLK_REQ" caption="IMAP Clock Required (IMAP_CLK_REQ)" mask="0x1"/>
          <bitfield name="UART0_CLK_REQ" caption="UART 0 Clock Required" mask="0x2"/>
          <bitfield name="UART1_CLK_REQ" caption="UART 1 Clock Required" mask="0x4"/>
          <bitfield name="GLBL_CFG_CLK_REQ" caption="GLBL_CFG (GLBL_CFG_CLK_REQ)" mask="0x1000"/>
          <bitfield name="RTC_CLK_REQ" caption="RTC Clock Required (RTC_CLK_REQ)" mask="0x40000"/>
        </register>
        <register name="CLK_REQ_3" offset="0x5C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Clock Required 3 Register">
          <bitfield name="ADC_CLK_REQ" caption="ADC Clock Required (ADC_CLK_REQ)" mask="0x8"/>
          <bitfield name="PS2_0_CLK_REQ" caption="PS2_0 Clock Required (PS2_0_CLK_REQ)" mask="0x20"/>
          <bitfield name="HTM0_CLK_REQ" caption="Hibernation TIMER 0 Clock Required (HTM_0_CLK_REQ)" mask="0x400"/>
          <bitfield name="SMB1_CLK_REQ" caption="SMB1 Clock Required (SMB1_CLK_REQ)" mask="0x2000"/>
          <bitfield name="SMB2_CLK_REQ" caption="SMB2 Clock Required (SMB2_CLK_REQ)" mask="0x4000"/>
          <bitfield name="SMB3_CLK_REQ" caption="SMB3 Clock Required (SMB3_CLK_REQ)" mask="0x8000"/>
          <bitfield name="LED0_CLK_REQ" caption="LED0 Clock Required (LED0_CLK_REQ)" mask="0x10000"/>
          <bitfield name="SMB_4_CLK_REQ" caption="SMB 4 Clock Required (SMB_4_CLK_REQ)" mask="0x100000"/>
          <bitfield name="TMR32_0_CLK_REQ" caption="TIMER32_0 Clock Required (TIMER32_0_CLK_REQ)" mask="0x800000"/>
          <bitfield name="TMR32_1_CLK_REQ" caption="TIMER32_1 Clock Required (TIMER32_1_CLK_REQ)" mask="0x1000000"/>
          <bitfield name="PKE_CLK_REQ" caption="PKE Clock Required" mask="0x4000000"/>
          <bitfield name="RNG_CLK_REQ" caption="RNG Clock Required" mask="0x8000000"/>
          <bitfield name="AES_HASH_CLK_REQ" caption="AES_HASH Clock Required" mask="0x10000000"/>
          <bitfield name="HTM_1_CLK_REQ" caption="Hibernation TIMER 1 Clock Required (HTM_1_CLK_REQ)" mask="0x20000000"/>
          <bitfield name="CCTIMER_CLK_REQ" caption="Capture Compare Timer Clock Required (CCTIMER_CLK_REQ)" mask="0x40000000"/>
        </register>
        <register name="CLK_REQ_4" offset="0x60" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Clock Required 4 Register">
          <bitfield name="RTOS_CLK_REQ" caption="RTOS Clock Required (RTOS_CLK_REQ)" mask="0x40"/>
          <bitfield name="QMSPI_CLK_REQ" caption="Quad Master SPI Clock Required" mask="0x100"/>
        </register>
        <register name="RST_EN_0" offset="0x70" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Reset Enable 0 Register">
          <bitfield name="OTP_RST_EN" caption="OTP Reset Enable" mask="0x2"/>
        </register>
        <register name="RST_EN_1" offset="0x74" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Reset Enable 1 Register">
          <bitfield name="INT_RST_EN" caption="Interrupt Reset Enable" mask="0x1"/>
          <bitfield name="TACH0_RST_EN" caption="TACH0 Reset Enable (TACH0_RST_EN)" mask="0x4"/>
          <bitfield name="PWM0_RST_EN" caption="PWM0 Reset Enable (PWM0_RST_EN)" mask="0x10"/>
          <bitfield name="DMA_RST_EN" caption="DMA Reset Enable (DMA_RST_EN)" mask="0x40"/>
          <bitfield name="TFDP_RST_EN" caption="TFDP Reset Enable (TFDP_RST_EN)" mask="0x80"/>
          <bitfield name="WDT_RST_EN" caption="WDT Reset Enable (WDT_RST_EN)" mask="0x200"/>
          <bitfield name="SMB0_RST_EN" caption="SMB0 Reset Enable (SMB0_RST_EN)" mask="0x400"/>
          <bitfield name="TACH2_RST_EN" caption="TACH2 Reset Enable (TACH2_RST_EN)" mask="0x1000"/>
          <bitfield name="PWM1_RST_EN" caption="PWM1 Reset Enable (PWM1_RST_EN)" mask="0x100000"/>
          <bitfield name="PWM4_RST_EN" caption="PWM4 Reset Enable (PWM4_RST_EN)" mask="0x800000"/>
          <bitfield name="PWM6_RST_EN" caption="PWM6 Reset Enable (PWM6_RST_EN)" mask="0x2000000"/>
          <bitfield name="PWM7_RST_EN" caption="PWM7 Reset Enable (PWM7_RST_EN)" mask="0x4000000"/>
          <bitfield name="TMR16_0_RST_EN" caption="TIMER16_0 Reset Enable (TIMER16_0_RST_EN)" mask="0x40000000"/>
          <bitfield name="TMR16_1_RST_EN" caption="TIMER16_1 Reset Enable (TIMER16_1_RST_EN)" mask="0x80000000"/>
        </register>
        <register name="RST_EN_2" offset="0x78" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Reset Enable 2 Register">
          <bitfield name="IMAP_RST_EN" caption="IMAP Reset Enable (IMAP_RST_EN)" mask="0x1"/>
          <bitfield name="UART0_RST_EN" caption="UART 0 Reset Enable" mask="0x2"/>
          <bitfield name="UART1_RST_EN" caption="UART 1 Reset Enable" mask="0x4"/>
          <bitfield name="ACPI_EC0_RST_EN" caption="ACPI EC 0 Reset Enable (ACPI_EC_0_RST_EN)" mask="0x2000"/>
          <bitfield name="ACPI_EC1_RST_EN" caption="ACPI EC 1 Reset Enable (ACPI_EC_1_RST_EN)" mask="0x4000"/>
          <bitfield name="ACPI_PM1_RST_EN" caption="ACPI PM1 Reset Enable (ACPI_PM1_RST_EN)" mask="0x8000"/>
          <bitfield name="MBX_RST_EN" caption="Mailbox Reset Enable (MBX_RST_EN)" mask="0x20000"/>
          <bitfield name="RTC_RST_EN" caption="RTC Reset Enable (RTC_RST_EN)" mask="0x40000"/>
          <bitfield name="SCRATCH_32_RST_EN" caption="SCRATCH 32 Reset Enable" mask="0x100000"/>
          <bitfield name="ACPI_EC_2_RST_EN" caption="ACPI EC 2 Reset Enable (ACPI_EC_2_RST_EN)" mask="0x200000"/>
          <bitfield name="ACPI_EC_3_RST_EN" caption="ACPI EC 3 Reset Enable (ACPI_EC_3_RST_EN)" mask="0x400000"/>
          <bitfield name="PORT_80_0_RST_EN" caption="Port 80 0 Reset Enable" mask="0x2000000"/>
          <bitfield name="PORT_80_1_RST_EN" caption="Port 80 1 Reset Enable" mask="0x4000000"/>
        </register>
        <register name="RST_EN_3" offset="0x7C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Reset Enable 3 Register">
          <bitfield name="ADC_RST_EN" caption="ADC Reset Enable (ADC_RST_EN)" mask="0x8"/>
          <bitfield name="PS2_0_RST_EN" caption="PS2_0 Reset Enable (PS2_0_RST_EN)" mask="0x20"/>
          <bitfield name="HTM_0_RST_EN" caption="Hibernation TIMER 0 Reset Enable (HTM_0_RST_EN)" mask="0x400"/>
          <bitfield name="SMB1_RST_EN" caption="SMB1 Reset Enable (SMB1_RST_EN)" mask="0x2000"/>
          <bitfield name="SMB2_RST_EN" caption="SMB2 Reset Enable (SMB2_RST_EN)" mask="0x4000"/>
          <bitfield name="SMB3_RST_EN" caption="SMB3 Reset Enable (SMB3_RST_EN)" mask="0x8000"/>
          <bitfield name="LED0_RST_EN" caption="LED0 Reset Enable (LED0_RST_EN)" mask="0x10000"/>
          <bitfield name="SMB_4_RST_EN" caption="SMB 4 Reset Enable (SMB_4_RST_EN)" mask="0x100000"/>
          <bitfield name="TMR32_0_RST_EN" caption="TIMER32_0 Reset Enable (TIMER32_0_RST_EN)" mask="0x800000"/>
          <bitfield name="TMR32_1_RST_EN" caption="TIMER32_1 Reset Enable (TIMER32_1_RST_EN)" mask="0x1000000"/>
          <bitfield name="PKE_RST_EN" caption="PKE Reset Enable" mask="0x4000000"/>
          <bitfield name="RNG_RST_EN" caption="RNG Reset Enable" mask="0x8000000"/>
          <bitfield name="AES_HASH_RST_EN" caption="AES_HASH Reset Enable" mask="0x10000000"/>
          <bitfield name="HTM_1_RST_EN" caption="Hibernation TIMER 1 Reset Enable (HTM_1_RST_EN)" mask="0x20000000"/>
          <bitfield name="CCTIMER_RST_EN" caption="Capture Compare Timer Reset Enable (CCTIMER_RST_EN)" mask="0x40000000"/>
        </register>
        <register name="RST_EN_4" offset="0x80" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Reset Enable 4 Register">
          <bitfield name="RTOS_RST_EN" caption="RTOS Reset Enable (RTOS_RST_EN)" mask="0x40"/>
          <bitfield name="QMSPI_RST_EN" caption="Quad Master SPI Reset Enable" mask="0x100"/>
        </register>
        <register name="LOCK_REG" offset="0x84" rw="RW" size="4" access-size="4" initval="0xA6382D4D" caption="LOCK Register">
          <bitfield name="PCR_RST_EN_LOCK" caption="PCR Reset Enable Lock Register." mask="0xFFFFFFFF"/>
        </register>
      </register-group>
      <value-group caption="" name="PCR_PROC_CLK_CTRL__DIV">
        <value caption="1: divide 48 MHz Ring Oscillator by 1" name="DIVIDE_BY_1" value="0x1"/>
        <value caption="3: divide 48 MHz Ring Oscillator by 3" name="DIVIDE_BY_3" value="0x3"/>
        <value caption="4: divide 48 MHz Ring Oscillator by 4" name="DIVIDE_BY_4" value="0x4"/>
        <value caption="16: divide 48 MHz Ring Oscillator by 16" name="DIVIDE_BY_16" value="0x10"/>
        <value caption="48: divide 48 MHz Ring Oscillator by 48" name="DIVIDE_BY_48" value="0x30"/>
      </value-group>
    </module>
    <module name="DMA_MAIN" id="85a" version="1.0" caption="DMA Main Registers">
      <register-group name="DMA_MAIN" caption="DMA Main Registers">
        <register name="ACTRST" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="Soft reset the entire module. Enable the blocks operation.">
          <bitfield name="ACT" caption="Enable the blocks operation. (R/WS)\n
               1=Enable block. Each individual channel must be enabled separately.\n
               0=Disable all channels." mask="0x1"/>
          <bitfield name="SOFT_RST" caption="Soft reset the entire module. This bit is self-clearing." mask="0x2"/>
        </register>
        <register name="DATA_PKT" offset="0x4" rw="R" size="4" access-size="4" initval="0x00000000" caption="Debug register that has the data that is stored in the Data Packet. This data is read data from the currently active transfer source.">
        </register>
      </register-group>
    </module>
    <module name="DMA_CHAN00" id="85b" version="1.0" caption="DMA Channel 00 Registers">
      <register-group name="DMA_CHAN00" caption="DMA Channel 00 Registers">
        <register name="ACTIVATE" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.">
          <bitfield name="CHN" caption="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n
                 1=Enable channel(block). Each individual channel must be enabled separately.\n
                 0=Disable channel(block)." mask="0x1"/>
        </register>
        <register name="MSTART" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the starting address for the Memory device.">
        </register>
        <register name="MEND" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the ending address for the Memory device.">
        </register>
        <register name="DSTART" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the Master Device address.">
        </register>
        <register name="CTRL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA Channel N Control">
          <bitfield name="RUN" caption="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n
                 1= This channel is enabled and will service transfer requests\n
                 0=This channel is disabled. All transfer requests are ignored." mask="0x1"/>
          <bitfield name="REQ" caption="This is a status field.\n
                 1= There is a transfer request from the Master Device\n
                 0= There is no transfer request from the Master Device" mask="0x2"/>
          <bitfield name="DONE" caption="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n
                 This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n
                 1=Channel is done\n
                 0=Channel is not done or it is OFF" mask="0x4"/>
          <bitfield name="STS" caption="This is a status signal. The status decode is listed in priority order with the highest priority first.
                 3: Error detected by the DMA
                 2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term
                 1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address
                 0: DMA Channel Control:Run is Disabled (0x0)" mask="0x18" values="DMA_CHAN00_CTRL__STS"/>
          <bitfield name="BUSY" caption="This is a status signal.\n
                 1=The DMA Channel is busy (FSM is not IDLE)\n
                 0=The DMA Channel is not busy (FSM is IDLE)" mask="0x20"/>
          <bitfield name="TX_DIR" caption="This determines the direction of the DMA Transfer.\n
                 1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n
                 0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address" mask="0x100"/>
          <bitfield name="HW_FLOW_CTRL_DEV" caption="This is the device that is connected to this channel as its Hardware Flow Control master.\n
                 The Flow Control Interface is a bus with each master concatenated onto it.\n
                 This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n
                 The Flow Control Interface Port list is dma_req, dma_term, and dma_done." mask="0xFE00"/>
          <bitfield name="INC_MEM_ADDR" caption="This will enable an auto-increment to the DMA Channel Memory Address.\n
                 1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n
                 0=Do nothing" mask="0x10000"/>
          <bitfield name="INC_DEV_ADDR" caption="This will enable an auto-increment to the DMA Channel Device Address.\n
                 1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n
                 0: Do nothing" mask="0x20000"/>
          <bitfield name="LOCK" caption="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)." mask="0x40000"/>
          <bitfield name="DIS_HW_FLOW_CTRL" caption="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode." mask="0x80000"/>
          <bitfield name="TRANS_SIZE" caption="This is the transfer size in Bytes of each Data Packet transfer.\n
                 Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes." mask="0x700000"/>
          <bitfield name="TRANS_GO" caption="This is used for the Firmware Flow Control DMA transfer." mask="0x1000000"/>
          <bitfield name="TRANS_ABORT" caption="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately." mask="0x2000000"/>
        </register>
        <register name="ISTS" offset="0x14" rw="RW" size="1" access-size="1" initval="0x00" caption="DMA Channel N Interrupt Status">
          <bitfield name="BUS_ERR" caption="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n
                 1: Error detected. (R/WC)" mask="0x1"/>
          <bitfield name="FLOW_CTRL" caption="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n
				after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n
                 1=Hardware Flow Control is requesting after the transfer has completed\n
                 0=No Hardware Flow Control event" mask="0x2"/>
          <bitfield name="DONE" caption="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n
				A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n
				A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n
                 1=Memory Start Address equals Memory End Address\n
                 0=Memory Start Address does not equal Memory End Address" mask="0x4"/>
        </register>
        <register name="IEN" offset="0x18" rw="RW" size="1" access-size="1" initval="0x00" caption="DMA CHANNEL N INTERRUPT ENABLE">
          <bitfield name="STS_EN_BUS_ERR" caption="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x1"/>
          <bitfield name="STS_EN_FLOW_CTRL" caption="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x2"/>
          <bitfield name="STS_EN_DONE" caption="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x4"/>
        </register>
        <register name="CRC_EN" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA CHANNEL N CRC ENABLE">
          <bitfield name="MODE" caption="1=Enable the calculation of CRC-32 for DMA Channel N\n
				0=Disable the calculation of CRC-32 for DMA Channel N" mask="0x1"/>
          <bitfield name="POST_TRANS" caption="The bit enables the transfer of the calculated CRC-32 after the completion of the DMA transaction.\n
				If the DMA transaction is aborted by either firmware or an internal bus error, the transfer will not occur.\n
				If the target of the DMA transfer is a device and the device signaled the termination of the DMA transaction,\n
				the CRC post transfer will not occur.\n
				1=Enable the transfer of CRC-32 for DMA Channel N after the DMA transaction completes\n
				0=Disable the automatic transfer of the CRC" mask="0x2"/>
        </register>
        <register name="CRC_DATA" offset="0x24" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA CHANNEL N CRC DATA">
          <bitfield name="CRC" caption="Writes to this register initialize the CRC generator. Reads from this register return the output of the\n
				CRC that is calculated from the data transferred by DMA Channel N. The output of the CRC generator is bit-reversed\n
				and inverted on reads, as required by the CRC-32-IEEE definition. A CRC can be accumulated across multiple DMA transactions\n
				on Channel N. If it is necessary to save the intermediate CRC value, the result of the read of this register must be\n
				bit-reversed and inverted before being written back to this register." mask="0xFFFFFFFF"/>
        </register>
        <register name="CRC_POST_STS" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA CHANNEL N CRC POST STATUS">
          <bitfield name="CRC_DONE" caption="This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n
				It is cleared to '0b' when the DMA controller starts a new transfer on the channel." mask="0x1"/>
          <bitfield name="CRC_RUNNING" caption="This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n
				It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n
				to '0b' when the post-transfer completes." mask="0x2"/>
          <bitfield name="CRC_DATA_DONE" caption="This bit is set to '1b' when the DMA controller has completed the post-transfer of the CRC data.\n
				This bit is cleared to '0b' when the a new DMA transfer starts." mask="0x4"/>
          <bitfield name="CRC_DATA_READY" caption="This bit is set to '1b' when the DMA controller is processing the post-transfer of the CRC data.\n
				This bit is cleared to '0b' when the post-transfer completes." mask="0x8"/>
        </register>
      </register-group>
      <value-group caption="" name="DMA_CHAN00_CTRL__STS">
        <value caption="3: Error detected by the DMA" name="ERROR" value="0x3"/>
        <value caption="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" name="EXT_DONE" value="0x2"/>
        <value caption="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" name="LOC_DONE" value="0x1"/>
        <value caption="0: DMA Channel Control:Run is Disabled (0x0)" name="DIS" value="0x0"/>
      </value-group>
    </module>
    <module name="DMA_CHAN01" id="85c" version="1.0" caption="DMA Channel 01 Registers">
      <register-group name="DMA_CHAN01" caption="DMA Channel 01 Registers">
        <register name="ACTIVATE" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.">
          <bitfield name="CHN" caption="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n
                 1=Enable channel(block). Each individual channel must be enabled separately.\n
                 0=Disable channel(block)." mask="0x1"/>
        </register>
        <register name="MSTART" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the starting address for the Memory device.">
        </register>
        <register name="MEND" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the ending address for the Memory device.">
        </register>
        <register name="DSTART" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the Master Device address.">
        </register>
        <register name="CTRL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA Channel N Control">
          <bitfield name="RUN" caption="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n
                 1= This channel is enabled and will service transfer requests\n
                 0=This channel is disabled. All transfer requests are ignored." mask="0x1"/>
          <bitfield name="REQ" caption="This is a status field.\n
                 1= There is a transfer request from the Master Device\n
                 0= There is no transfer request from the Master Device" mask="0x2"/>
          <bitfield name="DONE" caption="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n
                 This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n
                 1=Channel is done\n
                 0=Channel is not done or it is OFF" mask="0x4"/>
          <bitfield name="STS" caption="This is a status signal. The status decode is listed in priority order with the highest priority first.
                 3: Error detected by the DMA
                 2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term
                 1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address
                 0: DMA Channel Control:Run is Disabled (0x0)" mask="0x18"  values="DMA_CHAN01_CTRL__STS"/>
          <bitfield name="BUSY" caption="This is a status signal.\n
                 1=The DMA Channel is busy (FSM is not IDLE)\n
                 0=The DMA Channel is not busy (FSM is IDLE)" mask="0x20"/>
          <bitfield name="TX_DIR" caption="This determines the direction of the DMA Transfer.\n
                 1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n
                 0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address" mask="0x100"/>
          <bitfield name="HW_FLOW_CTRL_DEV" caption="This is the device that is connected to this channel as its Hardware Flow Control master.\n
                 The Flow Control Interface is a bus with each master concatenated onto it.\n
                 This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n
                 The Flow Control Interface Port list is dma_req, dma_term, and dma_done." mask="0xFE00"/>
          <bitfield name="INC_MEM_ADDR" caption="This will enable an auto-increment to the DMA Channel Memory Address.\n
                 1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n
                 0=Do nothing" mask="0x10000"/>
          <bitfield name="INC_DEV_ADDR" caption="This will enable an auto-increment to the DMA Channel Device Address.\n
                 1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n
                 0: Do nothing" mask="0x20000"/>
          <bitfield name="LOCK" caption="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)." mask="0x40000"/>
          <bitfield name="DIS_HW_FLOW_CTRL" caption="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode." mask="0x80000"/>
          <bitfield name="TRANS_SIZE" caption="This is the transfer size in Bytes of each Data Packet transfer.\n
                 Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes." mask="0x700000"/>
          <bitfield name="TRANS_GO" caption="This is used for the Firmware Flow Control DMA transfer." mask="0x1000000"/>
          <bitfield name="TRANS_ABORT" caption="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately." mask="0x2000000"/>
        </register>
        <register name="ISTS" offset="0x14" rw="RW" size="1" access-size="1" initval="0x00" caption="DMA Channel N Interrupt Status">
          <bitfield name="BUS_ERROR" caption="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n
                 1: Error detected. (R/WC)" mask="0x1"/>
          <bitfield name="FLOW_CTRL" caption="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n
				after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n
                 1=Hardware Flow Control is requesting after the transfer has completed\n
                 0=No Hardware Flow Control event" mask="0x2"/>
          <bitfield name="DONE" caption="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n
				A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n
				A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n
                 1=Memory Start Address equals Memory End Address\n
                 0=Memory Start Address does not equal Memory End Address" mask="0x4"/>
        </register>
        <register name="IEN" offset="0x18" rw="RW" size="1" access-size="1" initval="0x00" caption="DMA CHANNEL N INTERRUPT ENABLE">
          <bitfield name="STS_EN_BUS_ERR" caption="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x1"/>
          <bitfield name="STS_EN_FLOW_CTRL" caption="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x2"/>
          <bitfield name="STS_EN_DONE" caption="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x4"/>
        </register>
        <register name="FILL_EN" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA CHANNEL N FILL ENABLE">
          <bitfield name="MODE" caption="1=Enable the DMA Channel Fill Engine N\n
				0=Disable the DMA Channel Fill Engine" mask="0x1"/>
        </register>
        <register name="FILL_DATA" offset="0x24" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA CHANNEL N FILL DATA">
          <bitfield name="DATA" caption="This is the data pattern used to fill memory." mask="0xFFFFFFFF"/>
        </register>
        <register name="FILL_STS" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA CHANNEL N FILL STATUS">
          <bitfield name="DONE" caption="This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n
				It is cleared to '0b' when the DMA controller starts a new transfer on the channel." mask="0x1"/>
          <bitfield name="RUNNING" caption="This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n
				It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n
				to '0b' when the post-transfer completes." mask="0x2"/>
        </register>
      </register-group>
      <value-group caption="" name="DMA_CHAN01_CTRL__STS">
        <value caption="3: Error detected by the DMA" name="ERROR" value="0x3"/>
        <value caption="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" name="EXT_DONE" value="0x2"/>
        <value caption="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" name="LOC_DONE" value="0x1"/>
        <value caption="0: DMA Channel Control:Run is Disabled (0x0)" name="DIS" value="0x0"/>
      </value-group>
    </module>
    <module name="DMA_CHAN02" id="85d" version="1.0" caption="DMA Channel 02 Registers">
      <register-group name="DMA_CHAN02" caption="DMA Channel 02 Registers">
        <register name="ACTIVATE" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.">
          <bitfield name="CHN" caption="Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n
                 1=Enable channel(block). Each individual channel must be enabled separately.\n
                 0=Disable channel(block)." mask="0x1"/>
        </register>
        <register name="MSTART" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the starting address for the Memory device.">
        </register>
        <register name="MEND" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the ending address for the Memory device.">
	</register>
        <register name="DSTART" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the Master Device address.">
        </register>
        <register name="CTRL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="DMA Channel N Control">
          <bitfield name="RUN" caption="This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n
                 1= This channel is enabled and will service transfer requests\n
                 0=This channel is disabled. All transfer requests are ignored." mask="0x1"/>
          <bitfield name="REQ" caption="This is a status field.\n
                 1= There is a transfer request from the Master Device\n
                 0= There is no transfer request from the Master Device" mask="0x2"/>
          <bitfield name="DONE" caption="This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n
                 This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n
                 1=Channel is done\n
                 0=Channel is not done or it is OFF" mask="0x4"/>
          <bitfield name="STS" caption="This is a status signal. The status decode is listed in priority order with the highest priority first.
                 3: Error detected by the DMA
                 2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term
                 1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address
                 0: DMA Channel Control:Run is Disabled (0x0)" mask="0x18" values="DMA_CHAN02_CTRL__STS"/>
          <bitfield name="BUSY" caption="This is a status signal.\n
                 1=The DMA Channel is busy (FSM is not IDLE)\n
                 0=The DMA Channel is not busy (FSM is IDLE)" mask="0x20"/>
          <bitfield name="TX_DIR" caption="This determines the direction of the DMA Transfer.\n
                 1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n
                 0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address" mask="0x100"/>
          <bitfield name="HW_FLOW_CTRL_DEV" caption="This is the device that is connected to this channel as its Hardware Flow Control master.\n
                 The Flow Control Interface is a bus with each master concatenated onto it.\n
                 This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n
                 The Flow Control Interface Port list is dma_req, dma_term, and dma_done." mask="0xFE00"/>
          <bitfield name="INC_MEM_ADDR" caption="This will enable an auto-increment to the DMA Channel Memory Address.\n
                 1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n
                 0=Do nothing" mask="0x10000"/>
          <bitfield name="INC_DEV_ADDR" caption="This will enable an auto-increment to the DMA Channel Device Address.\n
                 1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n
                 0: Do nothing" mask="0x20000"/>
          <bitfield name="LOCK" caption="This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions)." mask="0x40000"/>
          <bitfield name="DIS_HW_FLOW_CTRL" caption="This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode." mask="0x80000"/>
          <bitfield name="TRANS_SIZE" caption="This is the transfer size in Bytes of each Data Packet transfer.\n
                 Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes." mask="0x700000"/>
          <bitfield name="TRANS_GO" caption="This is used for the Firmware Flow Control DMA transfer." mask="0x1000000"/>
          <bitfield name="TRANS_ABORT" caption="This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately." mask="0x2000000"/>
        </register>
        <register name="ISTS" offset="0x14" rw="RW" size="1" access-size="1" initval="0x00" caption="DMA Channel N Interrupt Status">
          <bitfield name="BUS_ERR" caption="This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n
                 1: Error detected. (R/WC)" mask="0x1"/>
          <bitfield name="FLOW_CTRL" caption="This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n
				after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n
                 1=Hardware Flow Control is requesting after the transfer has completed\n
                 0=No Hardware Flow Control event" mask="0x2"/>
          <bitfield name="DONE" caption="This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n
				A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n
				A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n
                 1=Memory Start Address equals Memory End Address\n
                 0=Memory Start Address does not equal Memory End Address" mask="0x4"/>
        </register>
        <register name="IEN" offset="0x18" rw="RW" size="1" access-size="1" initval="0x00" caption="DMA CHANNEL N INTERRUPT ENABLE">
          <bitfield name="STS_EN_BUS_ERR" caption="This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x1"/>
          <bitfield name="STS_EN_FLOW_CTRL" caption="This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x2"/>
          <bitfield name="STS_EN_DONE" caption="This is an interrupt enable for DMA Channel Interrupt:Status Done.\n
                 1=Enable Interrupt\n
                 0=Disable Interrupt" mask="0x4"/>
        </register>
      </register-group>
      <value-group caption="" name="DMA_CHAN02_CTRL__STS">
        <value caption="3: Error detected by the DMA" name="ERROR" value="0x3"/>
        <value caption="2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term" name="EXT_DONE" value="0x2"/>
        <value caption="1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address" name="LOC_DONE" value="0x1"/>
        <value caption="0: DMA Channel Control:Run is Disabled (0x0)" name="DIS" value="0x0"/>
      </value-group>
    </module>
    <module name="ECIA" version="1.0" caption="The ECIA works in conjunction with the processor interrupt interface to handle hardware interrupts andd exceptions.">
      <register-group name="ECIA" caption="The ECIA works in conjunction with the processor interrupt interface to handle hardware interrupts andd exceptions.">
        <register name="SRC8" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ8 Source Register">
        </register>
        <register name="EN_SET8" offset="0x4" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ8 Enable Set Register">
        </register>
        <register name="RESULT8" offset="0x8" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ8 Result Register">
        </register>
        <register name="EN_CLR8" offset="0xc" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ8 Enable Clear Register">
        </register>
        <register name="SRC9" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ9 Source Register">
        </register>
        <register name="EN_SET9" offset="0x18" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ9 Enable Set Register">
        </register>
        <register name="RESULT9" offset="0x1c" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ9 Result Register">
        </register>
        <register name="EN_CLR9" offset="0x20" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ9 Enable Clear Register">
        </register>
        <register name="SRC10" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ10 Source Register">
        </register>
        <register name="EN_SET10" offset="0x2c" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ10 Enable Set Register">
        </register>
        <register name="RESULT10" offset="0x30" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ10 Result Register">
        </register>
        <register name="EN_CLR10" offset="0x34" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ10 Enable Clear Register">
        </register>
        <register name="SRC11" offset="0x3c" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ11 Source Register">
        </register>
        <register name="EN_SET11" offset="0x40" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ11 Enable Set Register">
        </register>
        <register name="RESULT11" offset="0x44" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ11 Result Register">
        </register>
        <register name="EN_CLR11" offset="0x48" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ11 Enable Clear Register">
        </register>
        <register name="SRC12" offset="0x50" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ12 Source Register">
        </register>
        <register name="EN_SET12" offset="0x54" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ12 Enable Set Register">
        </register>
        <register name="RESULT12" offset="0x58" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ12 Result Register">
        </register>
        <register name="EN_CLR12" offset="0x5c" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ12 Enable Clear Register">
        </register>
        <register name="SRC13" offset="0x64" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ13 Source Register">
        </register>
        <register name="EN_SET13" offset="0x68" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ13 Enable Set Register">
        </register>
        <register name="RESULT13" offset="0x6c" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ13 Result Register">
        </register>
        <register name="EN_CLR13" offset="0x70" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ13 Enable Clear Register">
        </register>
        <register name="SRC14" offset="0x78" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ14 Source Register">
        </register>
        <register name="EN_SET14" offset="0x7c" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ14 Enable Set Register">
        </register>
        <register name="RESULT14" offset="0x80" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ14 Result Register">
        </register>
        <register name="EN_CLR14" offset="0x84" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ14 Enable Clear Register">
        </register>
        <register name="SRC15" offset="0x8c" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ15 Source Register">
        </register>
        <register name="EN_SET15" offset="0x90" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ15 Enable Set Register">
        </register>
        <register name="RESULT15" offset="0x94" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ15 Result Register">
        </register>
        <register name="EN_CLR15" offset="0x98" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ15 Enable Clear Register">
        </register>
        <register name="SRC16" offset="0xa0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ16 Source Register">
        </register>
        <register name="EN_SET16" offset="0xa4" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ16 Enable Set Register">
        </register>
        <register name="RESULT16" offset="0xa8" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ16 Result Register">
        </register>
        <register name="EN_CLR16" offset="0xac" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ16 Enable Clear Register">
        </register>
        <register name="SRC17" offset="0xb4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ17 Source Register">
        </register>
        <register name="EN_SET17" offset="0xb8" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ17 Enable Set Register">
        </register>
        <register name="RESULT17" offset="0xbc" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ17 Result Register">
        </register>
        <register name="EN_CLR17" offset="0xc0" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ17 Enable Clear Register">
        </register>
        <register name="SRC18" offset="0xc8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ18 Source Register">
        </register>
        <register name="EN_SET18" offset="0xcc" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ18 Enable Set Register">
        </register>
        <register name="RESULT18" offset="0xd0" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ18 Result Register">
        </register>
        <register name="EN_CLR18" offset="0xd4" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ18 Enable Clear Register">
        </register>
        <register name="SRC19" offset="0xdc" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ19 Source Register">
        </register>
        <register name="EN_SET19" offset="0xe0" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ19 Enable Set Register">
        </register>
        <register name="RESULT19" offset="0xe4" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ19 Result Register">
        </register>
        <register name="EN_CLR19" offset="0xe8" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ19 Enable Clear Register">
        </register>
        <register name="SRC20" offset="0xf0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ20 Source Register">
        </register>
        <register name="EN_SET20" offset="0xf4" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ20 Enable Set Register">
        </register>
        <register name="RESULT20" offset="0xf8" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ20 Result Register">
        </register>
        <register name="EN_CLR20" offset="0xfc" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ20 Enable Clear Register">
        </register>
        <register name="SRC21" offset="0x104" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ21 Source Register">
        </register>
        <register name="EN_SET21" offset="0x108" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ21 Enable Set Register">
        </register>
        <register name="RESULT21" offset="0x10c" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ21 Result Register">
        </register>
        <register name="EN_CLR21" offset="0x110" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ21 Enable Clear Register">
        </register>
        <register name="SRC22" offset="0x118" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ22 Source Register">
        </register>
        <register name="EN_SET22" offset="0x11c" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ22 Enable Set Register">
        </register>
        <register name="RESULT22" offset="0x120" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ22 Result Register">
        </register>
        <register name="EN_CLR22" offset="0x124" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ22 Enable Clear Register">
        </register>
        <register name="SRC23" offset="0x12c" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ23 Source Register">
        </register>
        <register name="EN_SET23" offset="0x130" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ23 Enable Set Register">
        </register>
        <register name="RESULT23" offset="0x134" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ23 Result Register">
        </register>
        <register name="EN_CLR23" offset="0x138" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ23 Enable Clear Register">
        </register>
        <register name="SRC24" offset="0x140" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ24 Source Register">
        </register>
        <register name="EN_SET24" offset="0x144" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ24 Enable Set Register">
        </register>
        <register name="RESULT24" offset="0x148" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ24 Result Register">
        </register>
        <register name="EN_CLR24" offset="0x14c" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ24 Enable Clear Register">
        </register>
        <register name="SRC25" offset="0x154" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ25 Source Register">
        </register>
        <register name="EN_SET25" offset="0x158" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ25 Enable Set Register">
        </register>
        <register name="RESULT25" offset="0x15c" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ25 Result Register">
        </register>
        <register name="EN_CLR25" offset="0x160" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ25 Enable Clear Register">
        </register>
        <register name="SRC26" offset="0x168" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GIRQ26 Source Register">
        </register>
        <register name="EN_SET26" offset="0x16c" rw="RW" size="4" access-size="4" atomic-op="set:EN_SET" initval="0x00000000" caption="GIRQ26 Enable Set Register">
        </register>
        <register name="RESULT26" offset="0x170" rw="R" size="4" access-size="4" initval="0x00000000" caption="GIRQ26 Result Register">
        </register>
        <register name="EN_CLR26" offset="0x174" rw="RW" size="4" access-size="4" atomic-op="clear:EN_CLR" initval="0x00000000" caption="GIRQ26 Enable Clear Register">
        </register>
        <register name="BLK_EN_SET" offset="0x200" rw="RW" size="4" access-size="4" atomic-op="set:BLOCK_ENABLE_SET" initval="0x00000000" caption="Block Enable Set Register">
          <bitfield name="VTOR_EN_SET" caption="Each GIRQx bit can be individually enabled to assert an interrupt event.\n
			  Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n
			  the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_CLEAR bit. (0=disabled, 1=enabled) (R/WS)\n
			  1=Interrupts in the GIRQx Source Register may be enabled\n
			  0=No effect." mask="0x7FFFFFFF"/>
        </register>
        <register name="BLK_EN_CLR" offset="0x204" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Block Enable Clear Register.">
          <bitfield name="VTOR_EN_CLR" caption="Each GIRQx bit can be individually disabled to inhibit an interrupt event.\n
			  Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n
			  the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_CLEAR bit. (0=disabled, 1=enabled) (R/WC)\n
			  1=All interrupts in the GIRQx Source Register are disabled\n
			  0=No effect." mask="0x7FFFFFFF"/>
        </register>
        <register name="BLK_IRQ_VTOR" offset="0x208" rw="R" size="4" access-size="4" initval="0x00000000" caption="Block IRQ Vector Register">
          <bitfield name="VTOR" caption="Each bit in this field reports the status of the group GIRQ interrupt assertion to the NVIC. If the GIRQx interrupt\n
			  is disabled as a group, by the Block Enable Clear Register, then the corresponding bit will be '0'b and no interrupt will be asserted." mask="0x1FFFFFF"/>
        </register>
      </register-group>
    </module>
    <module name="GCR" id="101" version="1.0" caption="The Logical Device Configuration registers support motherboard designs in\n
       which the resources required by their components are known and assigned by the BIOS\n
       at POST.">
      <register-group name="GCR" caption="The Logical Device Configuration registers support motherboard designs in\n
       which the resources required by their components are known and assigned by the BIOS\n
       at POST.">
        <register name="LDN" offset="0x7" rw="RW" size="1" access-size="1" initval="0x00" caption="A write to this register selects the current logical device. This allows access to the control and configuration\n
    registers for each logical device. Note: The Activate command operates only on the selected logical device.">
        </register>
        <register name="DEV_REV" offset="0x1C" rw="R" size="1" access-size="1" initval="0x00" caption="A read-only register which provides device revision information.">
        </register>
        <register name="DEV_SUBID" offset="0x1D" rw="R" size="1" access-size="1" initval="0xA2" caption="A read-only register which provides device sub ID information.">
        </register>
        <register name="DEV_ID" offset="0x1E" rw="R" size="2" access-size="2" initval="0x0023" caption="A read-only register which provides device identification.">
        </register>
        <register name="LEG_DEV_ID" offset="0x20" rw="R" size="1" access-size="1" initval="0xFE" caption="A read-only register which provides legacy device identification.">
        </register>
        <register name="LEG_DEV_REV" offset="0x21" rw="R" size="1" access-size="1" initval="0xA0" caption="A read-only register which provides legacy device revision information.">
        </register>
      </register-group>
    </module>
    <module name="UART" id="39" version="1.0" caption="The 16550 UART is a full-function Two Pin Serial Port that supports the standard RS-232 Interface.">
      <register-group name="UART" caption="The 16550 UART is a full-function Two Pin Serial Port that supports the standard RS-232 Interface.">
        <mode name="DATA" qualifier="UART.LINE_CR.DLAB" mask="0x80" value="0x00" caption="UART when DLAB=0"/>
        <mode name="DLAB" qualifier="UART.LINE_CR.DLAB" mask="0x80" value="0x80" caption="UART when DLAB=1"/>
        <register modes="DATA" name="RX_DAT" offset="0x0" rw="R" size="1" access-size="1" initval="0x00" caption="UART Receive (Read) Buffer Register (DLAB=0)">
        </register>
        <register modes="DATA" name="TX_DAT" offset="0x0" rw="W" size="1" access-size="1" initval="0x00" caption="UART Transmit (Write) Buffer Register (DLAB=0)">
        </register>
        <register modes="DLAB" name="BAUDRT_LSB" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Programmable BAUD Rate Generator (LSB) Register (DLAB=1)">
        </register>
        <register modes="DLAB" name="BAUDRT_MSB" offset="0x1" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Programmable BAUD Rate Generator (MSB) Register (DLAB=1). [6:0] BAUD_RATE_DIVISOR_MSB, [7:7] BAUD_CLK_SEL \n
           1=If CLK_SRC is '0', the baud clock is derived from the 1.8432MHz_Clk. If CLK_SRC is '1', this bit has no effect\n
           0=If CLK_SRC is '0', the baud clock is derived from the 24MHz_Clk. If CLK_SRC is '1', this bit has no effect">
        </register>
        <register modes="DATA" name="IEN" offset="0x1" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Interrupt Enable Register (DLAB=0)">
          <bitfield name="ERDAI" caption="ERDAI This bit enables the Received Data Available Interrupt (and timeout interrupts in the FIFO mode) when set to logic '1'." mask="0x1"/>
          <bitfield name="ETHREI" caption="ETHREI This bit enables the Transmitter Holding Register Empty Interrupt when set to logic '1'." mask="0x2"/>
          <bitfield name="ELSI" caption="ELSI This bit enables the Received Line Status Interrupt when set to logic '1'." mask="0x4"/>
          <bitfield name="EMSI" caption="EMSI  This bit enables the MODEM Status Interrupt when set to logic '1'." mask="0x8"/>
        </register>
        <register modes="DLAB DATA" name="FIFO_CR" offset="0x2" rw="W" size="1" access-size="1" initval="0x00" caption="UART FIFO Control Register">
          <bitfield name="EXRF" caption="EXRF Enable XMIT and RECV FIFO." mask="0x1"/>
          <bitfield name="CLR_RECV_FIFO" caption="CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'." mask="0x2"/>
          <bitfield name="CLR_XMIT_FIFO" caption="CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing." mask="0x4"/>
          <bitfield name="DMA_MODE_SEL" caption="DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip." mask="0x8"/>
          <bitfield name="RECV_FIFO_TRIG_LVL" caption="RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt." mask="0xC0"/>
        </register>
        <register modes="DLAB DATA" name="INT_ID" offset="0x2" rw="R" size="1" access-size="1" initval="0x00" caption="UART Interrupt Identification Register">
          <bitfield name="IPEND" caption="IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending." mask="0x1"/>
          <bitfield name="INTID" caption="INTID  These bits identify the highest priority interrupt pending" mask="0xE"/>
          <bitfield name="FIFO_EN" caption="These two bits are set when the FIFO CONTROL Register bit 0 equals 1." mask="0xC0"/>
        </register>
        <register modes="DLAB DATA" name="LCR" offset="0x3" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Line Control Register">
          <bitfield name="WORD_LEN" caption="WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character." mask="0x3"/>
          <bitfield name="STOP_BITS" caption="STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character." mask="0x4"/>
          <bitfield name="EN_PAR" caption="ENABLE_PARITY  Parity Enable bit." mask="0x8"/>
          <bitfield name="PAR_SEL" caption="PARITY_SELECT Even Parity Select bit." mask="0x10"/>
          <bitfield name="STICK_PAR" caption="STICK_PARITY  Stick Parity bit." mask="0x20"/>
          <bitfield name="BRK_CTRL" caption="BREAK_CONTROL Set Break Control bit" mask="0x40"/>
          <bitfield name="DLAB" caption="DLAB Divisor Latch Access Bit (DLAB)." mask="0x80"/>
        </register>
        <register modes="DLAB DATA" name="MCR" offset="0x4" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Modem Control Register">
          <bitfield name="DTR" caption="DTR  This bit controls the Data Terminal Ready (nDTR) output." mask="0x1"/>
          <bitfield name="RTS" caption="RTS  This bit controls the Request To Send (nRTS) output." mask="0x2"/>
          <bitfield name="OUT1" caption="OUT1 This bit controls the Output 1 (OUT1) bit." mask="0x4"/>
          <bitfield name="OUT2" caption="OUT2  This bit is used to enable an UART interrupt." mask="0x8"/>
          <bitfield name="LOOPBACK" caption="LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port." mask="0x10"/>
        </register>
        <register modes="DLAB DATA" name="LSR" offset="0x5" rw="R" size="1" access-size="1" initval="0x00" caption="UART Line Status Register">
          <bitfield name="DATA_READY" caption="DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO" mask="0x1"/>
          <bitfield name="OVERRUN" caption="OVERRUN  Overrun Error." mask="0x2"/>
          <bitfield name="PE" caption="PARITY ERROR  Parity Error." mask="0x4"/>
          <bitfield name="FRAME_ERR" caption="FRAME_ERROR Framing Error." mask="0x8"/>
          <bitfield name="BRK_INTR" caption="BREAK_INTERRUPT   Break Interrupt." mask="0x10"/>
          <bitfield name="TRANS_EMPTY" caption="TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission." mask="0x20"/>
          <bitfield name="TRANS_ERR" caption="Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty." mask="0x40"/>
          <bitfield name="FIFO_ERR" caption="FIFO_ERROR" mask="0x80"/>
        </register>
        <register modes="DLAB DATA" name="MSR" offset="0x6" rw="R" size="1" access-size="1" initval="0x00" caption="UART Modem Status Register">
          <bitfield name="CTS" caption="CTS  Delta Clear To Send (DCTS)." mask="0x1"/>
          <bitfield name="DSR" caption="DSR  Delta Data Set Ready (DDSR)." mask="0x2"/>
          <bitfield name="RI" caption="RI  Trailing Edge of Ring Indicator (TERI)." mask="0x4"/>
          <bitfield name="DCD" caption="DCD  Delta Data Carrier Detect (DDCD)." mask="0x8"/>
          <bitfield name="nCTS" caption="nCTS  This bit is the complement of the Clear To Send (nCTS) input." mask="0x10"/>
          <bitfield name="nDSR" caption="This bit is the complement of the Data Set Ready (nDSR) input." mask="0x20"/>
          <bitfield name="nRI" caption="nRI This bit is the complement of the Ring Indicator (nRI) input." mask="0x40"/>
          <bitfield name="nDCD" caption="nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input." mask="0x80"/>
        </register>
        <register modes="DLAB DATA" name="SCR" offset="0x7" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Scratchpad Register    This 8 bit read/write register has no effect on the operation of the Serial Port. It is intended as a scratchpad register to be used by the programmer to hold data temporarily.">
        </register>
        <register modes="DLAB DATA" name="ACTIVATE" offset="0x330" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Activate Register. [0:0] ACTIVATE When this bit is 1, the UART logical device is powered and functional. When this bit is 0, the UART logical device is powered down and inactive.">
        </register>
        <register modes="DLAB DATA" name="CFG_SEL" offset="0x3F0" rw="RW" size="1" access-size="1" initval="0x00" caption="UART Config Select Register">
          <bitfield name="CLK_SRC" caption="CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources" mask="0x1"/>
          <bitfield name="PWR" caption="POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET" mask="0x2"/>
          <bitfield name="POLAR" caption="POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted" mask="0x4"/>
        </register>
      </register-group>
    </module>
    <module name="GPIO" id="26" version="1.0" caption="GPIO Pin Control Registers">
      <register-group name="GPIO" caption="GPIO Pin Control Registers">
        <register name="CTRL0" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL1" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL2" offset="0x40" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL3" offset="0x60" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL4" offset="0x80" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL5" offset="0xa0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL6" offset="0xc0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL7" offset="0xe0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL10" offset="0x100" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL11" offset="0x120" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL12" offset="0x140" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL13" offset="0x160" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL14" offset="0x180" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL15" offset="0x1a0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL16" offset="0x1c0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL17" offset="0x1e0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL20" offset="0x200" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL21" offset="0x220" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL22" offset="0x240" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL23" offset="0x260" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL24" offset="0x280" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL25" offset="0x2a0" rw="RW" size="4" access-size="4" initval="0x00008040" count="8" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="CTRL26" offset="0x2c0" rw="RW" size="4" access-size="4" initval="0x00008040" count="1" caption="GPIO Pin Control Register">
          <bitfield name="PU_PD" caption="These bits are used to enable an internal pull-up or pull-down resistor." mask="0x3"/>
          <bitfield name="PWR_GATING" caption="The GPIO pin will be tristated when the selected power well is off." mask="0xC"/>
          <bitfield name="INTR_DET" caption="Determines the interrupt capability of the GPIO input." mask="0x70"/>
          <bitfield name="EDGE_EN" caption="Determines the interrupt capability of the GPIO input." mask="0x80"/>
          <bitfield name="OUT_BUFF_TYPE" caption="0 = Push-Pull, 1 = Open Drain" mask="0x100"/>
          <bitfield name="GPIO_DIR" caption="Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output" mask="0x200"/>
          <bitfield name="GPIO_OUT_SEL" caption="GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register." mask="0x400"/>
          <bitfield name="POL" caption="1=Inverted; 0=Non-inverted" mask="0x800"/>
          <bitfield name="MUX_CTRL" caption="00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3." mask="0x7000"/>
          <bitfield name="INP_DIS" caption="GPIO input disable" mask="0x8000"/>
          <bitfield name="ALT_GPIO_DATA" caption="GPIO Alternate Data Register." mask="0x10000"/>
          <bitfield name="GPIO_INP" caption="GPIO input from pin, independent of the Mux selection for the pin or the Direction." mask="0x1000000"/>
        </register>
        <register name="PARIN" offset="0x300" rw="RW" size="4" access-size="4" count="6" initval="0x00000000" caption="The GPIO Input Registers.">
        </register>
        <register name="PAROUT" offset="0x380" rw="RW" size="4" access-size="4" count="6" initval="0x00000000" caption="The GPIO Output Registers.">
        </register>
        <register name="CTRL2P0" offset="0x500" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P1" offset="0x520" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P2" offset="0x540" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P3" offset="0x560" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P4" offset="0x580" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P5" offset="0x5a0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P6" offset="0x5c0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P7" offset="0x5e0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P10" offset="0x600" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P11" offset="0x620" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P12" offset="0x640" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P13" offset="0x660" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P14" offset="0x680" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P15" offset="0x6a0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P16" offset="0x6c0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P17" offset="0x6e0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P20" offset="0x700" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P21" offset="0x720" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P22" offset="0x740" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P23" offset="0x760" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P24" offset="0x780" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P25" offset="0x7a0" rw="RW" size="4" access-size="4" initval="0x00000000" count="8" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
        <register name="CTRL2P26" offset="0x7c0" rw="RW" size="4" access-size="4" initval="0x00000000" count="1" caption="The GPIO PIN_CTRL2 Registers">
          <bitfield name="SLEW_CTRL" caption="Selects slew rate on the pin. 1=fast 0=slow" mask="0x1"/>
          <bitfield name="DRIV_STREN" caption="Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA" mask="0x30"/>
        </register>
      </register-group>
    </module>
    <module name="WDT" id="88" version="1.0" caption="The function of the Watchdog Timer is to provide a mechanism to detect if the internal embedded controller has failed.">
      <register-group name="WDT" caption="The function of the Watchdog Timer is to provide a mechanism to detect if the internal embedded controller has failed.">
        <register name="LOAD" offset="0x0" rw="RW" size="2" access-size="2" initval="0xFFFF" caption="Writing this field reloads the Watch Dog Timer counter.">
        </register>
        <register name="CTRL" offset="0x4" rw="RW" size="2" access-size="2" initval="0x0000" caption="WDT Control Register">
          <bitfield name="WDT_EN" caption="WDT Block enabled" mask="0x1"/>
          <bitfield name="WDT_STS" caption="WDT_STATUS is set by hardware if the last reset of the device was caused by an underflow of the WDT. This bit must\n
			  be cleared by the EC firmware writing a '1' to this bit. Writing a '0' to this bit has no effect." mask="0x2"/>
          <bitfield name="HIB_TMR0_STL" caption="This bit enables the WDT Stall function if the Hibernation Timer 0 is active.\n
			  1=The WDT is stalled while the Hibernation Timer 0 is active\n
			  0=The WDT is not affected by Hibernation Timer 0." mask="0x4"/>
          <bitfield name="WK_TMR_STL" caption="This bit enables the WDT Stall function if the Week Timer is active.\n
			  1=The WDT is stalled while the Week Timer is active\n
			  0=The WDT is not affected by the Week Timer." mask="0x8"/>
          <bitfield name="JTAG_STL" caption="This bit enables the WDT Stall function if JTAG or SWD debug functions are active\n
			  1=The WDT is stalled while either JTAG or SWD is active\n
			  0=The WDT is not affected by the JTAG debug interface." mask="0x10"/>
          <bitfield name="WDT_RST" caption="If the WDT_RESET bit is set and the watch dog timer expires, the Watch dog module will
		      generate interrupt and clear the WDT_RESET to 0b." mask="0x200"/>
        </register>
        <register name="KICK" offset="0x8" rw="W" size="1" access-size="1" initval="0x00" caption="The WDT Kick Register is a strobe. Reads of this register return 0. Writes to this register cause the WDT to reload\n
    the WDT Load Register value and start decrementing when the WDT_ENABLE bit in the WDT Control Register is set to '1'. When the WDT_ENABLE\n
    bit in the WDT Control Register is cleared to '0', writes to the WDT Kick Register have no effect.">
        </register>
        <register name="CNT" offset="0xC" rw="R" size="2" access-size="2" initval="0xFFFF" caption="This read-only register provides the current WDT count.">
        </register>
        <register name="STS" offset="0x10" rw="RW" size="1" access-size="1" initval="0x00" caption="This register provides the current WDT count.">
          <bitfield name="WDT_EV_IRQ" caption="WDT_EVENT_IRQ : This bit indicates the status of interrupt from Watch dog module." mask="0x1"/>
        </register>
        <register name="IEN" offset="0x14" rw="RW" size="1" access-size="1" initval="0x00" caption="Watch Dog Interrupt Enable Register.\n">
          <bitfield name="WDT_INTEN" caption="WDT_Int_Enable: This is the interrupt enables bit for WDT_INT interrupt.\n
                  1= WDT_INT Interrupt Enable
                  0= WDT_INT Interrupt Disabled" mask="0x1"/>
        </register>
      </register-group>
    </module>
    <module name="TIMER16" id="108a" version="1.0" caption="This 16-bit timer block offers a simple mechanism for firmware to maintain a time base">
      <register-group name="TIMER16" caption="This 16-bit timer block offers a simple mechanism for firmware to maintain a time base">
        <register name="CNT" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the value of the Timer counter. This is updated by Hardware but may be set by Firmware.">
        </register>
        <register name="PRLD" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the value of the Timer pre-load for the counter. This is used by H/W when the counter is to be restarted\n
   automatically; this will become the new value of the counter upon restart.">
        </register>
        <register name="STS" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the interrupt status that fires when the timer reaches its limit">
          <bitfield name="EVT_INT" caption="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n
			    the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n
			    Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)" mask="0x1"/>
        </register>
        <register name="IEN" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register">
          <bitfield name="EN" caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register." mask="0x1"/>
        </register>
        <register name="CTRL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Timer Control Register">
          <bitfield name="EN" caption="This enables the block for operation. 1=This block will function normally;\n
				0=This block will gate its clock and go into its lowest power state" mask="0x1"/>
          <bitfield name="CNT_UP" caption="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n
				when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n
				0=The counter will decrement" mask="0x4"/>
          <bitfield name="AU_RESTRT" caption="This will select the action taken upon completing a count.\n
				1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n
				The interrupt will be set in edge mode\n
				0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode." mask="0x8"/>
          <bitfield name="SFT_RST" caption="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n
				to wait before reconfiguring the Basic Timer following soft reset." mask="0x10"/>
          <bitfield name="STRT" caption="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n
				clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n
				this bit will never clear. Clearing this bit will halt the timer counter." mask="0x20"/>
          <bitfield name="RLD" caption="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n
				completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n
				event occurs. Usage while the timer is off may result in erroneous behaviour." mask="0x40"/>
          <bitfield name="HLT" caption="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n
				start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally." mask="0x80"/>
          <bitfield name="PRESCALE" caption="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n
				slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n
				The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n
				runs at half speed." mask="0xFFFF0000"/>
        </register>
      </register-group>
    </module>
    <module name="TIMER32" id="108b" version="1.0" caption="This 32-bit timer block offers a simple mechanism for firmware to maintain a time base">
      <register-group name="TIMER32" caption="This 32-bit timer block offers a simple mechanism for firmware to maintain a time base">
        <register name="CNT" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the value of the Timer counter. This is updated by Hardware but may be set by Firmware.">
        </register>
        <register name="PRLD" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the value of the Timer pre-load for the counter. This is used by H/W when the counter is to be restarted\n
   automatically; this will become the new value of the counter upon restart.">
        </register>
        <register name="STS" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the interrupt status that fires when the timer reaches its limit">
          <bitfield name="EVT_INT" caption="This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n
			    the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n
			    Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)" mask="0x1"/>
        </register>
        <register name="IEN" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register">
          <bitfield name="EN" caption="This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register." mask="0x1"/>
        </register>
        <register name="CTRL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Timer Control Register">
          <bitfield name="EN" caption="This enables the block for operation. 1=This block will function normally;\n
				0=This block will gate its clock and go into its lowest power state" mask="0x1"/>
          <bitfield name="CNT_UP" caption="This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n
				when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n
				0=The counter will decrement" mask="0x4"/>
          <bitfield name="AU_RESTRT" caption="This will select the action taken upon completing a count.\n
				1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n
				The interrupt will be set in edge mode\n
				0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode." mask="0x8"/>
          <bitfield name="SFT_RST" caption="This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n
				to wait before reconfiguring the Basic Timer following soft reset." mask="0x10"/>
          <bitfield name="STRT" caption="This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n
				clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n
				this bit will never clear. Clearing this bit will halt the timer counter." mask="0x20"/>
          <bitfield name="RLD" caption="This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n
				completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n
				event occurs. Usage while the timer is off may result in erroneous behaviour." mask="0x40"/>
          <bitfield name="HLT" caption="This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n
				start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally." mask="0x80"/>
          <bitfield name="PRESCALE" caption="This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n
				slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n
				The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n
				runs at half speed." mask="0xFFFF0000"/>
        </register>
      </register-group>
    </module>
    <module name="CCT" id="12" version="1.0" caption="This is a 16-bit auto-reloading timer/counter.">
      <register-group name="CCT" caption="This is a 16-bit auto-reloading timer/counter.">
        <register name="CTRL" offset="0x0" rw="RW" size="4" access-size="4" initval="0x03030000" caption="This register controls the capture and compare timer.">
          <bitfield name="ACT" caption="This bit is used to start the capture and compare timer running and power it down." mask="0x1"/>
          <bitfield name="FREE_EN" caption="Free-Running Timer Enable. This bit is used to start and stop the free running timer." mask="0x2"/>
          <bitfield name="FREE_RST" caption="Free Running Timer Reset. This bit stops the timer and resets the internal counter to 0000_0000h." mask="0x4"/>
          <bitfield name="TCLK" caption="This 3-bit field sets the clock source for the Free-Running Counter." mask="0x70"/>
          <bitfield name="CMP_EN0" caption="Compare Enable for Compare 0 Register." mask="0x100"/>
          <bitfield name="CMP_EN1" caption="Compare Enable for Compare 1 Register." mask="0x200"/>
          <bitfield name="CMP_SET1" caption="When read, returns the current value off the Compare Timer Output 1 state." mask="0x10000"/>
          <bitfield name="CMP_SET0" caption="When read, returns the current value off the Compare Timer Output 0 state." mask="0x20000"/>
          <bitfield name="CMP_CLR1" caption="When read, returns the current value off the Compare Timer Output 1 state." mask="0x1000000"/>
          <bitfield name="CMP_CLR0" caption="When read, returns the current value off the Compare Timer Output 0 state." mask="0x2000000"/>
        </register>
        <register name="CAP0_CTRL" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register is used to configure capture and compare timers 0-3.">
          <bitfield name="CAP_EDGE0" caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 0." mask="0x3"/>
          <bitfield name="FILTER_BYP0" caption="This bit enables bypassing the input noise filter for Capture Register 0, so that the input signal goes directly into the timer." mask="0x4"/>
          <bitfield name="FCLK_SEL0" caption="This 3-bit field sets the clock source for the input filter for Capture Register 0." mask="0xE0"/>
          <bitfield name="CAP_EDGE1" caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 1." mask="0x300"/>
          <bitfield name="FILTER_BYP1" caption="This bit enables bypassing the input noise filter for Capture Register 1, so that the input signal goes directly into the timer." mask="0x400"/>
          <bitfield name="FCLK_SEL1" caption="This 3-bit field sets the clock source for the input filter for Capture Register 1." mask="0xE000"/>
          <bitfield name="CAP_EDGE2" caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 2." mask="0x30000"/>
          <bitfield name="FILTER_BYP2" caption="This bit enables bypassing the input noise filter for Capture Register 2, so that the input signal goes directly into the timer." mask="0x40000"/>
          <bitfield name="FCLK_SEL2" caption="This 3-bit field sets the clock source for the input filter for Capture Register 2." mask="0xE00000"/>
          <bitfield name="CAP_EDGE3" caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 3." mask="0x3000000"/>
          <bitfield name="FILTER_BYP3" caption="This bit enables bypassing the input noise filter for Capture Register 3, so that the input signal goes directly into the timer." mask="0x4000000"/>
          <bitfield name="FCLK_SEL3" caption="This 3-bit field sets the clock source for the input filter for Capture Register 3." mask="0xE0000000"/>
        </register>
        <register name="CAP1_CTRL" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register is used to configure capture and compare timers 4-5.">
          <bitfield name="CAP_EDGE4" caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 4." mask="0x3"/>
          <bitfield name="FILTER_BYP4" caption="This bit enables bypassing the input noise filter for Capture Register 4, so that the input signal goes directly into the timer." mask="0x4"/>
          <bitfield name="FCLK_SEL4" caption="This 3-bit field sets the clock source for the input filter for Capture Register 4." mask="0xE0"/>
          <bitfield name="CAP_EDGE5" caption="This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 5." mask="0x300"/>
          <bitfield name="FILTER_BYP5" caption="This bit enables bypassing the input noise filter for Capture Register 5, so that the input signal goes directly into the timer." mask="0x400"/>
          <bitfield name="FCLK_SEL5" caption="This 3-bit field sets the clock source for the input filter for Capture Register 5." mask="0xE000"/>
        </register>
        <register name="FREE_RUN" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register contains the current value of the Free Running Timer.">
          <bitfield name="TMR" caption="This register contains the current value of the Free Running Timer." mask="0xFFFFFFFF"/>
        </register>
        <register name="CAP0" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0.">
          <bitfield name="CAP_0" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0." mask="0xFFFFFFFF"/>
        </register>
        <register name="CAP1" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT1.">
          <bitfield name="CAP_1" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT1." mask="0xFFFFFFFF"/>
        </register>
        <register name="CAP2" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0.">
          <bitfield name="CAP_2" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT2." mask="0xFFFFFFFF"/>
        </register>
        <register name="CAP3" offset="0x1C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT0.">
          <bitfield name="CAP_3" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT3." mask="0xFFFFFFFF"/>
        </register>
        <register name="CAP4" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT4.">
          <bitfield name="CAP_4" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT4." mask="0xFFFFFFFF"/>
        </register>
        <register name="CAP5" offset="0x24" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT5.">
          <bitfield name="CAP_5" caption="This register saves the value copied from the Free Running timer on a programmed edge of ICT5." mask="0xFFFFFFFF"/>
        </register>
        <register name="COMP0" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer.">
          <bitfield name="COMP_0" caption="A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer." mask="0xFFFFFFFF"/>
        </register>
        <register name="COMP1" offset="0x2C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer.">
          <bitfield name="COMP_1" caption="A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer." mask="0xFFFFFFFF"/>
        </register>
        <register name="MUX_SEL" offset="0x30" rw="RW" size="4" access-size="4" initval="0x00543210" caption="This register selects the pin mapping to the capture register.">
          <bitfield name="CAP0" caption="Mux Select for Capture 0 register." mask="0xF"/>
          <bitfield name="CAP1" caption="Mux Select for Capture 1 register." mask="0xF0"/>
          <bitfield name="CAP2" caption="Mux Select for Capture 2 register." mask="0xF00"/>
          <bitfield name="CAP3" caption="Mux Select for Capture 3 register." mask="0xF000"/>
          <bitfield name="CAP4" caption="Mux Select for Capture 4 register." mask="0xF0000"/>
          <bitfield name="CAP5" caption="Mux Select for Capture 5 register." mask="0xF00000"/>
        </register>
      </register-group>
    </module>
    <module name="HTM" id="29" version="1.0" caption="The Hibernation Timer can generate a wake event to the Embedded Controller (EC) when it is in a hibernation mode">
      <register-group name="HTM" caption="The Hibernation Timer can generate a wake event to the Embedded Controller (EC) when it is in a hibernation mode">
        <register name="PRLD" offset="0x0" rw="RW" size="2" access-size="2" initval="0x0000" caption="[15:0] This register is used to set the Hibernation Timer Preload value.">
        </register>
        <register name="CTRL" offset="0x4" rw="RW" size="2" access-size="2" initval="0x0000" caption="HTimer Control Register">
          <bitfield name="CTRL" caption="1= The Hibernation Timer has a resolution of 0.125s per LSB, which yields a maximum time in excess of 2 hours.\n
				0= The Hibernation Timer has a resolution of 30.5us per LSB, which yields a maximum time of ~2seconds." mask="0x1"/>
        </register>
        <register name="CNT" offset="0x8" rw="R" size="2" access-size="2" initval="0x0000" caption="The current state of the Hibernation Timer.">
        </register>
      </register-group>
    </module>
    <module name="RTOS" id="140" version="1.0" caption="RTOS is a 32-bit timer designed to operate on the 32kHz oscillator which is available during all chip sleep states.">
      <register-group name="RTOS" caption="RTOS is a 32-bit timer designed to operate on the 32kHz oscillator which is available during all chip sleep states.">
        <register name="CNT" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="RTOS Timer Count Register.">
          <bitfield name="CNTR" caption="This register contains the current value of the RTOS Timer counter. This register should be read as a DWORD. There is no latching mechanism \n
			    of the upper bytes implemented if the register is accessed as a byte or word. Reading the register with byte or word operations may give incorrect results." mask="0xFFFFFFFF"/>
        </register>
        <register name="PRLD" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="RTOS Timer Preload Register">
          <bitfield name="PRELOAD" caption="The this register is loaded into the RTOS Timer counter either when the TIMER_START bit is written with a 1, or when the timer counter counts down to 0 and the AUTO_RELOAD bit is 1.\n 
				This register must be programmed with a new count value before the TIMER_START bit is set to 1. If this register is updated while the counter is operating, the new count value will only take effect if\n 
				the counter transitions form 1 to 0 while the AUTO_RELOAD bit is set." mask="0xFFFFFFFF"/>
        </register>
        <register name="CTRL" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="RTOS Timer Control Register">
          <bitfield name="BLK_EN" caption="1=RTOS timer counter is enabled\n
				0=RTOS timer disabled. All register bits are reset to their default state" mask="0x1"/>
          <bitfield name="AU_RELOAD" caption="1=The the RTOS Timer Preload Register is loaded into the timer counter and the counter is restarted when the counter transitions from 1 to 0\n
				0=The timer counter halts when it transitions from 1 to 0 and will not restart." mask="0x2"/>
          <bitfield name="TMR_STRT" caption="Writing a 1 to this bit will load the timer counter with the RTOS Timer Preload Register and start counting. If the Preload Register is 0, counting will not start and this bit will be cleared to 0.\n
				Writing a 0 to this bit will halt the counter and clear its contents to 0. The RTOS timer interrupt will not be generated. This bit is automatically cleared if the AUTO_RELOAD bit is 0 and the\n
				timer counter transitions from 1 to 0." mask="0x4"/>
          <bitfield name="EXT_HW_HALT_EN" caption="1=The timer counter is halted when the external HALT signal is asserted. Counting is always enabled if HALT is de-asserted.\n
				0=The HALT signal does not affect the RTOS Timer" mask="0x8"/>
          <bitfield name="FW_TMR_HALT" caption="1=The timer counter is halted. If the counter was running, clearing this bit will restart the counter from the value at which it halted\n
				0=The timer counter, if enabled, will continue to run" mask="0x10"/>
        </register>
        <register name="SOFTIRQ" offset="0xC" rw="W" size="4" access-size="4" initval="0x00000000" caption="Soft Interrupt Register">
          <bitfield name="SWI0" caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n
				Writes of a '0' have no effect. Reads return '0'." mask="0x1"/>
          <bitfield name="SWI1" caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n
				Writes of a '0' have no effect. Reads return '0'." mask="0x2"/>
          <bitfield name="SWI2" caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n
				Writes of a '0' have no effect. Reads return '0'." mask="0x4"/>
          <bitfield name="SWI3" caption="Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n
				Writes of a '0' have no effect. Reads return '0'." mask="0x8"/>
        </register>
      </register-group>
    </module>
    <module name="RTC" id="126" version="1.0" caption="This is the set of registers that are automatically counted by hardware every 1 second while the block is enabled">
      <register-group name="RTC" caption="This is the set of registers that are automatically counted by hardware every 1 second while the block is enabled">
        <register name="SEC" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="Seconds Register">
        </register>
        <register name="SEC_ALARM" offset="0x1" rw="RW" size="1" access-size="1" initval="0x00" caption="Seconds Alarm Register">
        </register>
        <register name="MIN" offset="0x2" rw="RW" size="1" access-size="1" initval="0x00" caption="Minutes Register">
        </register>
        <register name="MIN_ALARM" offset="0x3" rw="RW" size="1" access-size="1" initval="0x00" caption="Minutes Alarm Register">
        </register>
        <register name="HR" offset="0x4" rw="RW" size="1" access-size="1" initval="0x00" caption="Hours Register">
        </register>
        <register name="HR_ALARM" offset="0x5" rw="RW" size="1" access-size="1" initval="0x00" caption="Hours Alarm Register">
        </register>
        <register name="DAY_OF_WK" offset="0x6" rw="RW" size="1" access-size="1" initval="0x00" caption="Day of Week Register">
        </register>
        <register name="DAY_OF_MON" offset="0x7" rw="RW" size="1" access-size="1" initval="0x00" caption="Day of Month Register">
        </register>
        <register name="MONTH" offset="0x8" rw="RW" size="1" access-size="1" initval="0x00" caption="Month Register">
        </register>
        <register name="YEAR" offset="0x9" rw="RW" size="1" access-size="1" initval="0x00" caption="Year Register">
        </register>
        <register name="REGA" offset="0xA" rw="RW" size="1" access-size="1" initval="0x00" caption="Register A">
        </register>
        <register name="REGB" offset="0xB" rw="RW" size="1" access-size="1" initval="0x00" caption="Register B">
        </register>
        <register name="REGC" offset="0xC" rw="RW" size="1" access-size="1" initval="0x00" caption="Register C">
        </register>
        <register name="REGD" offset="0xD" rw="RW" size="1" access-size="1" initval="0x00" caption="Register D">
        </register>
        <register name="CTRL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="RTC Control Register">
          <bitfield name="BLK_EN" caption="BLOCK_ENABLE This bit must be '1' in order for the block to function internally. Registers may be initialized first, before\n
			  setting this bit to '1' to start operation." mask="0x1"/>
          <bitfield name="SOFT_RST" caption="SOFT_RESET A '1' written to this bit position will trigger the RTC_RST reset, resetting the block and all registers except\n
			  this one and the Test Register. This bit is self-clearing at the end of the reset, one cycle of Host Bus Clock later, and so requires\n
			  no waiting." mask="0x2"/>
          <bitfield name="TEST" caption="TEST" mask="0x4"/>
          <bitfield name="ALM_EN" caption="ALARM_ENABLE  1=Enables the Alarm features, 0=Disables the Alarm features" mask="0x8"/>
        </register>
        <register name="WK_ALARM" offset="0x14" rw="RW" size="4" access-size="4" initval="0x000000FF" caption="Week Alarm Register[7:0] - ALARM_DAY_OF_WEEK This register, if written to a value in the range 1- -7, will inhibit the Alarm\n
    interrupt unless this field matches the contents of the Day of Week Register also.">
        </register>
        <register name="DAYLT_SAVF" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Daylight Savings Forward Register">
          <bitfield name="DST_MON" caption="This field matches the Month Register." mask="0xFF"/>
          <bitfield name="DST_DAY_OF_WK" caption="This field matches the Day of Week Register bits[2:0]." mask="0x700"/>
          <bitfield name="DST_WK" caption="5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month" mask="0x70000"/>
          <bitfield name="DST_HR" caption="This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n
			  to the 24/12 Hour mode and DM mode settings at the time of writing." mask="0x7F000000"/>
          <bitfield name="DST_AM_PM" caption="This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n
			  of writing." mask="0x80000000"/>
        </register>
        <register name="DAYLT_SAVB" offset="0x1C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Daylight Savings Backward Register">
          <bitfield name="DST_MON" caption="This field matches the Month Register." mask="0xFF"/>
          <bitfield name="DST_DAY_OF_WK" caption="This field matches the Day of Week Register bits[2:0]." mask="0x700"/>
          <bitfield name="DST_WK" caption="5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month" mask="0x70000"/>
          <bitfield name="DST_HR" caption="This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n
			  to the 24/12 Hour mode and DM mode settings at the time of writing." mask="0x7F000000"/>
          <bitfield name="DST_AM_PM" caption="This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n
			  of writing." mask="0x80000000"/>
        </register>
      </register-group>
    </module>
    <module name="WEEK" id="76" version="1.0" caption="The Week Timer and the Sub-Week Timer assert the Power-Up Event Output which automatically powers-up the system from the G3 state">
      <register-group name="WEEK" caption="The Week Timer and the Sub-Week Timer assert the Power-Up Event Output which automatically powers-up the system from the G3 state">
        <register name="CTRL" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000001" caption="Control Register">
          <bitfield name="WT_EN" caption="The WT_ENABLE bit is used to start and stop the Week Alarm Counter Register and the Clock Divider Register.\n
				The value in the Counter Register is held when the WT_ENABLE bit is not asserted (0) and the count is resumed from the last value when the bit is asserted (1).\n
				The 15-Bit Clock Divider is reset to 00h and the Week Alarm Interface is in its lowest power consumption state when the WT_ENABLE bit is not asserted." mask="0x1"/>
          <bitfield name="PWRUP_EN" caption="This bit controls the state of the Power-Up Event Output and enables Week POWER-UP Event decoding in the VBAT-Powered Control Interface.\n
				1=Power-Up Event Output Enabled\n
				0=Power-Up Event Output Disabled and Reset" mask="0x40"/>
        </register>
        <register name="ALARM_CNT" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Week Alarm Counter Register">
          <bitfield name="WK_CNTR" caption="While the WT_ENABLE bit is 1, this register is incremented at a 1 Hz rate. Writes of this register may require one second\n
				to take effect. Reads return the current state of the register. Reads and writes complete independently of the state of WT_ENABLE." mask="0xFFFFFFF"/>
        </register>
        <register name="TMR_COMP" offset="0x8" rw="RW" size="4" access-size="4" initval="0x0FFFFFFF" caption="Week Timer Compare Register">
          <bitfield name="WK_COMP" caption="A Week Alarm Interrupt and a Week Alarm Power-Up Event are asserted when the Week Alarm Counter Register is greater than\n
				or equal to the contents of this register. Reads and writes complete independently of the state of WT_ENABLE." mask="0xFFFFFFF"/>
        </register>
        <register name="CLKDIV" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Clock Divider Register">
          <bitfield name="DIV" caption="Reads of this register return the current state of the Week Timer 15- bit clock divider." mask="0x7FFF"/>
        </register>
        <register name="SS_INTR_SEL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Sub-Second Programmable Interrupt Select Register">
          <bitfield name="SPISR" caption="This field determines the rate at which Sub-Second interrupt events are generated." mask="0xF"/>
        </register>
        <register name="SWK_CTRL" offset="0x14" rw="R" size="4" access-size="4" initval="0x00000000" caption="Sub-Week Control Register">
          <bitfield name="SWKTMR_PWRUP_EVT_STS" caption="This bit is set to 1 when the Sub-Week Alarm Counter Register decrements from 1 to 0 and the POWERUP_EN is 1.\n
				Writes of 1 clear this bit. Writes of 0 have no effect. Note: This bit MUST be cleared to remove a Sub-Week Timer Power-Up Event." mask="0x1"/>
          <bitfield name="WKTMR_PWRUP_EVT_STS" caption="This bit is set to 1 when the Week Alarm Counter Register is greater than or equal the contents of the Week Timer Compare\n
				Register and the POWERUP_EN is 1. Writes of 1 clear this bit. Writes of 0 have no effect.\n
				Note: This bit does not have to be cleared to remove a Week Timer Power-Up Event." mask="0x2"/>
          <bitfield name="TEST" caption="Test" mask="0x10"/>
          <bitfield name="TEST0" caption="Test" mask="0x20"/>
          <bitfield name="AU_RLD" caption="1= No reload occurs when the Sub-Week Counter expires\n
				0= Reloads the SUBWEEK_COUNTER_LOAD field into the Sub- Week Counter when the counter expires." mask="0x40"/>
          <bitfield name="SWK_TICK" caption="This field selects the clock source for the Sub-Week Counter." mask="0x380"/>
        </register>
        <register name="SWK_ALARM" offset="0x18" rw="R" size="4" access-size="4" initval="0x00000000" caption="Sub-Week Alarm Counter Register">
          <bitfield name="CNTR_LOAD" caption="Writes with a non-zero value to this field reload the 9-bit Sub-Week Alarm counter. Writes of 0 disable the counter.\n
				If the Sub-Week Alarm counter decrements to 0 and the AUTO_RELOAD bit is set, the value in this field is automatically loaded into the Sub-Week Alarm counter." mask="0x1FF"/>
          <bitfield name="CNTR_STS" caption="Reads of this register return the current state of the 9-bit Sub-Week Alarm counter." mask="0x1FF0000"/>
        </register>
      </register-group>
    </module>
    <module name="TACH" id="66" version="1.0" caption="This block monitors TACH output signals from various types of fans, and determines their speed.">
      <register-group name="TACH" caption="This block monitors TACH output signals from various types of fans, and determines their speed.">
        <register name="CTRL" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="TACHx Control Register">
          <bitfield name="OUTOF_LIM_EN" caption="TACH_OUT_OF_LIMIT_ENABLE  This bit is used to enable the TACH_OUT_OF_LIMIT_STATUS bit in the TACHx Status Register to generate an interrupt event.\n
                 1=Enable interrupt output from Tach block\n
                 0=Disable interrupt output from Tach block (default)" mask="0x1"/>
          <bitfield name="EN" caption="TACH_ENABLE  1= TACH Monitoring enabled, clocks enabled. 0= TACH Idle, clocks gated" mask="0x2"/>
          <bitfield name="FILT_EN" caption="FILTER_ENABLE  This filter is used to remove high frequency glitches from Tach Input. When this filter is enabled, Tach input pulses less than two 100kHz_- Clk periods wide get filtered.\n
                 1= Filter enabled\n
                 0= Filter disabled (default)\n
                 It is recommended that the Tach input filter always be enabled." mask="0x100"/>
          <bitfield name="RD_MOD_SEL" caption="TACH_READING_MODE_SELECT\n
                 1=Counter is incremented on the rising edge of the 100kHz_Clk input. The counter is latched into the TACHX_COUNTER field and reset when the programmed number of edges is detected.\n
                 0=Counter is incremented when Tach Input transitions from low-tohigh state (default)" mask="0x400"/>
          <bitfield name="EDGES" caption="TACH_EDGES A Tach signal is a square wave with a 50 percent duty cycle. Typically, two Tach periods represents one revolution of the fan. A Tach period consists of three Tach edges. This programmed value represents the number of Tach edges that will be used to determine the interval for which the number of 100kHz_Clk pulses will be counted\n
                 11b=9 Tach edges (4 Tach periods)\n
                 10b=5 Tach edges (2 Tach periods)\n
                 01b=3 Tach edges (1 Tach period)\n
                 00b=2 Tach edges (1/2 Tach period)" mask="0x1800"/>
          <bitfield name="CNT_RDY_INT_EN" caption="COUNT_READY_INT_EN 1=Enable Count Ready interrupt from Tach block, 0=Disable Count Ready interrupt from Tach block" mask="0x4000"/>
          <bitfield name="IN_INT_EN" caption="TACH_INPUT_INT_EN 1=Enable Tach Input toggle interrupt from Tach block, 0=Disable Tach Input toggle interrupt from Tach block" mask="0x8000"/>
          <bitfield name="CNTR" caption="This 16-bit field contains the latched value of the internal Tach pulse counter, which may be configured by the Tach Reading Mode Select field to operate as a free-running counter or to be gated by the Tach input signal." mask="0xFFFF0000"/>
        </register>
        <register name="STS" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="TACHx Status Register">
          <bitfield name="OUTOF_LIM_STS" caption="TACH_OUT_OF_LIMIT_STATUS  1=Tach is outside of limits, 0=Tach is within limits (R/WC)" mask="0x1"/>
          <bitfield name="PIN_STS" caption="TACH_PIN_STATUS  1= Tach Input is high, 0= Tach Input is low" mask="0x2"/>
          <bitfield name="TOG_STS" caption="TOGGLE_STATUS  1=Tach Input changed state (this bit is set on a low-to-high or high-tolow transition), 0=Tach stable (R/WC)" mask="0x4"/>
          <bitfield name="CNT_RDY_STS" caption="COUNT_READY_STATUS  1=Reading ready, 0=Reading not ready" mask="0x8"/>
        </register>
        <register name="LIM_HI" offset="0x8" rw="RW" size="4" access-size="4" initval="0x0000FFFF" caption="TACH HIGH LIMIT Register">
          <bitfield name="T_HIGH" caption="This value is compared with the value in the TACHX_COUNTER field. If the value in the counter is greater than the value\n
				programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS status event may be enabled\n
				to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx Control Register." mask="0xFFFF"/>
        </register>
        <register name="LIM_LO" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="TACHx Low Limit Register">
          <bitfield name="T_LOW" caption="This value is compared with the value in the TACHX_COUNTER field of the TACHx Control Register. If the value in the counter\n
				is less than the value programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS\n
				status event may be enabled to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx\n
				Control Register To disable the TACH_OUT_OF_LIMIT_STATUS low event, program 0000h into this register." mask="0xFFFF"/>
        </register>
      </register-group>
    </module>
    <module name="PWM" id="54" version="1.0" caption="The PWM block generates an arbitrary duty cycle output at frequencies from less than 0.1 Hz to 24 MHz">
      <register-group name="PWM" caption="The PWM block generates an arbitrary duty cycle output at frequencies from less than 0.1 Hz to 24 MHz">
        <register name="CNT_ON" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This field determines both the frequency and duty cycle of the PWM signal. Setting this field to a value of n will\n
   cause the On time of the PWM to be n+1 cycles of the PWM Clock Source.\n
   When this field is set to zero and the PWMX_COUNTER_OFF_TIME is not set to zero, the PWM_OUTPUT is held low (Full Off).">
        </register>
        <register name="CNT_OFF" offset="0x4" rw="RW" size="4" access-size="4" initval="0x0000FFFF" caption="This field determine both the frequency and duty cycle of the PWM signal. Setting this field to a value of n will\n
   cause the Off time of the PWM to be n+1 cycles of the PWM Clock Source.\n
   When this field is set to zero, the PWM_OUTPUT is held high (Full On).">
        </register>
        <register name="CFG" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="PWMx CONFIGURATION REGISTER">
          <bitfield name="PWM_EN" caption="When the PWM_ENABLE is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n
				In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n
				and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n
				1=Enabled (default); 0=Disabled (gates clocks to save power)." mask="0x1"/>
          <bitfield name="CLK_SEL" caption="This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n
                 1=CLOCK_LOW\n
                 0=CLOCK_HIGH" mask="0x2"/>
          <bitfield name="INV" caption="1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high." mask="0x4"/>
          <bitfield name="CLK_PRE_DIV" caption="The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n
				is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n
				signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n
				the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option." mask="0x78"/>
        </register>
      </register-group>
    </module>
    <module name="ADC" id="177" version="1.0" caption="This block is designed to convert external analog voltage readings into digital values.">
      <register-group name="ADC" caption="This0block is designed to convert external analog voltage readings into digital values.">
        <register name="CTRL" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00010106" caption="The ADC Control Register is used to control the behavior of the Analog to Digital Converter.">
          <bitfield name="ACT" caption="0: The ADC is disabled and placed in its lowest power state. 1: ADC block is enabled for operation." mask="0x1"/>
          <bitfield name="STRT_SIN" caption="(START_SINGLE) 0: The ADC Single Mode is disabled. 1: The ADC Single Mode is enabled. Note: This bit is self-clearing" mask="0x2"/>
          <bitfield name="STRT_RPT" caption="0: The ADC Repeat Mode is disabled. 1: The ADC Repeat Mode is enabled." mask="0x4"/>
          <bitfield name="PWR_SAV_DIS" caption="0: Power saving feature is enabled. 1: Power saving feature is disabled." mask="0x8"/>
          <bitfield name="SFT_RST" caption="(SOFT_RESET) 1: writing one causes a reset of the ADC block hardware (not the registers) 0: writing zero takes the ADC block out of reset" mask="0x10"/>
          <bitfield name="RPT_DONE_STS" caption="0: ADC repeat-sample conversion is not complete. 1: ADC repeat-sample conversion is completed. (R/WC)" mask="0x40"/>
          <bitfield name="SIN_DONE_STS" caption="0: ADC single-sample conversion is not complete. 1: ADC single-sample conversion is completed. (R/WC)" mask="0x80"/>
        </register>
        <register name="DELAY" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="The ADC Delay register determines the delay from setting Start_Repeat in the ADC Control Register and the start of a conversion cycle. This register also controls the interval between conversion cycles in repeat mode.">
          <bitfield name="STRT_DLY" caption="This field determines the starting delay before a conversion cycle is begun when Start_Repeat is written with a 1." mask="0xFFFF"/>
          <bitfield name="RPT_DLY" caption="This field determines the interval between conversion cycles when Start_Repeat is 1." mask="0xFFFF0000"/>
        </register>
        <register name="CHAN_STS" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="The ADC Status Register indicates whether the ADC has completed a conversion cycle. All bits are cleared by being written with a 1. \n
           0: conversion of the corresponding ADC channel is not complete\n
           1: conversion of the corresponding ADC channel is complete">
          <bitfield name="STS" caption="All bits are cleared by being written with a '1'. 1=conversion of the corresponding ADC channel is complete;\n
			  0=conversion of the corresponding ADC channel is not complete. For enabled single cycles, the SINGLE_DONE_STATUS bit in the\n
			  ADC Control Register is also set after all enabled channel conversion are done; for enabled repeat cycles, the REPEAT_DONE_STATUS\n
			  in the ADC Control Register is also set after all enabled channel conversion are done." mask="0xFFFF"/>
        </register>
        <register name="SNG_EN" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="The ADC Single Register is used to control which ADC channel is captured during a Single-Sample conversion cycle initiated by the Start_Single bit in the ADC Control Register. \n
           APPLICATION NOTE: Do not change the bits in this register in the middle of a conversion cycle to insure proper operation.\n
           0: single cycle conversions for this channel are disabled\n
           1: single cycle conversions for this channel are enabled">
          <bitfield name="S_EN" caption="Each bit in this field enables the corresponding ADC channel when a single cycle of conversions is started when the\n
			  START_SINGLE bit in the ADC Control Register is written with a 1. 1=single cycle conversions for this channel are enabled\n
			  0=single cycle conversions for this channel are disabled. Note: If this register is changed while a conversion." mask="0xFFFF"/>
        </register>
        <register name="REPT_EN" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="The ADC Repeat Register is used to control which ADC channels are captured during a repeat conversion cycle initiated by the Start_Repeat bit in the ADC Control Register.">
          <bitfield name="R_EN" caption="Each bit in this field enables the corresponding ADC channel for each pass of the Repeated ADC Conversion that is\n
			  controlled by bit START_REPEAT in the ADC Control Register. 1=repeat conversions for this channel are enabled;\n
			  0=repeat conversions for this channel are disabled" mask="0xFFFF"/>
        </register>
        <register name="CHAN_RD" offset="0x14" rw="RW" size="4" access-size="4" count="16" initval="0x00000000" caption="All 16 ADC channels return their results into a 32-bit reading register. In each case the low 10 bits of the reading register\n
    return the result of the Analog to Digital conversion and the upper 22 bits return 0.">
        </register>
        <register name="CFG" offset="0x7C" rw="RW" size="4" access-size="4" initval="0x00000101" caption="The ADC Configuration Register is used to configure the ADC clock timing.">
          <bitfield name="CLKLW_TIM" caption="These bits define the low time count of the ADC clock.\n
		      0= not used.\n
		      1= 1 System Clock.\n
		      2= 2 System Clock.\n" mask="0xFF"/>
          <bitfield name="CLKHIGH_TIM" caption="These bits define the high time count of the ADC clock.\n
		      0= not used.\n
		      1= 1 System Clock.\n
		      2= 2 System Clock.\n" mask="0xFF00"/>
          <bitfield name="CLKDUMY_TIM" caption="These bits define the dummy cycles of the ADC clock.\n
		      Valid Values are from 0x0 to 0xF.\n" mask="0xF0000"/>
          <bitfield name="PWRUP_DLY" caption="These bits define the power up delay in number of micro-seconds.\n
		      Valid Values are from 0x0 to 0xF.\n" mask="0xF00000"/>
          <bitfield name="DUMYCYC_GAP" caption="These bits define the number of micro-seconds between consective Starts.\n" mask="0xFF000000"/>
        </register>
        <register name="VREF_CHAN" offset="0x80" rw="RW" size="4" access-size="4" initval="0x00000000" caption="The ADC Channel Register is used to configure the reference voltage to the clock timing.\n">
          <bitfield name="SEL0" caption="These bits define the reference voltage for Channel 0.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x3"/>
          <bitfield name="SEL1" caption="These bits define the reference voltage for Channel 1.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC"/>
          <bitfield name="SEL2" caption="These bits define the reference voltage for Channel 2.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x30"/>
          <bitfield name="SEL3" caption="These bits define the reference voltage for Channel 3.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC0"/>
          <bitfield name="SEL4" caption="These bits define the reference voltage for Channel 4.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x300"/>
          <bitfield name="SEL5" caption="These bits define the reference voltage for Channel 5.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC00"/>
          <bitfield name="SEL6" caption="These bits define the reference voltage for Channel 6.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x3000"/>
          <bitfield name="SEL7" caption="These bits define the reference voltage for Channel 7.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC000"/>
          <bitfield name="SEL8" caption="These bits define the reference voltage for Channel 8.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x30000"/>
          <bitfield name="SEL9" caption="These bits define the reference voltage for Channel 9.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC0000"/>
          <bitfield name="SEL10" caption="These bits define the reference voltage for Channel 10.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x300000"/>
          <bitfield name="SEL11" caption="These bits define the reference voltage for Channel 11.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC00000"/>
          <bitfield name="SEL12" caption="These bits define the reference voltage for Channel 12.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x3000000"/>
          <bitfield name="SEL13" caption="These bits define the reference voltage for Channel 13.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC000000"/>
          <bitfield name="SEL14" caption="These bits define the reference voltage for Channel 14.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0x30000000"/>
          <bitfield name="SEL15" caption="These bits define the reference voltage for Channel 15.\n
		      0h= VREF0\n
		      1h= VREF1\n
		      2h= Reserved\n
		      3h= Reserved\n" mask="0xC0000000"/>
        </register>
        <register name="VREF_CTRL" offset="0x84" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the VREF Control Register">
          <bitfield name="CHRG_DLY" caption="This field represnts the delay time to charge up the external VREF capacitor.\n" mask="0xFFFF"/>
          <bitfield name="SWITCH_DLY" caption="This field represnts the delay time interval between switching VREF Selects.\n" mask="0x1FFF0000"/>
          <bitfield name="PADCTRL" caption="This fields give the choice to the application whether to float the unused PAD's or to Drive them to 0.\n
		      1= Drive unused PAD's Low 0b\n
		      0= Leave unused PAD's Floating.\n" mask="0x20000000"/>
          <bitfield name="SELSTAT" caption="This fields gives information about the current VREF selected.\n
		      0x0= VREF0\n
		      0x1= VREF1\n
		      0x2= Reserved\n
		      0x3= Reserved\n" mask="0xC0000000"/>
        </register>
        <register name="SAR_CTRL" offset="0x88" rw="RW" size="4" access-size="4" initval="0x00000006" caption="This is the SAR ADC Control Register.\n">
          <bitfield name="SEL_DIFF" caption="This field select between Single ended / Differential input.\n
			0= ADC core is enabled for single ended input operation.\n
			1= ADC core is enabled for differential input operation.\n" mask="0x1"/>
          <bitfield name="SEL_RES" caption="This field select the ADC Resolution (10/12 bits).\n
			0x0= Reserved.\n
			0x1= Reserved.\n
			0x2= 10 bit ADC resolution.\n
			0x3= 12 bit ADC resolution.\n" mask="0x6"/>
          <bitfield name="SHIFT_DAT" caption="This field defined if the ADC output is Right or Left Justified.\n
		      1= adc_dout is not shifted and lower bits are set to 0.\n
		      0= adc_dout is shifted right following resolution selected.\n" mask="0x8"/>
          <bitfield name="EN_ASYN_SMPL" caption="This field enables asynchronous sampling.\n
		      0= Async Sampling Disabled.\n
		      1= Async Sampling Enabled.\n" mask="0x10"/>
          <bitfield name="EN_SERIAL" caption="This field enables serial output (dout) from ADC.\n
		      0= Parallel dout.\n
		      1= Serial dout.\n" mask="0x20"/>
          <bitfield name="WARM_UP_DLY" caption="This field represents the warmup delay number in microseconds.\n" mask="0xFF80"/>
        </register>
        <register name="SAR_CFG" offset="0x8C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This is the SAR ADC Configuration Register.\n">
          <bitfield name="EN_CMBF" caption="Enable Common Mode Buffer Amplifier.\n
			0= Common Mode Buffer Amplifier is high all the time.\n
			1= Controls Common Mode Buffer Amplifier during power cycling.\n" mask="0x1"/>
          <bitfield name="DIS_DOUT" caption="Disable Parallel Output.\n
			0= Enable Parallel Output.\n
			1= Disable Parallel Output.\n" mask="0x2"/>
          <bitfield name="EN_DITHER" caption="Enable Dithering.\n
			0= Disable Dither.\n
			1= Enable Dither.\n" mask="0x4"/>
          <bitfield name="FAZ_AU_ZERO" caption="Enable F_AZ AUTOZEROING.\n
			1= Disable f_az autozeroing.\n
			0= Enable f_az autozeroing.\n" mask="0x8"/>
          <bitfield name="SAZ_AU_ZERO" caption="Enable S_AZ AUTOZEROING.\n
			1= Disable S_AZ autozeroing.\n
			0= Enable S_AZ autozeroing.\n" mask="0x10"/>
          <bitfield name="LAZ_AU_ZERO" caption="Enable L_AZ AUTOZEROING.\n
			1= Disable L_AZ autozeroing.\n
			0= Enable L_AZ autozeroing.\n" mask="0x20"/>
          <bitfield name="EN_RADC" caption="Enable RADC.\n
			1 = RDAC remains high during power cycling.\n
			0 = Controls RDAC during power cycling.\n" mask="0x40"/>
          <bitfield name="REGEN_DLY" caption="This register defines the delay between regen and latch.\n" mask="0x600"/>
          <bitfield name="CLK_DIV" caption="This register defines the programmable ADC Clock divider value.
		      Divider ratios of 256,128,64,32,16 are supported.\n" mask="0xF800"/>
          <bitfield name="IADC_RANGE2" caption="This register controls the current consumption for the whole ADC.\n" mask="0x300000"/>
          <bitfield name="IADC_RANGE1" caption="This register controls the current consumption for the whole ADC.\n" mask="0xC00000"/>
          <bitfield name="ICMBF_STG1" caption="This register controls the bias current for the 1st stage of the comparator.\n" mask="0x3000000"/>
          <bitfield name="ICMBF_STG2" caption="This register controls the bias current for the 2nd stage of the comparator.\n" mask="0xC000000"/>
          <bitfield name="ICMBF" caption="This register controls the bias current for common mode buffer amplifier.\n" mask="0x30000000"/>
          <bitfield name="EN_EXT_BIAS" caption="EN external bias.\n
			1 = Disables internal switched cap bias circuit.\n
			0 = Enables internal switched cap bias circuit.\n" mask="0x80000000"/>
        </register>
      </register-group>
    </module>
    <module name="LED" id="111" version="1.0" caption="The LED is implemented using a PWM that can be driven either by the 48 MHz clock or by a 32.768 KHz clock input.">
      <register-group name="LED" caption="The LED is implemented using a PWM that can be driven either by the 48 MHz clock or by a 32.768 KHz clock input.">
        <register name="CFG" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00001400" caption="LED Configuration">
          <bitfield name="CTRL" caption="CONTROL 3=PWM is always on\n
                 2=LED blinking (standard PWM)\n
                 1=LED breathing configuration\n
                 0=PWM is always off. All internal registers and counters are reset to 0. Clocks are gated" mask="0x3"/>
          <bitfield name="CLK_SRC" caption="1=Clock source is the 48 MHz clock, 0=Clock source is the 32.768 KHz clock" mask="0x4"/>
          <bitfield name="SYNCH" caption="SYNCHRONIZE  When this bit is '1', all counters for all LEDs are reset to their initial values. When this bit is '0' in the LED Configuration Register for all LEDs, then all counters for LEDs that are configured to blink or breathe will increment or decrement, as required." mask="0x8"/>
          <bitfield name="PWM_SIZE" caption="PWM_SIZE This bit controls the behavior of PWM:\n
                 3=Reserved\n
                 2=PWM is configured as a 6-bit PWM\n
                 1=PWM is configured as a 7-bit PWM\n
                 0=PWM is configured as an 8-bit PWM" mask="0x30"/>
          <bitfield name="EN_UPDATE" caption="ENABLE_UPDATE  This bit is set to 1 when written with a '1'. Writes of '0' have no effect. Hardware clears this bit to 0 when the breathing configuration registers are updated at the end of a PWM period. The current state of the bit is readable any time." mask="0x40"/>
          <bitfield name="RST" caption="RESET  Writes of '1' to this bit resets the PWM registers to their default values. This bit is self clearing. Writes of '0' to this bit have no effect." mask="0x80"/>
          <bitfield name="WDT_RELOAD" caption="WDT_RELOAD  The PWM Watchdog Timer counter reload value. On system reset, it defaults to 14h, which corresponds to a 4 second Watchdog timeout value." mask="0xFF00"/>
          <bitfield name="SYMMETRY" caption="SYMMETRY  1=The rising and falling ramp times are in Asymmetric mode.\n
                 0=The rising and falling ramp times are in Symmetric mode." mask="0x10000"/>
        </register>
        <register name="LIMIT" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="LED Limits This register may be written at any time. Values written into the register are held in an holding register, which is transferred into the actual register at the end of a PWM period. The two byte fields may be written independently. Reads of this register return the current contents and not the value of the holding register.">
          <bitfield name="MIN" caption="In breathing mode, when the current duty cycle is less than or equal to this value the breathing apparatus holds the current duty cycle for the period specified by the field LD in register LED_DELAY, then starts incrementing the current duty cycle In blinking mode, this field defines the duty cycle of the blink function." mask="0xFF"/>
          <bitfield name="MAX" caption="In breathing mode, when the current duty cycle is greater than or equal to this value the breathing apparatus holds the current duty cycle for the period specified by the field HD in register LED_DELAY, then starts decrementing the current duty cycle" mask="0xFF00"/>
        </register>
        <register name="DLY" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="LED Delay">
          <bitfield name="LOW_PULSE" caption="The number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal to the value MIN in register LED_LIMIT." mask="0xFFF"/>
          <bitfield name="HIGH_PULSE" caption="In breathing mode, the number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal to the value MAX in register LED_LIMIT." mask="0xFFF000"/>
        </register>
        <register name="STEP" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="This register has eight segment fields which provide the amount the current duty cycle is adjusted at the end of every PWM period. Segment field selection is decoded based on the segment index. The segment index equation utilized depends on the SYMMETRY bit in the LED Configuration Register Register)
             . In Symmetric Mode the Segment_Index[2:0] = Duty Cycle Bits[7:5]\n
             . In Asymmetric Mode the Segment_Index[2:0] is the bit concatenation of following: Segment_Index[2] = (FALLING RAMP TIME in Figure 30-3, Clipping Example) and Segment_Index[1:0] = Duty Cycle Bits[7:6].">
          <bitfield name="S0" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 000." mask="0xF"/>
          <bitfield name="S1" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 001." mask="0xF0"/>
          <bitfield name="S2" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 010." mask="0xF00"/>
          <bitfield name="S3" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 011." mask="0xF000"/>
          <bitfield name="S4" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 100." mask="0xF0000"/>
          <bitfield name="S5" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 101" mask="0xF00000"/>
          <bitfield name="S6" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 110." mask="0xF000000"/>
          <bitfield name="S7" caption="Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 111." mask="0xF0000000"/>
        </register>
        <register name="INTRVL" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="LED Update Interval">
          <bitfield name="I0" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 000b." mask="0xF"/>
          <bitfield name="I1" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 001b." mask="0xF0"/>
          <bitfield name="I2" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 010b." mask="0xF00"/>
          <bitfield name="I3" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 011b." mask="0xF000"/>
          <bitfield name="I4" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 100b." mask="0xF0000"/>
          <bitfield name="I5" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 101b." mask="0xF00000"/>
          <bitfield name="I6" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 110b." mask="0xF000000"/>
          <bitfield name="I7" caption="The number of PWM periods between updates to current duty cycle when the segment index is equal to 111b." mask="0xF0000000"/>
        </register>
        <register name="OUTDLY" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="LED Output Delay">
          <bitfield name="DELAY" caption="The delay, in counts of the clock defined in Clock Source (CLKSRC), in which output transitions are delayed.\n
				When this field is 0, there is no added transition delay. When the LED is programmed to be Always On or Always Off, the\n
				Output Delay field has no effect." mask="0xFF"/>
        </register>
      </register-group>
    </module>
    <module name="SMB" id="31" version="1.0" caption="The SMBus interface can handle standard SMBus 2.0 protocols as well as I2C interface.">
      <register-group name="SMB" caption="The SMBus interface can handle standard SMBus 2.0 protocols as well as I2C interface.">
        <register name="WCTRL" offset="0x0" rw="W" size="4" access-size="4" initval="0x00000000" caption="Control Register">
          <bitfield name="ACK" caption="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device." mask="0x1"/>
          <bitfield name="STO" caption="See STA description" mask="0x2"/>
          <bitfield name="STA" caption="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition" mask="0x4"/>
          <bitfield name="ENI" caption="Enable Interrupt bit (ENI) controls the Interrupt Interface" mask="0x8"/>
          <bitfield name="ESO" caption="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)" mask="0x40"/>
          <bitfield name="PIN" caption="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect." mask="0x80"/>
        </register>
        <register name="RSTS" offset="0x0" rw="R" size="4" access-size="4" initval="0x00000081" caption="Status Register">
          <bitfield name="NBB" caption="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible." mask="0x1"/>
          <bitfield name="LAB" caption="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus" mask="0x2"/>
          <bitfield name="AAS" caption="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received" mask="0x4"/>
          <bitfield name="LRB_AD0" caption="The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n
               When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n
               When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave." mask="0x8"/>
          <bitfield name="BER" caption="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected." mask="0x10"/>
          <bitfield name="STS" caption="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode." mask="0x20"/>
          <bitfield name="SAD" caption="SMBus Address Decoded (SAD)" mask="0x40"/>
          <bitfield name="PIN" caption="Pending Interrupt bit" mask="0x80"/>
        </register>
        <register name="OWN_ADDR" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Own Address Register\n
          Note that the Data Register and Own Address fields are offset by one bit, so that programming Own Address 1 with a value of 55h will result in the value AAh being recognized as the SMB Controller Core slave address.">
          <bitfield name="ADDR1" caption="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave." mask="0x7F"/>
          <bitfield name="ADDR2" caption="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave." mask="0x7F00"/>
        </register>
        <register name="I2CDATA" offset="0x8" rw="RW" size="1" access-size="1" initval="0x00" caption="This register holds the data that are either shifted out to or shifted in from the I2C port.">
        </register>
        <register name="RSVD1" offset="0x9" rw="R" size="1" access-size="1" count="3" initval="0x00" caption="Reserved">
        </register>		
        <register name="MCMD" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SMBus Master Command Register">
          <bitfield name="MRUN" caption="While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented." mask="0x1"/>
          <bitfield name="MPROCEED" caption="When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively." mask="0x2"/>
          <bitfield name="START0" caption="If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter." mask="0x100"/>
          <bitfield name="STARTN" caption="If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter." mask="0x200"/>
          <bitfield name="STOP" caption="If this bit is 1, send a Stop bit after the transaction completes." mask="0x400"/>
          <bitfield name="PEC_TERM" caption="If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0." mask="0x800"/>
          <bitfield name="READM" caption="If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0." mask="0x1000"/>
          <bitfield name="RD_PEC" caption="If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte." mask="0x2000"/>
          <bitfield name="WR_CNT" caption="This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register." mask="0xFF0000"/>
          <bitfield name="RD_CNT" caption="This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus." mask="0xFF000000"/>
        </register>
        <register name="SCMD" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SMBus Slave Command Register">
          <bitfield name="SRUN" caption="Setting this bit to 1 enables the Slave State Machine to operate." mask="0x1"/>
          <bitfield name="SPROCEED" caption="When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively." mask="0x2"/>
          <bitfield name="PEC" caption="If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0." mask="0x4"/>
          <bitfield name="WR_CNT" caption="This field is set to the number of bytes software expects to send to the Master." mask="0xFF00"/>
          <bitfield name="RD_CNT" caption="This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register." mask="0xFF0000"/>
        </register>
        <register name="PEC" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Packet Error Check (PEC) Register">
          <bitfield name="PEC" caption="The SMBus Packet Error Check (PEC) byte." mask="0xFF"/>
        </register>
        <register name="RSHTM" offset="0x18" rw="RW" size="4" access-size="4" initval="0x0000004D" caption="Repeated Start Hold Time Register">
          <bitfield name="RSHTM" caption="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n
			  the clock until the Hold Time for the repeated Start Bit has been satisfied." mask="0xFF"/>
        </register>
        <register name="RSVD2" offset="0x1C" rw="R" size="4" access-size="4" initval="0x00" caption="Reserved">
        </register>		
        <register name="COMPL" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Completion Register">
          <bitfield name="DTEN" caption="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled." mask="0x4"/>
          <bitfield name="MCEN" caption="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled." mask="0x8"/>
          <bitfield name="SCEN" caption="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled." mask="0x10"/>
          <bitfield name="BIDEN" caption="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled." mask="0x20"/>
          <bitfield name="TIMERR" caption="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted." mask="0x40"/>
          <bitfield name="DTO" caption="DTO is the Device Time-out bit. (R/WC)" mask="0x100"/>
          <bitfield name="MCTO" caption="MCTO is the Master Cumulative Time-out bit. (R/WC)" mask="0x200"/>
          <bitfield name="SCTO" caption="SCTO is the Slave Cumulative Time-out bit(R/WC)" mask="0x400"/>
          <bitfield name="CHDL" caption="CHDL is the clock high time-out detect bit(R/WC)" mask="0x800"/>
          <bitfield name="CHDH" caption="CHDH is the bus idle time-out detect bit(R/WC)" mask="0x1000"/>
          <bitfield name="BER" caption="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)" mask="0x2000"/>
          <bitfield name="LAB" caption="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)" mask="0x4000"/>
          <bitfield name="SNAKR" caption="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface." mask="0x10000"/>
          <bitfield name="STR" caption="0: Slave has just finished the receive phase of a transaction. \n
               1: Slave has just finished the transmit phase of a transaction." mask="0x20000"/>
          <bitfield name="SPROT" caption="If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0." mask="0x80000"/>
          <bitfield name="REP_RD" caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation." mask="0x100000"/>
          <bitfield name="REP_WR" caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation." mask="0x200000"/>
          <bitfield name="MNAKX" caption="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)" mask="0x1000000"/>
          <bitfield name="MTR" caption="0: Master has just finished the receive phase of a transaction. \n
               1: Master has just finished the transmit phase of a transaction." mask="0x2000000"/>
          <bitfield name="IDLE" caption="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)" mask="0x20000000"/>
          <bitfield name="MDONE" caption="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)" mask="0x40000000"/>
          <bitfield name="SDONE" caption="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)" mask="0x80000000"/>
        </register>
        <register name="IDLSC" offset="0x24" rw="RW" size="4" access-size="4" initval="0x01FC01ED" caption="Idle Scaling Register">
          <bitfield name="FAIR_BUS_IDL_MIN" caption="This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus" mask="0xFFF"/>
          <bitfield name="FAIR_IDL_DLY" caption="This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus" mask="0xFFF0000"/>
        </register>
        <register name="CFG" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Configuration Register">
          <bitfield name="PORT_SEL" caption="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair." mask="0xF"/>
          <bitfield name="TCEN" caption="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled" mask="0x10"/>
          <bitfield name="SLOW_CLK" caption="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4." mask="0x20"/>
          <bitfield name="TEST" caption="Must be always written with 0." mask="0x40"/>
          <bitfield name="PECEN" caption="When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled" mask="0x80"/>
          <bitfield name="FEN" caption="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n
			  1=Input filtering is enabled; 0=Input filtering is disabled." mask="0x100"/>
          <bitfield name="RST" caption="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state." mask="0x200"/>
          <bitfield name="EN" caption="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n
               The ENAB bit must be asserted ('1') for normal operation." mask="0x400"/>
          <bitfield name="DSA" caption="0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode" mask="0x800"/>
          <bitfield name="FAIR" caption="If this bit is 1, the MCTP Fairness protocol is in effect." mask="0x1000"/>
          <bitfield name="TEST0" caption="Must be always written with 0." mask="0x2000"/>
          <bitfield name="GC_DIS" caption="This is the General Call Disable bit.\n
               0: the response to the General Call address as a slave is enabled\n
               1: the response to the General Call address as a slave is disabled." mask="0x4000"/>
          <bitfield name="CFG_PROMIS" caption="This bit define the Mode of SM Bus Controler Mode of operation.
		      0= Normal Operation.
		      1=  Promiscuous Mode Enable." mask="0x8000"/>
          <bitfield name="FLUSH_SXBUF" caption="A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit." mask="0x10000"/>
          <bitfield name="FLUSH_SRBUF" caption="A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit." mask="0x20000"/>
          <bitfield name="FLUSH_MXBUF" caption="A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit." mask="0x40000"/>
          <bitfield name="FLUSH_MRBUF" caption="A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit." mask="0x80000"/>
          <bitfield name="EN_AAS" caption="0: Disable the AAS, 1: Enable the AAS Interrupt" mask="0x10000000"/>
          <bitfield name="ENIDI" caption="If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled." mask="0x20000000"/>
          <bitfield name="ENMI" caption="If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled." mask="0x40000000"/>
          <bitfield name="ENSI" caption="If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled" mask="0x80000000"/>
        </register>
        <register name="BUSCLK" offset="0x2C" rw="RW" size="4" access-size="4" initval="0x00004F4F" caption="Bus Clock Register">
          <bitfield name="LOW_PER" caption="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock." mask="0xFF"/>
          <bitfield name="HIGH_PER" caption="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock." mask="0xFF00"/>
        </register>
        <register name="BLKID" offset="0x30" rw="R" size="1" access-size="1" initval="0x11" caption="Block ID Register">
          <bitfield name="ID" caption="Block ID." mask="0xFF"/>
        </register>
        <register name="BLKREV" offset="0x34" rw="R" size="1" access-size="1" initval="0x00" caption="Revision Register">
          <bitfield name="REV" caption="Block Revision Number" mask="0xFF"/>
        </register>
        <register name="BBCTRL" offset="0x38" rw="RW" size="4" access-size="4" initval="0x00000060" caption="Bit-Bang Control Register">
          <bitfield name="BBEN" caption="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled" mask="0x1"/>
          <bitfield name="CLDIR" caption="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output" mask="0x2"/>
          <bitfield name="DADIR" caption="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output" mask="0x4"/>
          <bitfield name="BBCLK" caption="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'" mask="0x8"/>
          <bitfield name="BBDAT" caption="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'" mask="0x10"/>
          <bitfield name="BBCLKI" caption="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK." mask="0x20"/>
          <bitfield name="BBDATI" caption="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT" mask="0x40"/>
        </register>
        <register name="TEST" offset="0x3C" rw="R" size="1" access-size="1" initval="0x05" caption="Test">
          <bitfield name="TEST" caption="This register must not be written, or undesirable results may occur." mask="0xFF"/>
        </register>
        <register name="DATATM" offset="0x40" rw="RW" size="4" access-size="4" initval="0x0C4D5006" caption="Data Timing Register">
          <bitfield name="DATA_HOLD" caption="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low." mask="0xFF"/>
          <bitfield name="RESTART_SETUP" caption="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition." mask="0xFF00"/>
          <bitfield name="STOP_SETUP" caption="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition." mask="0xFF0000"/>
          <bitfield name="FIRST_START_HOLD" caption="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n
			  THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register." mask="0xFF000000"/>
        </register>
        <register name="TMOUTSC" offset="0x44" rw="RW" size="4" access-size="4" initval="0x4B9CC2C7" caption="Time-Out Scaling Register">
          <bitfield name="CLK_HIGH_TIM_OUT" caption="Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2" mask="0xFF"/>
          <bitfield name="SLV_CUM_TIM_OUT" caption="Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024" mask="0xFF00"/>
          <bitfield name="MAST_CUM_TIM_OUT" caption="Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512" mask="0xFF0000"/>
          <bitfield name="BUS_IDLE_MIN" caption="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period" mask="0xFF000000"/>
        </register>
        <register name="SLV_TXB" offset="0x48" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SMBus Slave Transmit Buffer Register">
          <bitfield name="STXB" caption="SLAVE_TRANSMIT_BUFFER" mask="0xFF"/>
        </register>
        <register name="SLV_RXB" offset="0x4C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SMBus Slave Receive Buffer Register">
          <bitfield name="SRXB" caption="SLAVE_RECEIVE_BUFFER" mask="0xFF"/>
        </register>
        <register name="MTR_TXB" offset="0x50" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SMBus Master Transmit Buffer Register">
          <bitfield name="MTXB" caption="MASTER_TRANSMIT_BUFFER" mask="0xFF"/>
        </register>
        <register name="MTR_RXB" offset="0x54" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SMBus Master Receive Buffer Register">
          <bitfield name="MRXB" caption="MASTER_RECEIVE_BUFFER" mask="0xFF"/>
        </register>
        <register name="WAKE_STS" offset="0x60" rw="RW" size="4" access-size="4" initval="0x00000000" caption="WAKE STATUS Register">
          <bitfield name="START_BIT_DET" caption="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n
			  written with a '1'. Writes of '0' have no effect. (R/WC)" mask="0x1"/>
        </register>
        <register name="WAKE_EN" offset="0x64" rw="RW" size="4" access-size="4" initval="0x00000000" caption="WAKE ENABLE Register">
          <bitfield name="START_DET_INT_EN" caption="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n
			  1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled" mask="0x1"/>
        </register>
        <register name="SLV_ADDR" offset="0x6C" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Slave Address Register">
          <bitfield name="SADDR" caption="This register stores value of address + LSB direction after the 8th clock of the Address Byte.\n" mask="0xFF"/>
        </register>
        <register name="PRM_STS" offset="0x70" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Promiscuous Interrupt Register">
          <bitfield name="ADDR_INTR" caption="This is the Promiscuous Address Status interrupt and is set on the 8th clock of the I2C Address.\n
		      This bit will hold the Clock line low till this register bit is cleared. This is Write 1 to clear.\n
		      R/W1C." mask="0x1"/>
        </register>
        <register name="PRM_IEN" offset="0x74" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Promiscuous Interrupt Enable Register">
          <bitfield name="ADDR" caption="This is the Promiscuous interrupt enable register.\n
		      1= Interrupt Enable. \n
		      0= Interrupt Disabled. \n" mask="0x1"/>
        </register>
        <register name="PRM_CTRL" offset="0x78" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Promiscuous Control Register">
          <bitfield name="ACK_NAK" caption="This is the Promiscuous ACK / NAK response register.\n
		      1= ACK. \n
		      0= NAK. \n" mask="0x1"/>
        </register>
      </register-group>
    </module>
    <module name="I2C" id="31" version="1.0" caption="The I2C interface can handle standard I2C interface.">
      <register-group name="I2C" caption="The I2C interface can handle standard I2C interface.">
        <register name="WCTRL" offset="0x0" rw="W" size="4" access-size="4" initval="0x00000000" caption="Control Register">
          <bitfield name="ACK" caption="The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device." mask="0x1"/>
          <bitfield name="STO" caption="See STA description" mask="0x2"/>
          <bitfield name="STA" caption="The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition" mask="0x4"/>
          <bitfield name="ENI" caption="Enable Interrupt bit (ENI) controls the Interrupt Interface" mask="0x8"/>
          <bitfield name="ESO" caption="The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)" mask="0x40"/>
          <bitfield name="PIN" caption="The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect." mask="0x80"/>
        </register>
        <register name="RSTS" offset="0x0" rw="R" size="4" access-size="4" initval="0x00000000" caption="Status Register">
          <bitfield name="NBB" caption="The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible." mask="0x1"/>
          <bitfield name="LAB" caption="The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus" mask="0x2"/>
          <bitfield name="AAS" caption="The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received" mask="0x4"/>
          <bitfield name="LRB_AD0" caption="The (Last Received Bit)  or (Address 0) (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n
               When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n
               When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave." mask="0x8"/>
          <bitfield name="BER" caption="When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected." mask="0x10"/>
          <bitfield name="STS" caption="When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode." mask="0x20"/>
          <bitfield name="SAD" caption="SMBus Address Decoded (SAD)" mask="0x40"/>
          <bitfield name="PIN" caption="Pending Interrupt bit" mask="0x80"/>
        </register>
        <register name="OWN_ADDR" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Own Address Register\n
          Note that the Data Register and Own Address fields are offset by one bit, so that programming Own Address 1 with a value of 55h will result in the value AAh being recognized as the SMB Controller Core slave address.">
          <bitfield name="ADDR1" caption="The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave." mask="0x7F"/>
          <bitfield name="ADDR2" caption="The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave." mask="0x7F00"/>
        </register>
        <register name="I2CDATA" offset="0x8" rw="RW" size="1" access-size="1" initval="0x00" caption="This register holds the data that are either shifted out to or shifted in from the I2C port.">
        </register>
        <register name="RSHTM" offset="0x18" rw="RW" size="4" access-size="4" initval="0x0000004D" caption="Repeated Start Hold Time Register">
          <bitfield name="RSHTM" caption="This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n
			  the clock until the Hold Time for the repeated Start Bit has been satisfied." mask="0xFF"/>
        </register>
        <register name="RSVD1" offset="0x1C" rw="R" size="4" access-size="4" initval="0x00" caption="Reserved">
        </register>
        <register name="COMPL" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Completion Register">
          <bitfield name="DTEN" caption="When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled." mask="0x4"/>
          <bitfield name="MCEN" caption="When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled." mask="0x8"/>
          <bitfield name="SCEN" caption="When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled." mask="0x10"/>
          <bitfield name="BIDEN" caption="When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled." mask="0x20"/>
          <bitfield name="TIMERR" caption="The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted." mask="0x40"/>
          <bitfield name="DTO" caption="DTO is the Device Time-out bit. (R/WC)" mask="0x100"/>
          <bitfield name="MCTO" caption="MCTO is the Master Cumulative Time-out bit. (R/WC)" mask="0x200"/>
          <bitfield name="SCTO" caption="SCTO is the Slave Cumulative Time-out bit(R/WC)" mask="0x400"/>
          <bitfield name="CHDL" caption="CHDL is the clock high time-out detect bit(R/WC)" mask="0x800"/>
          <bitfield name="CHDH" caption="CHDH is the bus idle time-out detect bit(R/WC)" mask="0x1000"/>
          <bitfield name="BER" caption="If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)" mask="0x2000"/>
          <bitfield name="LAB" caption="If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)" mask="0x4000"/>
          <bitfield name="SNAKR" caption="If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface." mask="0x10000"/>
          <bitfield name="STR" caption="0: Slave has just finished the receive phase of a transaction. \n
               1: Slave has just finished the transmit phase of a transaction." mask="0x20000"/>
          <bitfield name="REP_RD" caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation." mask="0x100000"/>
          <bitfield name="REP_WR" caption="If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation." mask="0x200000"/>
          <bitfield name="MNAKX" caption="If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)" mask="0x1000000"/>
          <bitfield name="MTR" caption="0: Master has just finished the receive phase of a transaction. \n
               1: Master has just finished the transmit phase of a transaction." mask="0x2000000"/>
          <bitfield name="IDLE" caption="This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)" mask="0x20000000"/>
          <bitfield name="MDONE" caption="If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)" mask="0x40000000"/>
          <bitfield name="SDONE" caption="If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)" mask="0x80000000"/>
        </register>
        <register name="RSVD2" offset="0x24" rw="R" size="4" access-size="4" initval="0x00" caption="Reserved">
        </register>
        <register name="CFG" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Configuration Register">
          <bitfield name="PORT_SEL" caption="The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair." mask="0xF"/>
          <bitfield name="TCEN" caption="When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled" mask="0x10"/>
          <bitfield name="SLOW_CLK" caption="When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4." mask="0x20"/>
          <bitfield name="TEST" caption="Must be always written with 0." mask="0xC0"/>
          <bitfield name="FEN" caption="Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n
			  1=Input filtering is enabled; 0=Input filtering is disabled." mask="0x100"/>
          <bitfield name="RST" caption="When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state." mask="0x200"/>
          <bitfield name="EN" caption="When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n
               The ENAB bit must be asserted ('1') for normal operation." mask="0x400"/>
          <bitfield name="TEST0" caption="Must be always written with 0." mask="0x3800"/>
          <bitfield name="GC_DIS" caption="This is the General Call Disable bit.\n
               0: the response to the General Call address as a slave is enabled\n
               1: the response to the General Call address as a slave is disabled." mask="0x4000"/>
          <bitfield name="CNFG_PROMIS" caption="This is the configur Promiscuous bit.\n
               0: Normal operation is enabled. \n
	       1: Promiscuous Mode enabled , General Call Address disabled, Promiscuous Address Interrupt function enabled.
			Stall 9th clock of address byte enabled.  Address byte ACK/NAK done by Promiscuous ACK setting.\n" mask="0x8000"/>
        </register>
        <register name="BUSCLK" offset="0x2C" rw="RW" size="4" access-size="4" initval="0x00004F4F" caption="Bus Clock Register">
          <bitfield name="LOW_PER" caption="This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock." mask="0xFF"/>
          <bitfield name="HIGH_PER" caption="This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock." mask="0xFF00"/>
        </register>
        <register name="BLKID" offset="0x30" rw="R" size="1" access-size="1" initval="0x00" caption="Block ID Register">
          <bitfield name="ID" caption="Block ID." mask="0xFF"/>
        </register>
        <register name="BLKREV" offset="0x34" rw="R" size="1" access-size="1" initval="0x00" caption="Revision Register">
          <bitfield name="REV" caption="Block Revision Number" mask="0xFF"/>
        </register>
        <register name="BB_CTRL" offset="0x38" rw="RW" size="4" access-size="4" initval="0x00000060" caption="Bit-Bang Control Register">
          <bitfield name="BBEN" caption="Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled" mask="0x1"/>
          <bitfield name="CLDIR" caption="Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output" mask="0x2"/>
          <bitfield name="DADIR" caption="Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output" mask="0x4"/>
          <bitfield name="BBCLK" caption="Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'" mask="0x8"/>
          <bitfield name="BBDAT" caption="Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'" mask="0x10"/>
          <bitfield name="BBCLKI" caption="Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK." mask="0x20"/>
          <bitfield name="BBDATI" caption="Bit-Bang Data In. The BBDATI bit always returns the state of SDAT" mask="0x40"/>
        </register>
        <register name="CLKSYNC" offset="0x3C" rw="R" size="1" access-size="1" initval="0x00" caption="This is Clock Sync Register. This register must not be written, or undesirable results may occur.\n">
          <bitfield name="CLK_SYNC" caption="This register must not be written, or undesirable results may occur." mask="0xFF"/>
        </register>
        <register name="DATATM" offset="0x40" rw="RW" size="4" access-size="4" initval="0x0C4D5006" caption="Data Timing Register">
          <bitfield name="DATA_HOLD" caption="The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low." mask="0xFF"/>
          <bitfield name="RESTART_SETUP" caption="The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition." mask="0xFF00"/>
          <bitfield name="STOP_SETUP" caption="The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition." mask="0xFF0000"/>
          <bitfield name="FIRST_START_HOLD" caption="This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n
			  THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register." mask="0xFF000000"/>
        </register>
        <register name="TMOUTSC" offset="0x44" rw="RW" size="4" access-size="4" initval="0x4B9CC2C7" caption="Time-Out Scaling Register">
          <bitfield name="BUS_IDLE_MIN" caption="Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period" mask="0xFF000000"/>
        </register>
        <register name="WAKE_STS" offset="0x60" rw="RW" size="4" access-size="4" initval="0x00000000" caption="WAKE STATUS Register">
          <bitfield name="START_BIT_DET" caption="This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n
			  written with a '1'. Writes of '0' have no effect. (R/WC)" mask="0x1"/>
        </register>
        <register name="WAKE_EN" offset="0x64" rw="RW" size="4" access-size="4" initval="0x00000000" caption="WAKE ENABLE Register">
          <bitfield name="START_DET_INT_EN" caption="Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n
		      1=Start Bit Detection Interrupt enabled. \n
		      0=Start Bit Detection Interrupt disabled.\n" mask="0x1"/>
        </register>
        <register name="SLV_ADDR" offset="0x6C" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Slave Address Register.\n">
          <bitfield name="SADDR" caption="This register stores the value of the Slave Address and Direction Bit from the 1st byte of a Slave transfer.\n
			This is loaded immediately upon receipt of the address byte, before the ACK/NAK 9th clock. \n" mask="0xFF"/>
        </register>
        <register name="PRM_STS" offset="0x70" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Promiscuous Interrupt Register. This register bit will be functional only in Promiscuous mode.\n">
          <bitfield name="ADDR_INTR" caption="This is the Promiscuous Address Status interrupt. This bit is functional only in Promiscuous mode. This bit is set \n
		      on the 8th clock of the I2C Address. This bit will hold the Clock line low till this register bit is cleared. In other words, \n
		      Software should read the address program ACK/NAK and clear this bit for the ACK/NAK clock to appear on the I2C clock (SCL) line. \n
		      This is Write 1 to clear. R/W1C." mask="0x1"/>
        </register>
        <register name="PRM_IEN" offset="0x74" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Promiscuous Interrupt Enable Register.\n">
          <bitfield name="ADDR" caption="This is the Promiscuous interrupt enable register.\n
		      1= Interrupt Enable. \n
		      0= Interrupt Disabled. \n" mask="0x1"/>
        </register>
        <register name="PRM_CTRL" offset="0x78" rw="RW" size="1" access-size="1" initval="0x00" caption="This is the Promiscuous Control Register. This register is functional only in Promiscuous mode.\n">
          <bitfield name="ACK_NAK" caption="This is the Promiscuous ACK / NAK response register. This bit has no effect in Normal mode of operation.\n
		      1= ACK the address byte. \n
		      0= NAK the address byte. \n" mask="0x1"/>
        </register>
      </register-group>
    </module>
    <module name="QMSPI" id="147" version="1.0" caption="The QMSPI may be used to communicate with various peripheral devices that use a Serial Peripheral Interface">
      <register-group name="QMSPI" caption="The QMSPI may be used to communicate with various peripheral devices that use a Serial Peripheral Interface">
        <register name="MODE" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Mode Register">
          <bitfield name="ACT" caption="This bit is used to activate the QMSPI block.\n
				1=Enabled. The block is fully operational\n
                0=Disabled. Clocks are gated to conserve power and the output signals are set to their inactive state." mask="0x1"/>
          <bitfield name="SOFT_RST" caption="Writing this bit with a 1 will reset the Quad SPI block. It is self-clearing." mask="0x2"/>
          <bitfield name="CPOL" caption="Polarity of the SPI clock line when there are no transactions in process. 1=SPI Clock starts High; 0=SPI Clock starts Low." mask="0x100"/>
          <bitfield name="CHPA_MOSI" caption="Clock phase of the Master data out. Common SPI modes require this field to be programmed with the same value as CHPA_MISO in this register.\n
				e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n
                If CPOL=1: 1=Data changes on the falling edge of the SPI clock; 0=Data changes on the rising edge of the SPI clock\n
                If CPOL=0: 1=Data changes on the rising edge of the SPI clock; 0=Data changes on the falling edge of the SPI clock" mask="0x200"/>
          <bitfield name="CHPA_MISO" caption="Clock phase of the Master data in. Common SPI modes require this field to be programmed with the same value as CHPA_MOSI in this register.\n
				e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n
                If CPOL=1: 1=Data are captured on the rising edge of the SPI clock; 0=Data are captured on the falling edge of the SPI clock\n
                If CPOL=0: 1=Data are captured on the falling edge of the SPI clock; 0=Data are captured on the rising edge of the SPI clock" mask="0x400"/>
          <bitfield name="CLK_DIV" caption="The SPI clock divide in number of system clocks. A value of 1 divides the master clock by 1, a value of 255 divides the master clock by 255. A value of 0 divides the master clock by 256." mask="0x1FF0000"/>
        </register>
        <register name="CTRL" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI SPI Control">
          <bitfield name="TX_MODE" caption="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either \n
				TX_TRANSFER_ENABLE or RX_TRANSFER_ENABLE must be 0.\n
                 3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode." mask="0x3"/>
          <bitfield name="TX_TRANS_EN" caption="This field bit selects the transmit function of the SPI interface.\n
                3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used.\n
                2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n
                1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n
                0=Transmit is Disabled. Not data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled." mask="0xC"/>
          <bitfield name="TX_DMA_EN" caption="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either\n
				the interface reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n
				1=DMA is enabled.and set to 1 Byte\n
                2=DMA is enabled and set to 2 Bytes\n
                3=DMA is enabled and set to 4 Bytes.\n
				0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware" mask="0x30"/>
          <bitfield name="RX_TRANS_EN" caption="This bit enables the receive function of the SPI interface.\n
                1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer\n
                0=Receive is disabled" mask="0x40"/>
          <bitfield name="RX_DMA_EN" caption="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO until either the interface\n
                reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n
                1=DMA is enabled.and set to 1 Byte\n
                2=DMA is enabled and set to 2 Bytes\n
                3=DMA is enabled and set to 4 Bytes\n
                0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware" mask="0x180"/>
          <bitfield name="CLOSE_TRANS_EN" caption="This selects what action is taken at the end of a transfer. When the transaction closes, the Chip Select de-asserts, the SPI \n
				interface returns to IDLE and the DMA interface terminates When Description Buffers are in use this bit must be set only on the Last Buffer.\n
				1=The transaction is terminated\n
				0=The transaction is not terminated" mask="0x200"/>
          <bitfield name="TRANS_UNITS" caption="3=TRANSFER_LENGTH defined in units of 16-byte segments\n
				2=TRANSFER_LENGTH defined in units of 4-byte segments\n
				1=TRANSFER_LENGTH defined in units of bytes\n
				0=TRANSFER_LENGTH defined in units of bits." mask="0xC00"/>
          <bitfield name="DESCR_BUFF_PTR" caption="This field selects the first buffer used if Description Buffers are enabled." mask="0xF000"/>
          <bitfield name="DESCR_BUFF_EN" caption="This enables the Description Buffers to be used.\n
				1=Description Buffers in use. The first buffer is defined in DESCRIPTION_BUFFER_POINTER\n
				0=Description Buffers disabled." mask="0x10000"/>
          <bitfield name="TRANS_LEN" caption="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TRANSFER_LENGTH_BITS.\n
				A value of 0 means an infinite length transfer." mask="0xFFFE0000"/>
        </register>
        <register name="EXE" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Execute Register">
          <bitfield name="START" caption="Writing a 1 to this bit will start the SPI transfer. Writing a 0 to this bit has no effect. This bit is self-clearing.\n
				This bit must not be set to 1 if the field STOP in this register is set to 1." mask="0x1"/>
          <bitfield name="STOP" caption="Writing a 1 to this bit will stop any transfer in progress at the next byte boundary. Writing a 0 to this bit has no effect.\n
				This bit is self clearing. This bit must not be set to 1 if the field START in this register is set to 1." mask="0x2"/>
          <bitfield name="CLR_DAT_BUFF" caption="Writing a 1 to this bit will clear out the Transmit and Receive FIFOs. Any data stored in the FIFOs is discarded and all count fields are reset.\n
				Writing a 0 to this bit has no effect. This bit is self clearing." mask="0x4"/>
        </register>
        <register name="IFCTRL" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Interface Control Register">
          <bitfield name="WR_PRCT_OUT_VAL" caption="This bit sets the value on the WRITE PROTECT SPI Output Port if it is driven.\n
                1=WRITE PROTECT is driven to 1; 0=WRITE PROTECT is driven to 0" mask="0x1"/>
          <bitfield name="WR_PRCT_OUT_EN" caption="1=WRITE PROTECT SPI Output Port is driven\n
                0=WRITE PROTECT SPI Output Port is not driven" mask="0x2"/>
          <bitfield name="HLD_OUT_VAL" caption="This bit sets the value on the HOLD SPI Output Port if it is driven.\n
                1=HOLD is driven to 1; 0=HOLD is driven to 0." mask="0x4"/>
          <bitfield name="HLD_OUT_EN" caption="1=HOLD SPI Output Port is driven\n
                0=HOLD SPI Output Port is not driven." mask="0x8"/>
          <bitfield name="PD_ON_NOT_SEL" caption="1=Enable pull-down resistors on Receive pins while the SPI Chip Select signal is not asserted\n
				0=No pull-down resistors enabled on Receive pins" mask="0x10"/>
          <bitfield name="PU_ON_NOTSEL" caption="1=Enable pull-up resistors on Receive pins while the SPI Chip Select signal is not asserted\n
				0=No pull-up resistors enabled on Receive pins." mask="0x20"/>
          <bitfield name="PD_ON_NOTDRIVEN" caption="1=Enable pull-down resistors on Transmit pins while the pins are not driven\n
				0=No pull-down resistors enabled ion Transmit pins." mask="0x40"/>
          <bitfield name="PU_ON_NOTDRIVEN" caption="1=Enable pull-up resistors on Transmit pins while the pins are not driven\n
				0=No pull-up resistors enabled ion Transmit pins." mask="0x80"/>
        </register>
        <register name="STS" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00002200" caption="QMSPI Status Register">
          <bitfield name="TRANS_COMPL" caption="In Manual Mode (neither DMA nor Description Buffers are enabled), this bit will be set to 1 when the transfer matches TRANSFER_LENGTH.\n
                If DMA Mode is enabled, this bit will be set to 1 when DMA_COMPLETE is set to 1. In Description Buffer Mode, this bit will be set to 1 only when the Last Buffer completes its transfer.\n
				In all cases, this bit will be set to 1 if the STOP bit is set to 1 and the controller has completed the current 8 bits being copied.\n
                1=Transfer completed; 0=Transfer not complete." mask="0x1"/>
          <bitfield name="DMA_COMPL" caption="This field has no meaning if DMA is not enabled. This bit will be set to 1 when the DMA controller asserts the DONE signal to the SPI controller.\n
				This occurs either when the SPI controller has closed the DMA transfer, or the DMA channel has completed its count. If both Transmit and Receive DMA transfers are\n 
				active, then this bit will only assert after both have completed. If CLOSE_TRANSFER_ENABLE is enabled, DMA_COMPLETE and TRANSFER_COMPLETE will be asserted simultaneously.\n
				This status is not inhibited by the description buffers, so it can fire on all valid description buffers while operating in that mode.\n
                1=DMA completed; 0=DMA not completed." mask="0x2"/>
          <bitfield name="TX_BUFF_ERR" caption="1=Overflow error occurred (attempt to write to a full Transmit Buffer)\n
                0=No overflow occurred." mask="0x4"/>
          <bitfield name="RX_BUFF_ERR" caption="1=Underflow error occurred (attempt to read from an empty Receive Buffer)\n
                0=No underflow occurred." mask="0x8"/>
          <bitfield name="PRGM_ERR" caption="This bit if a programming error is detected.\n
				1=Programming Error detected; 0=No programming error detected." mask="0x10"/>
          <bitfield name="TX_BUFF_FULL" caption="1=The Transmit Buffer is full\n
				0=The Transmit Buffer is not full." mask="0x100"/>
          <bitfield name="TX_BUFF_EMP" caption="1=The Transmit Buffer is empty\n
				0=The Transmit Buffer is not empty." mask="0x200"/>
          <bitfield name="TX_BUFF_REQ" caption="This status is asserted if the Transmit Buffer reaches a high water mark established by the TRANSMIT_BUFFER_TRIGGER field.\n
				1=TRANSMIT_BUFFER_COUNT is less than or equal to TRANSMIT_BUFFER_TRIGGER; 0=TRANSMIT_BUFFER_COUNT is greater than TRANSMIT_BUFFER_TRIGGER." mask="0x400"/>
          <bitfield name="TX_BUFF_STALL" caption="1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to read from an empty Transmit Buffer)\n
				0=No stalls occurred." mask="0x800"/>
          <bitfield name="RX_BUFF_FULL" caption="1=The Receive Buffer is full\n
				0=The Receive Buffer is not full." mask="0x1000"/>
          <bitfield name="RX_BUFF_EMP" caption="1=The Receive Buffer is empty\n
				0=The Receive Buffer is not empty." mask="0x2000"/>
          <bitfield name="RX_BUFF_REQ" caption="This status is asserted if the Receive Buffer reaches a high water mark established by the RECEIVE_BUFFER_TRIGGER field.\n
                1=RECEIVE_BUFFER_COUNT is greater than or equal to RECEIVE_BUFFER_TRIGGER\n
                0=RECEIVE_BUFFER_COUNT is less than RECEIVE_BUFFER_TRIGGER." mask="0x4000"/>
          <bitfield name="RX_BUFF_STALL" caption="1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to write to a full Receive Buffer)\n
				0=No stalls occurred." mask="0x8000"/>
          <bitfield name="TRANS_ACTIV" caption="1=A transfer is currently executing\n
				0=No transfer currently in progress." mask="0x10000"/>
          <bitfield name="CUR_DESCR_BUF" caption="This field shows the Description Buffer currently active. This field has no meaning if Description Buffers are not enabled." mask="0xF000000"/>
        </register>
        <register name="BUF_CNT_STS" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Buffer Count Status Register">
          <bitfield name="TX_BUFF_CNT" caption="This is a count of the number of bytes currently valid in the Transmit Buffer." mask="0xFFFF"/>
          <bitfield name="RX_BUFF_CNT" caption="This is a count of the number of bytes currently valid in the Receive Buffer." mask="0xFFFF0000"/>
        </register>
        <register name="IEN" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00002000" caption="QMSPI Interrupt Enable Register">
          <bitfield name="TRANS_COMPL_EN" caption="1=Enable an interrupt if TRANSFER_COMPLETE is asserted\n
				0=Disable the interrupt." mask="0x1"/>
          <bitfield name="DMA_COMPL_EN" caption="1=Enable an interrupt if DMA_COMPLETE is asserted\n
				0=Disable the interrupt." mask="0x2"/>
          <bitfield name="TX_BUF_ERR_EN" caption="1=Enable an interrupt if TRANSMIT_BUFFER_ERROR is asserted\n
				0=Disable the interrupt." mask="0x4"/>
          <bitfield name="RX_BUF_ERR_EN" caption="1=Enable an interrupt if RECEIVE_BUFFER_ERROR is asserted\n
				0=Disable the interrupt." mask="0x8"/>
          <bitfield name="PRGM_ERR_EN" caption="1=Enable an interrupt if PROGRAMMING_ERROR is asserted\n
				0=Disable the interrupt." mask="0x10"/>
          <bitfield name="TX_BUF_FULL_EN" caption="1=Enable an interrupt if TRANSMIT_BUFFER_FULL is asserted\n
				0=Disable the interrupt." mask="0x100"/>
          <bitfield name="TX_BUF_EMPTY_EN" caption="1=Enable an interrupt if TRANSMIT_BUFFER_EMPTY is asserted\n
				0=Disable the interrupt." mask="0x200"/>
          <bitfield name="TX_BUF_REQ_EN" caption="1=Enable an interrupt if TRANSMIT_BUFFER_REQUEST is asserted\n
				0=Disable the interrupt." mask="0x400"/>
          <bitfield name="RX_BUF_FUL_EN" caption="1=Enable an interrupt if RECEIVE_BUFFER_FULL is asserted\n
				0=Disable the interrupt." mask="0x1000"/>
          <bitfield name="RX_BUF_EMPTY_EN" caption="1=Enable an interrupt if RECEIVE_BUFFER_EMPTY is asserted\n
				0=Disable the interrupt." mask="0x2000"/>
          <bitfield name="RX_BUF_REQ_EN" caption="1=Enable an interrupt if RECEIVE_BUFFER_REQUEST is asserted\n
				0=Disable the interrupt." mask="0x4000"/>
        </register>
        <register name="BUF_CNT_TRIG" offset="0x1C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Buffer Count Trigger Register">
          <bitfield name="TX_BUF_TRIG" caption="An interrupt is triggered if the TRANSMIT_BUFFER_COUNT field is less than or equal to this value. A value of 0 disables the interrupt." mask="0xFFFF"/>
          <bitfield name="RX_BUF_TRIG" caption="An interrupt is triggered if the RECEIVE_BUFFER_COUNT field is greater than or equal to this value. A value of 0 disables the interrupt." mask="0xFFFF0000"/>
        </register>
        <register name="TX_FIFO" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Transmit Buffer Register">
          <bitfield name="TX_BUF" caption="Writes to this register store data to be transmitted from the SPI Master to the external SPI Slave.\n
				Writes to this block will be written to the Transmit FIFO. A 1 Byte write fills 1 byte of the FIFO. A Word write fills 2 Bytes and a Doubleword write fills 4 bytes.\n
				The data must always be aligned to the bottom most byte (so 1 byte write is on bits [7:0] and Word write is on [15:0]).\n
				An overflow condition, TRANSMIT_BUFFER_ERROR, if a write to a full FIFO occurs. Write accesses to this register increment the TRANSMIT_BUFFER_COUNT field." mask="0xFFFFFFFF"/>
        </register>
        <register name="RX_FIFO" offset="0x24" rw="RW" size="4" access-size="4" initval="0x00000000" caption="QMSPI Receive Buffer Register">
          <bitfield name="RX_BUF" caption="Buffer that stores data from the external SPI Slave device to the SPI Master (this block), which is received over MISO or IO.\n
				Reads from this register will empty the Rx FIFO. A 1 Byte read will have valid data on bits [7:0] and a Word read will have data on bits [15:0].\n
				It is possible to request more data than the FIFO has (underflow condition), but this will cause an error (Rx Buffer Error).\n
				Read accesses to this register decrement the RECEIVE_BUFFER_COUNT field." mask="0xFFFFFFFF"/>
        </register>
        <register name="CSTM" offset="0x28" rw="RW" size="4" access-size="4" initval="0x06060406" caption="QMSPI Chip Select Timing Register">
          <bitfield name="DLY_CS_ON_CLK_STRT" caption="" mask="0xF"/>
          <bitfield name="DLY_CLK_STOP_CS_OFF" caption="This selects the number of system clock cycles between the last clock edge and the deassertion of CS.\n" mask="0xF00"/>
          <bitfield name="DLY_LAST_DAT_HLD" caption="This selects the number of system clock cycles between CS deassertion to the data ports for WP and HOLD \n
			switching from input to output. This is only used if the WP/HOLD functions are in use and only on IO2/WP \n
		       	and IO3/HOLD pins." mask="0xF0000"/>
          <bitfield name="DLY_OFF_TO_ON" caption="This selects the number of system clock cycles between CS deassertion to CS assertion. This is the minimum \n
		       	pulse width of CS deassertion." mask="0xFF800000"/>
        </register>
        <register name="DESCR" offset="0x30" rw="RW" size="4" access-size="4" count="16" initval="0x00000000" caption="QMSPI Description Buffer 0 Register">
          <bitfield name="INFACE_MOD" caption="This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE or RX_TRANSFER_ENABLE must be 0.\n
				3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode." mask="0x3"/>
          <bitfield name="TX_TRANS_EN" caption="This field bit selects the transmit function of the SPI interface.\n
				3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n
				2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n
				1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n
				0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled." mask="0xC"/>
          <bitfield name="TX_DMA_EN" caption="This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n
				reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n
				1=DMA is enabled.and set to 1 Byte\n 
				2=DMA is enabled and set to 2 Bytes\n 
				3=DMA is enabled and set to 4 Bytes
				0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware." mask="0x30"/>
          <bitfield name="RX_TRANS_EN" caption="This bit enables the receive function of the SPI interface.\n
				1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled." mask="0x40"/>
          <bitfield name="RX_DMA_EN" caption="This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n
				1=DMA is enabled.and set to 1 Byte\n
				2=DMA is enabled and set to 2 Bytes\n
				3=DMA is enabled and set to 4 Bytes\n
				0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware." mask="0x180"/>
          <bitfield name="CLOSE_TRANS_EN" caption="This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n
				1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n
				0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active" mask="0x200"/>
          <bitfield name="TRANS_LEN_BITS" caption="1=TRANSFER_LENGTH defined in bits\n 
				0=TRANSFER_LENGTH defined in bytes" mask="0x400"/>
          <bitfield name="DESCR_BUF_LAST" caption="If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer completes the TRANSFER_COMPLETE status will be set to 1.\n
				If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer will be activated, and no additional status will be asserted." mask="0x800"/>
          <bitfield name="DESCR_BUF_NXT_PTR" caption="This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. This can point to the current buffer, creating an infinite loop." mask="0xF000"/>
          <bitfield name="TX_LEN" caption="The length of the SPI transfer. The count is in bytes or bits, depending on the value of TRANSFER_LENGTH_BITS. A value of 0 means an infinite length transfer." mask="0xFFFF0000"/>
        </register>
      </register-group>
    </module>
    <module name="TFDP" id="68" version="1.0" caption="The TFDP serially transmits EC-originated diagnostic vectors to an external debug trace system.">
      <register-group name="TFDP" caption="The TFDP serially transmits EC-originated diagnostic vectors to an external debug trace system.">
        <register name="MSDATA" offset="0x0" rw="RW" size="1" access-size="1" initval="0x00" caption="Debug data to be shifted out on the TFDP Debug port. While data is being shifted out, the Host Interface will 'hold-off' additional writes to the data register until the transfer is complete.">
        </register>
        <register name="CTRL" offset="0x4" rw="RW" size="1" access-size="1" initval="0x00" caption="Debug Control Register">
          <bitfield name="EN" caption="Enable. 1=Clock enabled, 0=Clock is disabled (Default)" mask="0x1"/>
          <bitfield name="EDGE_SEL" caption="1= Data is shifted out on the falling edge of the debug clock, 0= Data is shifted out on the rising edge of the debug clock (Default)" mask="0x2"/>
          <bitfield name="DIVSEL" caption="Clock Divider Select." mask="0xC"/>
          <bitfield name="IP_DLY" caption="Inter-packet Delay. The delay is in terms of TFDP Debug output clocks." mask="0x70"/>
        </register>
      </register-group>
    </module>
    <module name="VCI" id="75" version="1.0" caption="The VBAT-Powered Control Interfaces with the RTC With Date and DST Adjustment as well as the Week Alarm.">
      <register-group name="VCI" caption="The VBAT-Powered Control Interfaces with the RTC With Date and DST Adjustment as well as the Week Alarm.">
        <register name="VCI_CTRL_STS" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000080" caption="VCI Register">
          <bitfield name="VCI_IN" caption="These bits provide the latched state of the associated VCI_IN# pin, if latching is enabled or the current state of the pin\n
				if latching is not enabled. In both cases, the value is determined after the action of the VCI Polarity Register.\n
				Note: The VCI_IN[6:0]# bits default to the state of their respective input pins." mask="0xF"/>
          <bitfield name="VCI_OUT_GPIO_SEL" caption="This bit selects the power source for GPIO outputs.\n
			1= GPIO will be powered by VBAT power well (VCI_OUT functionality).\n
			0= GPIO will be powered by VTR power well.\n" mask="0x80"/>
          <bitfield name="VCI_OVRD_IN" caption="This bit provides the current status of the VCI_OVRD_IN pin.\n
				Note: The VCI_OVRD_IN bit defaults to the state of the respective input pin." mask="0x100"/>
          <bitfield name="VCI_OUT" caption="This bit provides the current status of the VCI_OUT pin." mask="0x200"/>
          <bitfield name="VCI_FW_CTRL" caption="This bit can allow EC firmware to control the state of the VCI_OUT pin. For example, when VTR_PWRGD is asserted and the\n
				FW_EXT bit is 1, clearing the VCI_FW_CNTRL bit de-asserts the active high VCI_OUT pin. BIOS must set this bit to 1 prior to setting\n
				the FW_EXT bit to 1 on power up, in order to avoid glitches on the VCI_OUT pin." mask="0x400"/>
          <bitfield name="FW_EXT" caption="This bit controls selecting between the external VBAT-Powered Control Interface inputs, or the VCI_FW_CNTRL bit output to control the VCI_OUT pin.\n
				1=VCI_OUT is determined by the VCI_FW_CNTRL field, when VTR is active\n
				0=VCI_OUT is determined by the external inputs.\n
				Note: This bit used to be called GPO/nEXT. The name was changed to distinguish it from the BGPOs, which are elsewhere, and to remove a / in a bit name." mask="0x800"/>
          <bitfield name="FLTRS_BYPASS" caption="The Filters Bypass bit is used to enable and disable the input filters on the VCI_IN# pins.\n
				1=Filters disabled; 0=Filters enabled (default)." mask="0x1000"/>
          <bitfield name="WK_ALRM" caption="If enabled by WEEK_ALRM_LE, this bit is set to 1 if the Week Alarm signal is asserted. It is reset by writes to WEEK_ALRM_LS." mask="0x10000"/>
          <bitfield name="RTC_ALRM" caption="If enabled by RTC_ALRM_LE, this bit is set to 1 if the RTC Alarm signal is asserted. It is reset by writes to RTC_ALRM_LS." mask="0x20000"/>
          <bitfield name="SYSPWR_PRES" caption="This is the System power present select bit.\n
			1= VCI_IN3 is used as System power present.\n
			0= VCI_IN3 is used as VCI_IN3.\n" mask="0x40000"/>
        </register>
        <register name="LATCH_EN" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Latch Enable Register">
          <bitfield name="LE" caption="Latching Enables. Latching occurs after the Polarity configuration, so a VCI_INi# pin is asserted when it is '0' if VCI_IN_POL is '0', and asserted when it is '1' if VCI_IN_POL is '1'.\n
				For each bit in the field:\n
				1=Enabled. Assertions of the VCI_INi# pin are held until the latch is reset by writing the corresponding LS bit\n
				0=Not Enabled. The VCI_INi# signal is not latched but passed directly to the VCI_OUT logic" mask="0xF"/>
          <bitfield name="WK_ALRM_LE" caption="Latch enable for the Week Alarm Power-Up signal.\n
				1=Enabled. Assertions of the Week Alarm are held until the latch is reset by writing the corresponding LS bit\n
				0=Not Enabled. The Week Alarm signal is not latched but passed directly to the VCI_OUT logic" mask="0x10000"/>
          <bitfield name="RTC_ALRM_LE" caption="Latch enable for the RTC Power-Up signal.\n
				1=Enabled. Assertions of the RTC Alarm are held until the latch is reset by writing the corresponding LS bit\n
				0=Not Enabled. The RTC Alarm signal is not latched but passed directly to the VCI_OUT logic" mask="0x20000"/>
        </register>
        <register name="LATCH_RST" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Latch Resets Register">
          <bitfield name="LS" caption="Latch Resets. When a Latch Resets bit is written with a '1', the corresponding VCI_INi# latch is de-asserted ('1'). The VCI_INi#\n
				input to the latch has priority over the Latch Reset input, so firmware cannot reset the latch while the VCI_INi# pin is asserted. Firmware\n
				should sample the state of the pin in the VCI Register before attempting to reset the latch. As noted in the Latch Enable Register,\n
				the assertion level is determined by the VCI_IN_POL bit. Reads of this register are undefined." mask="0xF"/>
          <bitfield name="WK_ALRM_LS" caption="Week Alarm Latch Reset. When this bit is written with a '1', the Week Alarm Event latch is reset.\n
				The Week Alarm input to the latch has priority over the Reset input Reads of this register are undefined." mask="0x10000"/>
          <bitfield name="RTC_ALRM_LS" caption="RTC Alarm Latch Reset. When this bit is written with a '1', the RTC Alarm Event latch is reset.\n
				The RTC Alarm input to the latch has priority over the Reset input Reads of this register are undefined." mask="0x20000"/>
        </register>
        <register name="INPUT_EN" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000007" caption="VCI Input Enable Register">
          <bitfield name="IE" caption="Input Enables for VCI_IN# signals. After changing the input enable for a VCI input, firmware should reset the input latch and clear\n
				any potential interrupt that may have been triggered by the input, as changing the enable may cause the internal status to change.\n
				For each bit in the field:\n
				1=Enabled. The corresponding VCI_IN# input is not gated and toggling the pin will affect the VCI_OUT pin\n
				0=Not Enabled. the corresponding VCI_IN# input does not affect the VCI_OUT pin, even if the input is '0'. Unless the corresponding bit\n
				in the VCI Buffer Enable Register is 1, latches are not asserted, even if the VCI_IN# pin is low, during a VBAT power transition" mask="0xF"/>
        </register>
        <register name="HLDOFF_CNT" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Holdoff Count Register">
          <bitfield name="TIME" caption="These bits determine the period of time the VCI_OUT logic is inhibited from re-asserting VCI_OUT after a SYS_SHDN# event.\n
				FFh-01h=The Power On Inhibit Holdoff Time is set to a period between 125ms and 31.875 seconds.\n
				0=The Power On Inhibit function is disabled." mask="0xFF"/>
        </register>
        <register name="POLARITY" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="VCI Polarity Register">
          <bitfield name="VCI_IN" caption="These bits determine the polarity of the VCI_IN input signals: For each bit in the field:\n
				1=Active High. The value on the pins is inverted before use\n
				0=Active Low (default)." mask="0xF"/>
        </register>
        <register name="PEDGE_DET" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00000000" caption="VCI Posedge Detect Register">
          <bitfield name="VCI_IN" caption="These bits record a low to high transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n
				1=Positive Edge Detected; 0=No edge detected." mask="0xF"/>
        </register>
        <register name="NEDGE_DET" offset="0x1C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="VCI Negedge Detect Register">
          <bitfield name="VCI_IN" caption="These bits record a high to low transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n
				1=Negative Edge Detected; 0=No edge detected." mask="0xF"/>
        </register>
        <register name="BUFFER_EN" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="VCI Buffer Enable Register">
          <bitfield name="V_BUF" caption="Input Buffer enable. After changing the buffer enable for a VCI input, firmware should reset the input latch and clear any\n
				potential interrupt that may have been triggered by the input, as changing the buffer may cause the internal status to change. This register\n
				has no effect when VTR is powered. When VTR is on, the input buffers are enabled only by the IE bit. For each bit in the field:\n
				1=VCI_IN# input buffer enabled independent of the IE bit. The edge detection latches for this input are always enabled\n
				0=VCI_IN# input buffer enabled by the IE bit. The edge detection latches are only enabled when the IE bit is 1 (default)." mask="0xF"/>
        </register>
      </register-group>
    </module>
    <module name="VBAT_RAM" id="93" version="1.0" caption="The VBAT RAM is operational while the main power rail is operational, and will retain its values powered by battery power while the main rail is unpowered.">
      <register-group name="VBAT_RAM" caption="The VBAT RAM is operational while the main power rail is operational, and will retain its values powered by battery power while the main rail is unpowered.">
        <register name="MEM" offset="0x0" rw="RW" size="4" access-size="4" count="16" initval="0x00000000" caption="32-bits of VBAT powered RAM.">
        </register>
      </register-group>
    </module>
    <module name="VBAT" id="94" version="1.0" caption="The VBAT Register Bank block is a block implemented for miscellaneous battery-backed registers">
      <register-group name="VBAT" caption="The VBAT Register Bank block is a block implemented for miscellaneous battery-backed registers">
        <register name="PFRS" offset="0x0" rw="RW" size="1" access-size="1" initval="0x80" caption="The Power-Fail and Reset Status Register collects and retains the VBAT RST and WDT event status when VCC1 is unpowered.">
          <bitfield name="SOFT" caption="This bit is set to '1b' if a was triggered by an assertion of the SOFT_SYS_RESET bit in the System Reset Register.\n
			  This bit is cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)" mask="0x4"/>
          <bitfield name="TEST" caption="Test" mask="0x8"/>
          <bitfield name="RSTI" caption="This bit is set to '1b' if a RESET_SYS was triggered by a low signal on the RESETI# input pin. This bit is\n
			  cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)" mask="0x10"/>
          <bitfield name="WDT_EVT" caption="This bit is set to '1b' if a RESET_SYS was triggered by a Watchdog Timer event. This bit is cleared to '0b' when\n
			  written with a '1b'; writes of a '0b' have no effect. (R/WC)" mask="0x20"/>
          <bitfield name="SYS_RSTREQ" caption="This bit is set to '1b' if a RESET_SYS was triggered by an ARM SYSRESETREQ event. This bit is cleared to '0b' when\n
			  written with a '1b'; writes of a '0b' have no effect. (R/WC)" mask="0x40"/>
          <bitfield name="VBAT_RST" caption="The VBAT RST bit is set to '1' by hardware when a RESET_VBAT is detected. This is the register default value.\n
			  To clear VBAT RST EC firmware must write a '1' to this bit; writing a '0' to VBAT RST has no affect.(R/WC)" mask="0x80"/>
        </register>
        <register name="CLK32_EN" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="CLOCK ENABLE">
          <bitfield name="EXT_32K" caption="This bit selects the source for the 32KHz clock domain.\n
			  1=The 32KHZ_IN VTR-powered pin is used as a source for the 32KHz clock domain. If an activity detector does not detect a\n
			  clock on the selected source, the always-on 32KHz internal clock source is automatically selected\n
			  0=The always-on32Khz clock source is used as the source for the 32KHz clock domain." mask="0x2"/>

        </register>
        <register name="SYS_SHDN" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="System Shutdown Enable register.\n">
          <bitfield name="DIS" caption="This bit controls the System Shutdown.\n
		      0 = Enable System Shutdown (SYS_SHDN#).\n
		      1 = Disable System Shutdown (SYS_SHDN#).\n" mask="0x1"/>
        </register>
        <register name="MCNT_LO" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="MONOTONIC COUNTER">
          <bitfield name="CNTR" caption="Read-only register that increments by 1 every time it is read. It is reset to 0 on a VBAT Power On Reset." mask="0xFFFFFFFF"/>
        </register>
        <register name="MCNT_HI" offset="0x24" rw="RW" size="4" access-size="4" initval="0x00000000" caption="COUNTER HIWORD">
          <bitfield name="CNTR" caption="Thirty-two bit read/write register. If software sets this register to an incrementing value, based on an external\n
			  non-volatile store, this register may be combined with the Monotonic Counter Register to form a 64-bit monotonic counter." mask="0xFFFFFFFF"/>
        </register>
        <register name="VWR_BCKP" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="VWIRE_BACKUP">
          <bitfield name="M2S_2H_BCKUP" caption="The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n
			  that corresponds to Virtual Wire Index 2h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n
			  edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic." mask="0xF"/>
          <bitfield name="M2S_42H_BCKUP" caption="The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n
			  that corresponds to Virtual Wire Index 42h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n
			  edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic." mask="0xF0"/>
        </register>
      </register-group>
    </module>
    <module name="EC_REG_BANK" id="95" version="1.0" caption="This block is designed to be accessed internally by the EC via the register interface.">
      <register-group name="EC_REG_BANK" caption="This block is designed to be accessed internally by the EC via the register interface.">
        <register name="AHB_ERR_ADDR" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="AHB Error Address [0:0] AHB_ERR_ADDR, In priority order:\n
    1. AHB address is registered when an AHB error occurs on the processor's AHB master port and the register value was\n
    already 0. This way only the first address to generate an exception is captured.\n
    2. The processor can clear this register by writing any 32-bit value to this register.">
        </register>
        <register name="AHB_ERR_CTRL" offset="0x14" rw="RW" size="1" access-size="1" initval="0x00" caption="AHB Error Control [0:0] AHB_ERROR_DISABLE, 0: EC memory exceptions are enabled. 1: EC memory exceptions are disabled.">
        </register>
        <register name="INTR_CTRL" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00000001" caption="Interrupt Control [0:0] NVIC_EN (NVIC_EN) This bit enables Alternate NVIC IRQ's Vectors. The Alternate NVIC Vectors provides each interrupt event with a dedicated (direct) NVIC vector.\n
           0 = Alternate NVIC vectors disabled, 1= Alternate NVIC vectors enabled">
        </register>
        <register name="ETM_CTRL" offset="0x1C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="ETM TRACE Enable [0:0] TRACE_EN (TRACE_EN) This bit enables the ARM TRACE debug port (ETM/ITM). The Trace Debug Interface pins are forced to the TRACE functions.
           0 = ARM TRACE port disabled, 1= ARM TRACE port enabled">
        </register>
        <register name="DEBUG_CTRL" offset="0x20" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Debug Enable Register">
          <bitfield name="EN" caption="DEBUG_EN (JTAG_EN) This bit enables the JTAG/SWD debug port.\n
              0= JTAG/SWD port disabled. JTAG/SWD cannot be enabled (i.e., the TRST# pin is ignored and the JTAG signals remain in their non-JTAG state)\n
              1= JTAG/SWD port enabled. A high on TRST# enables JTAG or SWD, as determined by SWD_EN." mask="0x1"/>
          <bitfield name="PIN_CFG" caption="This field determines which pins are affected by the TRST# debug enable pin.
			  3=Reserved
			  2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins
			  associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial
			  Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required
			  1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin
			  associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug
			  (SWD) and Serial Wire Viewer (SWV) are both required for debugging
			  0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.
			  This setting should be used when the JTAG TAP controller is required for debugging." mask="0x6" values="EC_REG_BANK_DEBUG_CTRL__PIN_CFG"/>
          <bitfield name="PU_EN" caption="If this bit is set to '1b' internal pull-up resistors are automatically enabled on the appropriate debugging port\n
			  wires whenever the debug port is enabled (the DEBUG_EN bit in this register is '1b' and the JTAG_RST# pin is high). The setting\n
			  of DEBUG_PIN_CFG determines which pins have pull-ups enabled when the debug port is enabled." mask="0x8"/>
          <bitfield name="BSP_EN" caption="This bit sets the boundary scan tap controller accessibility from JTAG port.\n
		      1= Boundary scan tap controller accessibile through JTAG Port.\n
		      0= Boundary scan tap controller not accessibile through JTAG Port.\n" mask="0x10"/>
        </register>
        <register name="OTP_LOCK" offset="0x24" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Lock Register">
          <bitfield name="TEST" caption="Test" mask="0x1"/>
          <bitfield name="VBAT_RAM_LOCK" caption="VBAT RAM LOCK bit.\n
		      0 = Not Locked.\n
		      1 = Locked.\n" mask="0x2"/>
          <bitfield name="VBAT_REG_LOCK" caption="VBAT REG LOCK.\n
		      0 = Not Locked.\n
		      1 = Locked.\n" mask="0x4"/>
        </register>
        <register name="WDT_CNT" offset="0x28" rw="RW" size="4" access-size="4" initval="0x00000000" caption="WDT Event Count [3:0] WDT_COUNT (WDT_COUNT) These EC R/W bits are cleared to 0 on VCC1 POR, but not on a WDT.\n
           Note: This field is written by Boot ROM firmware to indicate the number of times a WDT fired before loading a good EC code image.">
        </register>
        <register name="AESH_BSWAP_CTRL" offset="0x2C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="AES HASH Byte Swap Control Register.">
          <bitfield name="IP_BYTE_SWAP_EN" caption="Used to enable byte swap on a DWORD during AHB read from AES / HASH block: 1=Enable; 0=Disable." mask="0x1"/>
          <bitfield name="OP_BYTE_SWAP_EN" caption="Used to enable byte swap on a DWORD during AHB write from AES / HASH block: 1=Enable; 0=Disable." mask="0x2"/>
          <bitfield name="IP_BLK_SWAP_EN" caption="Used to enable word swap on a DWORD during AHB read from AES / HASH block
			  4=Swap 32-bit doublewords in 128-byte blocks
			  3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,
			  0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...
			  2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...
			  1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,
			  0x0, 0xC, 0x8, ...
			  0=Disable." mask="0x1C" values="EC_REG_BANK_AESH_BSWAP_CTRL__IP_BLK_SWAP_EN"/>
          <bitfield name="OP_BLK_SWAP_EN" caption="Used to enable word swap on a DWORD during AHB write from AES / HASH block
			  4=Swap 32-bit doublewords in 128-byte blocks
			  3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,
			  0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...
			  2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...
			  1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,
			  0x0, 0xC, 0x8, ...
			  0=Disable." mask="0xE0" values="EC_REG_BANK_AESH_BSWAP_CTRL__OP_BLK_SWAP_EN"/>
        </register>
        <register name="PECI_DIS" offset="0x40" rw="RW" size="4" access-size="4" initval="0x00000000" caption="PECI Disable">
          <bitfield name="P_DIS" caption="When this bit is asserted ('1'), it disables the PECI pads to reduce leakage." mask="0x1"/>
        </register>
        <register name="STAP_TMIR" offset="0x4C" rw="R" size="4" access-size="4" initval="0x00000000" caption="This register is a mirror of the Boot Control Register.\n">
          <bitfield name="QA_MODE" caption="This is the mirror of the QA_MODE (bit 0) of Boot Control Register.\n
		      This register bit tells BOOT ROM to enter the QA mode.\n" mask="0x1"/>
          <bitfield name="VLD_MODE" caption="This is the mirror of the Validation MODE (bit 1) of Boot Control Register.\n
		      This register bit tells BOOT ROM to enter the Validation mode.\n" mask="0x2"/>
          <bitfield name="BS_STATUS" caption="This register bit tells BOOT ROM about the Boundary Scan Status.\n" mask="0x4"/>
          <bitfield name="INT_SPI_RECOV" caption="This register bit tells BOOT ROM that SPI FLASH Recovery Mode is entered.\n" mask="0x8"/>
        </register>
        <register name="BROM_STS" offset="0x54" rw="RW" size="1" access-size="1" initval="0x01" caption="This register contains the VTR Reset Status for BOOT ROM.\n">
          <bitfield name="VTR_RST_STS" caption="This bit contains the RESET_SYS Status for BOOT ROM usage.\n
		      1= RESET_SYS event occured.\n
		      0= RESET_SYS event did not occured.\n
		      This registe is R/W1C (read / write 1 to clear)." mask="0x1"/>
          <bitfield name="WDT_EVT" caption="This bit contains the WDT Event Status for BOOT ROM usage.\n
		      1= WDT event occured.\n
		      0= WDT event did not occured.\n
		      This registe is R/W1C (read / write 1 to clear)." mask="0x2"/>
        </register>
        <register name="CRYPTO_SRST" offset="0x5C" rw="RW" size="4" access-size="4" atomic-op="set:CRYPTO_SOFT_RESET" initval="0x00000000" caption="System Shutdown Reset">
          <bitfield name="RNG" caption="When this bit is asserted ('1'), the Random Number Generator block is reset." mask="0x1"/>
          <bitfield name="PUB_KEY" caption="When this bit is asserted ('1'), the Public Key block is reset." mask="0x2"/>
          <bitfield name="AES_HASH" caption="When this bit is asserted ('1'), the AES and Hash blocks are reset." mask="0x4"/>
        </register>
        <register name="GPIO_BANK_PWR" offset="0x64" rw="RW" size="4" access-size="4" initval="0x00000000" caption="GPIO Bank Power Register">
          <bitfield name="TEST" caption="This bit must be programmed to 0h for proper operation of the device.\n" mask="0x1"/>
          <bitfield name="VTR_LVL2" caption="Voltage value on VTR2. This bit is set by Firmware after a VTR Power On Reset.\n
		      It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted.\n
		      Write access is determined by bit 7.\n
			  1=VTR2 is powered by 1.8V\n
			  0=VTR2 is powered by 3.3V." mask="0x2"/>
          <bitfield name="VTR_LVL3" caption="Voltage value on VTR3. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n
			  It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n
			  1=VTR3 is powered by 1.8V\n
			  0=VTR3 is powered by 3.3V." mask="0x4"/>
          <bitfield name="GPIO_BANK_PWR_LOCK" caption="GPIO Bank Power Lock. 0: VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are R/W\n
			  1 = VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are Read Only." mask="0x80"/>
        </register>
        <register name="JTAG_MCFG" offset="0x70" rw="RW" size="4" access-size="4" initval="0x00000000" caption="JTAG Master Configuration Register">
          <bitfield name="JTM_CLK" caption="This field determines the JTAG Master clock rate, derived from the 48MHz master clock.
			  7=375KHz; 6=750KHz; 5=1.5Mhz; 4=3Mhz; 3=6Mhz; 2=12Mhz; 1=24MHz; 0=Reserved." mask="0x7" values="EC_REG_BANK_JTAG_MCFG__JTM_CLK"/>
          <bitfield name="MAS_SLV" caption="This bit controls the direction of the JTAG port. 1=The JTAG Port is configured as a Master\n
			  0=The JTAG Port is configures as a Slave." mask="0x8"/>
        </register>
        <register name="JTAG_MSTS" offset="0x74" rw="R" size="4" access-size="4" initval="0x00000000" caption="JTAG Master Status Register">
          <bitfield name="JTM_DONE" caption="This bit is set to '1b' when the JTAG Master Command Register is written. It becomes '0b' when shifting has completed.\n
			  Software can poll this bit to determine when a command has completed and it is therefore safe to remove the data in the JTAG Master TDO\n
			  Register and load new data into the JTAG Master TMS Register and the JTAG Master TDI Register." mask="0x1"/>
        </register>
        <register name="JTAG_MTDO" offset="0x78" rw="RW" size="4" access-size="4" initval="0x00000000" caption="JTAG Master TDO Register">
          <bitfield name="JTM_TDO" caption="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted into this register, starting with bit 0,\n
			  from the JTAG_TDO pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="JTAG_MTDI" offset="0x7C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="JTAG Master TDI Register">
          <bitfield name="JTM_TDI" caption="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n
			  onto the JTAG_TDI pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="JTAG_MTMS" offset="0x80" rw="RW" size="4" access-size="4" initval="0x00000000" caption="JTAG Master TMS Register">
          <bitfield name="JTM_TMS" caption="When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n
			  onto the JTAG_TMS pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="JTAG_MCMD" offset="0x84" rw="RW" size="4" access-size="4" initval="0x00000000" caption="JTAG Master Command Register">
          <bitfield name="JTM_COUNT" caption="If the JTAG Port is configured as a Master, writing this register starts clocking and shifting on the JTAG port. The JTAG\n
			  Master port will shift JTM_COUNT+1 times, so writing a '0h' will shift 1 bit, and writing '31h' will shift 32 bits. The signal JTAG_CLK\n
			  will cycle JTM_COUNT+1 times. The contents of the JTAG Master TMS Register and the JTAG Master TDI Register will be shifted out on\n
			  the falling edge of JTAG_CLK and the.JTAG Master TDO Register will get shifted in on the rising edge of JTAG_CLK.\n
			  If the JTAG Port is configured as a Slave, writing this register has no effect." mask="0x1F"/>
        </register>
        <register name="FW_SCR0" offset="0x180" rw="RW" size="4" access-size="4" initval="0x00000000" caption="BOOT ROM Scratch 0 Register">
          <bitfield name="SCR0" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="FW_SCR1" offset="0x184" rw="RW" size="4" access-size="4" initval="0x00000000" caption="BOOT ROM Scratch 1 Register">
          <bitfield name="SCR1" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="FW_SCR2" offset="0x188" rw="RW" size="4" access-size="4" initval="0x00000000" caption="BOOT ROM Scratch 2 Register">
          <bitfield name="SCR2" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="FW_SCR3" offset="0x18C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="BOOT ROM Scratch 3 Register">
          <bitfield name="SCR3" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
      </register-group>
      <value-group caption="" name="EC_REG_BANK_DEBUG_CTRL__PIN_CFG">
        <value caption="2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins\n           associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial\n          Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required " name="JTAG_TCK_TMS" value="0x2"/>
        <value caption="1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin\n           associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug\n             (SWD) and Serial Wire Viewer (SWV) are both required for debugging" name="JTAG_TCK_TMS_TDO" value="0x1"/>
        <value caption="0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.\n         This setting should be used when the JTAG TAP controller is required for debugging." name="JTAG_TCK_TMS_TDO_TDI" value="0x0"/>
      </value-group>
      <value-group caption="" name="EC_REG_BANK_AESH_BSWAP_CTRL__IP_BLK_SWAP_EN">
        <value caption="4=Swap 32-bit doublewords in 128-byte blocks " name="SWAP_128_BYTE_BLOCK" value="0x4"/>
        <value caption="3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,..." name="SWAP_64_BYTE_BLOCK" value="0x3"/>
        <value caption="2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,..." name="SWAP_16_BYTE_BLOCK" value="0x2"/>
        <value caption="1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n" name="SWAP_8_BYTE_BLOCK" value="0x1"/>
        <value caption="0=Disable." name="DIS" value="0x0"/>
      </value-group>
      <value-group caption="" name="EC_REG_BANK_AESH_BSWAP_CTRL__OP_BLK_SWAP_EN">
        <value caption="4=Swap 32-bit doublewords in 128-byte blocks " name="SWAP_128_BYTE_BLOCK" value="0x4"/>
        <value caption="3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,..." name="SWAP_64_BYTE_BLOCK" value="0x3"/>
        <value caption="2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,..." name="SWAP_16_BYTE_BLOCK" value="0x2"/>
        <value caption="1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n" name="SWAP_8_BYTE_BLOCK" value="0x1"/>
        <value caption="0=Disable." name="DIS" value="0x0"/>
      </value-group>
      <value-group caption="" name="EC_REG_BANK_JTAG_MCFG__JTM_CLK">
        <value caption="7=375KHz" name="JTM_CLK_375KHz" value="0x7"/>
        <value caption="6=750KHz" name="JTM_CLK_750KHz" value="0x6"/>
        <value caption="5=1.5Mhz" name="JTM_CLK_1MHz" value="0x5"/>
        <value caption="4=3Mhz" name="JTM_CLK_3Mhz" value="0x4"/>
        <value caption="3=6Mhz" name="JTM_CLK_6Mhz" value="0x3"/>
        <value caption="2=12Mhz" name="JTM_CLK_12Mhz" value="0x2"/>
        <value caption="1=24MHz" name="JTM_CLK_24MHz" value="0x1"/>
      </value-group>
    </module>
    <module name="ESPI_SCRATCH" id="40" version="1.0" caption="32 Byte ESPI Test Register">
      <register-group name="ESPI_SCRATCH" caption="32 Byte ESPI Test Register">
        <register name="SCRATCH0" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 0 Register">
          <bitfield name="SCR0" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH1" offset="0x4" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 1 Register">
          <bitfield name="SCR1" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH2" offset="0x8" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 2 Register">
          <bitfield name="SCR2" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH3" offset="0xC" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 3 Register">
          <bitfield name="SCR3" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH4" offset="0x10" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 4 Register">
          <bitfield name="SCR4" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH5" offset="0x14" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 5 Register">
          <bitfield name="SCR5" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH6" offset="0x18" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 6 Register">
          <bitfield name="SCR6" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
        <register name="SCRATCH7" offset="0x1C" rw="RW" size="4" access-size="4" initval="0x00000000" caption="Scratch 7 Register">
          <bitfield name="SCR7" caption="This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register." mask="0xFFFFFFFF"/>
        </register>
      </register-group>
    </module>
    <module name="OTP" id="96" version="1.0" caption="OTP Programming registers.\n">
      <register-group name="OTP" caption="OTP Programming registers.\n">
      </register-group>
    </module>
    <module name="NVIC" version="1.0.0" caption="Nested Vectored Interrupt Controller">
      <register-group name="NVIC" caption="Nested Vectored Interrupt Controller">
        <register name="ISER" offset="0x0" rw="RW" size="4" access-size="4" count="1" initval="0" caption="Interrupt Set Enable Register">
          <bitfield name="SETENA" caption="Interrupt set enable bits" mask="0xFFFFFFFF"/>
        </register>
        <register name="ICER" offset="0x80" rw="RW" size="4" access-size="4" count="1" initval="0" caption="Interrupt Clear Enable Register">
          <bitfield name="CLRENA" caption="Interrupt clear-enable bits" mask="0xFFFFFFFF"/>
        </register>
        <register name="ISPR" offset="0x100" rw="RW" size="4" access-size="4" count="1" initval="0" caption="Interrupt Set Pending Register">
          <bitfield name="SETPEND" caption="Interrupt set-pending bits" mask="0xFFFFFFFF"/>
        </register>
        <register name="ICPR" offset="0x180" rw="RW" size="4" access-size="4" count="1" initval="0" caption="Interrupt Clear Pending Register">
          <bitfield name="CLRPEND" caption="Interrupt clear-pending bits" mask="0xFFFFFFFF"/>
        </register>
        <register name="IABR" offset="0x200" rw="RW" size="4" access-size="4" count="1" initval="0" caption="Interrupt Active Bit Register">
          <bitfield name="ACTIVE" caption="Interrupt active bits" mask="0xFFFFFFFF"/>
        </register>
        <register name="IP" offset="0x300" rw="RW" size="1" access-size="1" count="8" initval="0" caption="Interrupt Priority Register n">
          <bitfield name="PRI0" caption="Priority of interrupt n" mask="0x7"/>
        </register>
        <register name="STIR" offset="0xE00" rw="W" size="4" access-size="4" caption="Software Trigger Interrupt Register">
          <bitfield name="INTID" caption="Interrupt ID to trigger" mask="0x1FF"/>
        </register>
      </register-group>
    </module>
    <module name="SysTick" version="1.0.0" caption="System timer">
      <register-group name="SysTick" caption="System timer">
        <register name="CSR" offset="0x0" rw="RW" size="4" access-size="4" initval="0x00000000" caption="SysTick Control and Status Register">
          <bitfield name="ENABLE" caption="SysTick Counter Enable" mask="0x1" values="SysTick_CSR__ENABLE"/>
          <bitfield name="TICKINT" caption="SysTick Exception Request Enable" mask="0x2" values="SysTick_CSR__TICKINT"/>
          <bitfield name="CLKSOURCE" caption="Clock Source 0=external, 1=processor" mask="0x4" values="SysTick_CSR__CLKSOURCE"/>
          <bitfield name="COUNTFLAG" caption="Timer counted to 0 since last read of register" mask="0x10000"/>
        </register>
        <register name="RVR" offset="0x4" rw="RW" size="4" access-size="4" caption="SysTick Reload Value Register">
          <bitfield name="RELOAD" caption="Value to load into the SysTick Current Value Register when the counter reaches 0" mask="0xFFFFFF"/>
        </register>
        <register name="CVR" offset="0x8" rw="RW" size="4" access-size="4" caption="SysTick Current Value Register">
          <bitfield name="CURRENT" caption="Current value at the time the register is accessed" mask="0xFFFFFF"/>
        </register>
        <register name="CALIB" offset="0xC" rw="R" size="4" access-size="4" initval="0" caption="SysTick Calibration Value Register">
          <bitfield name="TENMS" caption="Reload value to use for 10ms timing" mask="0xFFFFFF"/>
          <bitfield name="SKEW" caption="TENMS is rounded from non-integer ratio" mask="0x40000000" values="SysTick_CALIB__SKEW"/>
          <bitfield name="NOREF" caption="No Separate Reference Clock" mask="0x80000000" values="SysTick_CALIB__NOREF"/>
        </register>
      </register-group>
      <value-group name="SysTick_CSR__CLKSOURCE">
        <value name="VALUE_0" caption="External clock" value="0"/>
        <value name="VALUE_1" caption="Processor clock" value="1"/>
      </value-group>
      <value-group name="SysTick_CSR__ENABLE">
        <value name="VALUE_0" caption="Counter disabled" value="0"/>
        <value name="VALUE_1" caption="Counter enabled" value="1"/>
      </value-group>
      <value-group name="SysTick_CSR__TICKINT">
        <value name="VALUE_0" caption="Counting down to 0 does not assert the SysTick exception request" value="0"/>
        <value name="VALUE_1" caption="Counting down to 0 asserts the SysTick exception request" value="1"/>
      </value-group>
      <value-group name="SysTick_CALIB__NOREF">
        <value name="VALUE_0" caption="The reference clock is provided" value="0"/>
        <value name="VALUE_1" caption="The reference clock is not provided" value="1"/>
      </value-group>
      <value-group name="SysTick_CALIB__SKEW">
        <value name="VALUE_0" caption="10ms calibration value is exact" value="0"/>
        <value name="VALUE_1" caption="10ms calibration value is inexact, because of the clock frequency" value="1"/>
      </value-group>
    </module>
    <module name="SystemControl" version="1.0.0" caption="System Control Registers">
      <register-group name="SystemControl" caption="System Control Registers">
        <register name="ICTR" offset="0x4" rw="R" size="4" access-size="4" caption="Interrupt Controller Type Register">
          <bitfield name="INTLINESNUM" caption="" mask="0xF"/>
        </register>
        <register name="ACTLR" offset="0x8" rw="RW" size="4" access-size="4" caption="Auxiliary Control Register">
          <bitfield name="DISMCYCINT" caption="Disable interruption of LDM/STM instructions" mask="0x1"/>
          <bitfield name="DISDEFWBUF" caption="Disable wruite buffer use during default memory map accesses" mask="0x2"/>
          <bitfield name="DISFOLD" caption="Disable IT folding" mask="0x4"/>
          <bitfield name="DISFPCA" caption="Disable automatic update of CONTROL.FPCA" mask="0x100"/>
          <bitfield name="DISOOFP" caption="Disable out-of-order FP instructions" mask="0x200"/>
        </register>
        <register name="CPUID" offset="0xD00" rw="R" size="4" access-size="4" initval="0x410FC241" caption="CPUID Base Register">
          <bitfield name="REVISION" caption="Processor revision number" mask="0xF"/>
          <bitfield name="PARTNO" caption="Process Part Number, 0xC24=Cortex-M4" mask="0xFFF0"/>
          <bitfield name="CONSTANT" caption="Constant" mask="0xF0000"/>
          <bitfield name="VARIANT" caption="Variant number" mask="0xF00000"/>
          <bitfield name="IMPLEMENTER" caption="Implementer code, 0x41=ARM" mask="0xFF000000"/>
        </register>
        <register name="ICSR" offset="0xD04" rw="RW" size="4" access-size="4" initval="0" caption="Interrupt Control and State Register">
          <bitfield name="VECTACTIVE" caption="Active exception number" mask="0x1FF"/>
          <bitfield name="RETTOBASE" caption="No preempted active exceptions to execute" mask="0x800"/>
          <bitfield name="VECTPENDING" caption="Exception number of the highest priority pending enabled exception" mask="0x3F000"/>
          <bitfield name="ISRPENDING" caption="Interrupt pending flag" mask="0x400000"/>
          <bitfield name="ISRPREEMPT" caption="Debug only" mask="0x800000"/>
          <bitfield name="PENDSTCLR" caption="SysTick clear-pending bit" mask="0x2000000" values="SystemControl_ICSR__PENDSTCLR"/>
          <bitfield name="PENDSTSET" caption="SysTick set-pending bit" mask="0x4000000" values="SystemControl_ICSR__PENDSTSET"/>
          <bitfield name="PENDSVCLR" caption="PendSV clear-pending bit" mask="0x8000000" values="SystemControl_ICSR__PENDSVCLR"/>
          <bitfield name="PENDSVSET" caption="PendSV set-pending bit" mask="0x10000000" values="SystemControl_ICSR__PENDSVSET"/>
          <bitfield name="NMIPENDSET" caption="NMI set-pending bit" mask="0x80000000" values="SystemControl_ICSR__NMIPENDSET"/>
        </register>
        <register name="AIRCR" offset="0xD0C" rw="RW" size="4" access-size="4" initval="0xFA050000" caption="Application Interrupt and Reset Control Register">
          <bitfield name="VECTRESET" caption="Must write 0" mask="0x1"/>
          <bitfield name="VECTCLRACTIVE" caption="Must write 0" mask="0x2"/>
          <bitfield name="SYSRESETREQ" caption="System Reset Request" mask="0x4" values="SystemControl_AIRCR__SYSRESETREQ"/>
          <bitfield name="PRIGROUP" caption="Interrupt priority grouping" mask="0x700"/>
          <bitfield name="ENDIANNESS" caption="Data endianness, 0=little, 1=big" mask="0x8000" values="SystemControl_AIRCR__ENDIANNESS"/>
          <bitfield name="VECTKEY" caption="Register key" mask="0xFFFF0000"/>
        </register>
        <register name="SCR" offset="0xD10" rw="RW" size="4" access-size="4" initval="0" caption="System Control Register">
          <bitfield name="SLEEPONEXIT" caption="Sleep-on-exit on handler return" mask="0x2" values="SystemControl_SCR__SLEEPONEXIT"/>
          <bitfield name="SLEEPDEEP" caption="Deep Sleep used as low power mode" mask="0x4" values="SystemControl_SCR__SLEEPDEEP"/>
          <bitfield name="SEVONPEND" caption="Send Event on Pending bit" mask="0x10" values="SystemControl_SCR__SEVONPEND"/>
        </register>
        <register name="CCR" offset="0xD14" rw="RW" size="4" access-size="4" initval="0x00000200" caption="Configuration and Control Register">
          <bitfield name="NONBASETHRDENA" caption="Indicates how processor enters Thread mode" mask="0x1"/>
          <bitfield name="USERSETMPEND" caption="Enables unprivileged software access to STIR register" mask="0x2"/>
          <bitfield name="UNALIGN_TRP" caption="Enables unaligned access traps" mask="0x8" values="SystemControl_CCR__UNALIGN_TRP"/>
          <bitfield name="DIV_0_TRP" caption="Enables divide by 0 trap" mask="0x10"/>
          <bitfield name="BFHFNMIGN" caption="Ignore LDM/STM BusFault for -1/-2 priority handlers" mask="0x100"/>
          <bitfield name="STKALIGN" caption="Indicates stack alignment on exception entry" mask="0x200" values="SystemControl_CCR__STKALIGN"/>
        </register>
        <register name="SHPR1" offset="0xD18" rw="RW" size="4" access-size="4" caption="System Handler Priority Register 1">
          <bitfield name="PRI_4" caption="Priority of system handler 4, MemManage" mask="0xFF"/>
          <bitfield name="PRI_5" caption="Priority of system handler 5, BusFault" mask="0xFF00"/>
          <bitfield name="PRI_6" caption="Priority of system handler 6, UsageFault" mask="0xFF0000"/>
        </register>
        <register name="SHPR2" offset="0xD1C" rw="RW" size="4" access-size="4" initval="0" caption="System Handler Priority Register 2">
          <bitfield name="PRI_11" caption="Priority of system handler 11, SVCall" mask="0xFF000000"/>
        </register>
        <register name="SHPR3" offset="0xD20" rw="RW" size="4" access-size="4" initval="0" caption="System Handler Priority Register 3">
          <bitfield name="PRI_14" caption="Priority of system handler 14, PendSV" mask="0xFF0000"/>
          <bitfield name="PRI_15" caption="Priority of system handler 15, SysTick exception" mask="0xFF000000"/>
        </register>
        <register name="SHCSR" offset="0xD24" rw="RW" size="4" access-size="4" caption="System Handler Control and State Register">
          <bitfield name="MEMFAULTACT" caption="MemManage exception active bit" mask="0x1"/>
          <bitfield name="BUSFAULTACT" caption="BusFault exception active bit" mask="0x2"/>
          <bitfield name="USGFAULTACT" caption="UsageFault exception active bit" mask="0x8"/>
          <bitfield name="SVCALLACT" caption="SVCall active bit" mask="0x80"/>
          <bitfield name="MONITORACT" caption="DebugMonitor exception active bit" mask="0x100"/>
          <bitfield name="PENDSVACT" caption="PendSV exception active bit" mask="0x400"/>
          <bitfield name="SYSTICKACT" caption="SysTick exception active bit" mask="0x800"/>
          <bitfield name="USGFAULTPENDED" caption="UsageFault exception pending bit" mask="0x1000"/>
          <bitfield name="MEMFAULTPENDED" caption="MemManage exception pending bit" mask="0x2000"/>
          <bitfield name="BUSFAULTPENDED" caption="BusFault exception pending bit" mask="0x4000"/>
          <bitfield name="SVCALLPENDED" caption="SVCall pending bit" mask="0x8000"/>
          <bitfield name="MEMFAULTENA" caption="MemManage enable bit" mask="0x10000"/>
          <bitfield name="BUSFAULTENA" caption="BusFault enable bit" mask="0x20000"/>
          <bitfield name="USGFAULTENA" caption="UsageFault enable bit" mask="0x40000"/>
        </register>
        <register name="CFSR" offset="0xD28" rw="RW" size="4" access-size="4" caption="Configurable Fault Status Register">
          <bitfield name="IACCVIOL" caption="Instruction access violation" mask="0x1"/>
          <bitfield name="DACCVIOL" caption="Data access violation" mask="0x2"/>
          <bitfield name="MUNSTKERR" caption="MemManage Fault on unstacking for exception return" mask="0x8"/>
          <bitfield name="MSTKERR" caption="MemManage Fault on stacking for exception entry" mask="0x10"/>
          <bitfield name="MLSPERR" caption="MemManager Fault occured during FP lazy state preservation" mask="0x20"/>
          <bitfield name="MMARVALID" caption="MemManage Fault Address Register valid" mask="0x80"/>
          <bitfield name="IBUSERR" caption="Instruction bus error" mask="0x100"/>
          <bitfield name="PRECISERR" caption="Precise data bus error" mask="0x200"/>
          <bitfield name="IMPRECISERR" caption="Imprecise data bus error" mask="0x400"/>
          <bitfield name="UNSTKERR" caption="BusFault on unstacking for exception return" mask="0x800"/>
          <bitfield name="STKERR" caption="BusFault on stacking for exception entry" mask="0x1000"/>
          <bitfield name="LSPERR" caption="BusFault occured during FP lazy state preservation" mask="0x2000"/>
          <bitfield name="BFARVALID" caption="BusFault Address Register valid" mask="0x8000"/>
          <bitfield name="UNDEFINSTR" caption="Undefined instruction UsageFault" mask="0x10000"/>
          <bitfield name="INVSTATE" caption="Invalid state UsageFault" mask="0x20000"/>
          <bitfield name="INVPC" caption="Invalid PC load UsageFault" mask="0x40000"/>
          <bitfield name="NOCP" caption="No coprocessor UsageFault" mask="0x80000"/>
          <bitfield name="UNALIGNED" caption="Unaligned access UsageFault" mask="0x1000000"/>
          <bitfield name="DIVBYZERO" caption="Divide by zero UsageFault" mask="0x2000000"/>
        </register>
        <register name="HFSR" offset="0xD2C" rw="RW" size="4" access-size="4" caption="HardFault Status Register">
          <bitfield name="VECTTBL" caption="BusFault on a Vector Table read during exception processing" mask="0x2"/>
          <bitfield name="FORCED" caption="Forced Hard Fault" mask="0x40000000"/>
          <bitfield name="DEBUGEVT" caption="Debug: always write 0" mask="0x80000000"/>
        </register>
        <register name="DFSR" offset="0xD30" rw="RW" size="4" access-size="4" caption="Debug Fault Status Register">
          <bitfield name="HALTED" caption="" mask="0x1"/>
          <bitfield name="BKPT" caption="" mask="0x2"/>
          <bitfield name="DWTTRAP" caption="" mask="0x4"/>
          <bitfield name="VCATCH" caption="" mask="0x8"/>
          <bitfield name="EXTERNAL" caption="" mask="0x10"/>
        </register>
        <register name="MMFAR" offset="0xD34" rw="RW" size="4" access-size="4" caption="MemManage Fault Address Register">
          <bitfield name="ADDRESS" caption="Address that generated the MemManage fault" mask="0xFFFFFFFF"/>
        </register>
        <register name="BFAR" offset="0xD38" rw="RW" size="4" access-size="4" caption="BusFault Address Register">
          <bitfield name="ADDRESS" caption="Address that generated the BusFault" mask="0xFFFFFFFF"/>
        </register>
        <register name="AFSR" offset="0xD3C" rw="RW" size="4" access-size="4" caption="Auxiliary Fault Status Register">
          <bitfield name="IMPDEF" caption="AUXFAULT input signals" mask="0xFFFFFFFF"/>
        </register>
        <register name="PFR" offset="0xD40" rw="RW" size="4" access-size="4" count="2" caption="Processor Feature Register">
        </register>
        <register name="DFR" offset="0xD48" rw="R" size="4" access-size="4" caption="Debug Feature Register">
        </register>
        <register name="ADR" offset="0xD4C" rw="R" size="4" access-size="4" caption="Auxiliary Feature Register">
        </register>
        <register name="MMFR" offset="0xD50" rw="R" size="4" access-size="4" count="4" caption="Memory Model Feature Register">
        </register>
        <register name="ISAR" offset="0xD60" rw="R" size="4" access-size="4" count="5" caption="Instruction Set Attributes Register">
        </register>
        <register name="CPACR" offset="0xD88" rw="RW" size="4" access-size="4" caption="Coprocessor Access Control Register">
          <bitfield name="CP10" caption="Access privileges for coprocessor 10" mask="0x300000" values="SystemControl_CPACR__CP10"/>
          <bitfield name="CP11" caption="Access privileges for coprocessor 11" mask="0xC00000" values="SystemControl_CPACR__CP11"/>
        </register>
      </register-group>
      <value-group name="SystemControl_ICSR__NMIPENDSET">
        <value name="VALUE_0" caption="Write: no effect; read: NMI exception is not pending" value="0"/>
        <value name="VALUE_1" caption="Write: changes NMI exception state to pending; read: NMI exception is pending" value="1"/>
      </value-group>
      <value-group name="SystemControl_ICSR__PENDSTCLR">
        <value name="VALUE_0" caption="No effect" value="0"/>
        <value name="VALUE_1" caption="Removes the pending state from the SysTick exception" value="1"/>
      </value-group>
      <value-group name="SystemControl_ICSR__PENDSTSET">
        <value name="VALUE_0" caption="Write: no effect; read: SysTick exception is not pending" value="0"/>
        <value name="VALUE_1" caption="Write: changes SysTick exception state to pending; read: SysTick exception is pending" value="1"/>
      </value-group>
      <value-group name="SystemControl_ICSR__PENDSVCLR">
        <value name="VALUE_0" caption="No effect" value="0"/>
        <value name="VALUE_1" caption="Removes the pending state from the PendSV exception" value="1"/>
      </value-group>
      <value-group name="SystemControl_ICSR__PENDSVSET">
        <value name="VALUE_0" caption="Write: no effect; read: PendSV exception is not pending" value="0"/>
        <value name="VALUE_1" caption="Write: changes PendSV exception state to pending; read: PendSV exception is pending" value="1"/>
      </value-group>
      <value-group name="SystemControl_AIRCR__ENDIANNESS">
        <value name="VALUE_0" caption="Little-endian" value="0"/>
        <value name="VALUE_1" caption="Big-endian" value="1"/>
      </value-group>
      <value-group name="SystemControl_AIRCR__SYSRESETREQ">
        <value name="VALUE_0" caption="No system reset request" value="0"/>
        <value name="VALUE_1" caption="Asserts a signal to the outer system that requests a reset" value="1"/>
      </value-group>
      <value-group name="SystemControl_SCR__SEVONPEND">
        <value name="VALUE_0" caption="Only enabled interrupts or events can wakeup the processor, disabled interrupts are excluded" value="0"/>
        <value name="VALUE_1" caption="Enabled events and all interrupts, including disabled interrupts, can wakeup the processor" value="1"/>
      </value-group>
      <value-group name="SystemControl_SCR__SLEEPDEEP">
        <value name="VALUE_0" caption="Sleep" value="0"/>
        <value name="VALUE_1" caption="Deep sleep" value="1"/>
      </value-group>
      <value-group name="SystemControl_SCR__SLEEPONEXIT">
        <value name="VALUE_0" caption="Do not sleep when returning to Thread mode" value="0"/>
        <value name="VALUE_1" caption="Enter sleep, or deep sleep, on return from an ISR" value="1"/>
      </value-group>
      <value-group name="SystemControl_CCR__STKALIGN">
        <value name="VALUE_0" caption="4-byte aligned" value="0"/>
        <value name="VALUE_1" caption="8-byte aligned" value="1"/>
      </value-group>
      <value-group name="SystemControl_CCR__UNALIGN_TRP">
        <value name="VALUE_0" caption="Do not trap unaligned halfword and word accesses" value="0"/>
        <value name="VALUE_1" caption="Trap unaligned halfword and word accesses" value="1"/>
      </value-group>
      <value-group name="SystemControl_CPACR__CP10">
        <value name="DENIED" caption="Access denied" value="0x0"/>
        <value name="PRIV" caption="Privileged access only" value="0x1"/>
        <value name="FULL" caption="Full access" value="0x3"/>
      </value-group>
      <value-group name="SystemControl_CPACR__CP11">
        <value name="DENIED" caption="Access denied" value="0x0"/>
        <value name="PRIV" caption="Privileged access only" value="0x1"/>
        <value name="FULL" caption="Full access" value="0x3"/>
      </value-group>
    </module>
    <module name="CRYPTO" version="1.0.0" caption="Crypto block interrupt">
    </module>
  </modules>
    <pinouts>
 


 



   <pinout name="CEC1712H_B2_SX" caption="CEC1712H_B2_SX">
	   <pin position="D2"  pad="nRESET_IN"/>
	   <pin position="F3"  pad="GPIO057"/>
	   <pin position="E2"  pad="GPIO106"/>
	   <pin position="B2"  pad="GPIO051"/>
	   <pin position="A3"  pad="GPIO050"/>
	   <pin position="F2"  pad="GPIO200"/>
	   <pin position="G2"  pad="GPIO201"/>
	   <pin position="H2"  pad="GPIO202"/>
	   <pin position="G1"  pad="GPIO203"/>
	   <pin position="H1"  pad="GPIO204"/>
	   <pin position="D1"  pad="GPIO065"/>
	   <pin position="J8"  pad="GPIO070"/>
	   <pin position="K8"  pad="GPIO071"/>
	   <pin position="J6"  pad="GPIO063"/>
	   <pin position="K3"  pad="GPIO224"/>
	   <pin position="K2"  pad="GPIO016"/>
	   <pin position="K4"  pad="GPIO227"/>
	   <pin position="K5"  pad="GPIO223"/>
	   <pin position="K7"  pad="GPIO055"/>
	   <pin position="K6"  pad="GPIO056"/>
	   <pin position="K1"  pad="GPIO012"/>
	   <pin position="J2"  pad="GPIO013"/>
	   <pin position="J5"  pad="GPIO130"/>
	   <pin position="J9"  pad="GPIO131"/>
	   <pin position="J3"  pad="GPIO020"/>
	   <pin position="J4"  pad="GPIO021"/>
	   <pin position="J7"  pad="GPIO002"/>
	   <pin position="H6"  pad="GPIO015"/>
	   <pin position="H5"  pad="GPIO032"/>
	   <pin position="A9"  pad="GPIO132"/>
	   <pin position="B7"  pad="GPIO140"/>
	   <pin position="K9"  pad="GPIO026"/>
	   <pin position="K10" pad="GPIO053"/>
	   <pin position="J10" pad="GPIO027"/>
	   <pin position="G7"  pad="GPIO030"/>
	   <pin position="H9"  pad="GPIO107"/>
	   <pin position="H10" pad="GPIO120"/>
	   <pin position="G9"  pad="GPIO112"/>
	   <pin position="G10" pad="GPIO113"/>
	   <pin position="G4"  pad="GPIO034"/>
	   <pin position="F9"  pad="GPIO170"/>
	   <pin position="F8"  pad="GPIO171"/>
	   <pin position="E8"  pad="JTAG_RST_n"/>
	   <pin position="D9"  pad="GPIO104"/>
	   <pin position="E9"  pad="GPIO105"/>
	   <pin position="C9"  pad="GPIO046"/>
	   <pin position="B8"  pad="GPIO047"/>
	   <pin position="D10" pad="GPIO121"/>
	   <pin position="B10" pad="GPIO122"/>
	   <pin position="E10" pad="GPIO123"/>
	   <pin position="F10" pad="GPIO126"/>
	   <pin position="C10" pad="GPIO124"/>
	   <pin position="A10" pad="GPIO125"/>
	   <pin position="C6"  pad="GPIO127"/>
	   <pin position="D7"  pad="GPIO156"/>
	   <pin position="B9"  pad="GPIO157"/>
	   <pin position="C5"  pad="GPIO045"/>
	   <pin position="A6"  pad="GPIO165"/>
	   <pin position="C2"  pad="GPIO145"/>
	   <pin position="B6"  pad="GPIO146"/>
	   <pin position="A7"  pad="GPIO147"/>
	   <pin position="B3"  pad="GPIO150"/>
	   <pin position="E7"  pad="GPIO143"/>
	   <pin position="D6"  pad="GPIO144"/>
	   <pin position="A8"  pad="GPIO004"/>
	   <pin position="B5"  pad="GPIO003"/>
	   <pin position="A5"  pad="GPIO000"/>
	   <pin position="B4"  pad="GPIO163"/>
	   <pin position="B1"  pad="GPIO253"/>
	   <pin position="A1"  pad="GPIO250"/>
	   <pin position="A4"  pad="XTAL1"/>
	   <pin position="A2"  pad="XTAL2"/>
	   <pin position="D4"  pad="VSS_ANALOG"/>
	   <pin position="C1"  pad="VTR_PLL"/>
	   <pin position="D5"  pad="VBAT"/>
	   <pin position="E4"  pad="VSS"/>
	   <pin position="E1"  pad="VTR_REG"/>
	   <pin position="E3"  pad="VREF_ADC"/>
	   <pin position="F7"  pad="VSS"/>
	   <pin position="G6"  pad="VTR1"/>
	   <pin position="F4"  pad="VTR_ANALOG"/>
	   <pin position="F1"  pad="VR_CAP"/>
	   <pin position="G5"  pad="VTR2"/>
	   <pin position="J1"  pad="VSS_ADC"/>
   </pinout>

  </pinouts>
</avr-tools-device-file>
