/*
 * Component description for EFUSE
 *
 * Copyright (c) 2022 Microchip Technology Inc. and its subsidiaries.
 *
 * Subject to your compliance with these terms, you may use Microchip software and any derivatives
 * exclusively with Microchip products. It is your responsibility to comply with third party license
 * terms applicable to your use of third party software (including open source software) that may
 * accompany Microchip software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY,
 * APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
 * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF
 * MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE FULLEST EXTENT
 * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT
 * EXCEED THE AMOUNT OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
 *
 */

/* file generated from device description version 2018-10-01T10:50:03Z */
#ifndef _CEC1702Q_EFUSE_COMPONENT_H_
#define _CEC1702Q_EFUSE_COMPONENT_H_

/* ************************************************************************** */
/*   SOFTWARE API DEFINITION FOR EFUSE                                        */
/* ************************************************************************** */

/* -------- EFUSE_CTRL : (EFUSE Offset: 0x00) (R/W 16) eFUSE CTRL Register -------- */
#define EFUSE_CTRL_RESETVALUE                 _UINT16_(0x10)                                       /*  (EFUSE_CTRL) eFUSE CTRL Register  Reset Value */

#define EFUSE_CTRL_EN_Pos                     _UINT16_(0)                                          /* (EFUSE_CTRL) Block enable: 1=block is enabled for operation; 0=block is disabled and in lowest power state. Position */
#define EFUSE_CTRL_EN_Msk                     (_UINT16_(0x1) << EFUSE_CTRL_EN_Pos)                 /* (EFUSE_CTRL) Block enable: 1=block is enabled for operation; 0=block is disabled and in lowest power state. Mask */
#define EFUSE_CTRL_EN(value)                  (EFUSE_CTRL_EN_Msk & (_UINT16_(value) << EFUSE_CTRL_EN_Pos)) /* Assigment of value for EN in the EFUSE_CTRL register */
#define EFUSE_CTRL_RST_Pos                    _UINT16_(1)                                          /* (EFUSE_CTRL) Block reset: 1=Block is reset; 0=Normal operation. This bit self-clears and always reads back 0. Position */
#define EFUSE_CTRL_RST_Msk                    (_UINT16_(0x1) << EFUSE_CTRL_RST_Pos)                /* (EFUSE_CTRL) Block reset: 1=Block is reset; 0=Normal operation. This bit self-clears and always reads back 0. Mask */
#define EFUSE_CTRL_RST(value)                 (EFUSE_CTRL_RST_Msk & (_UINT16_(value) << EFUSE_CTRL_RST_Pos)) /* Assigment of value for RST in the EFUSE_CTRL register */
#define EFUSE_CTRL_EXT_PGM_Pos                _UINT16_(2)                                          /* (EFUSE_CTRL) External programming enable: 1=eFUSE programming is done via external pin interface 0=Manual/Normal mode.\n         eFUSE programming is done via this block's register set. Position */
#define EFUSE_CTRL_EXT_PGM_Msk                (_UINT16_(0x1) << EFUSE_CTRL_EXT_PGM_Pos)            /* (EFUSE_CTRL) External programming enable: 1=eFUSE programming is done via external pin interface 0=Manual/Normal mode.\n         eFUSE programming is done via this block's register set. Mask */
#define EFUSE_CTRL_EXT_PGM(value)             (EFUSE_CTRL_EXT_PGM_Msk & (_UINT16_(value) << EFUSE_CTRL_EXT_PGM_Pos)) /* Assigment of value for EXT_PGM in the EFUSE_CTRL register */
#define EFUSE_CTRL_FSOURCE_EN_PRGM_Pos        _UINT16_(3)                                          /* (EFUSE_CTRL) FSOURCE pin enable for programming: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for PROGRAM mode.\n         Only set this bit when FSOURCE_EN_READ bit is already 0 to avoid shorting the power pad to ground;\n                  0=FSOURCE switch logic isolates eFUSE FSOURCE pin from power pad. Position */
#define EFUSE_CTRL_FSOURCE_EN_PRGM_Msk        (_UINT16_(0x1) << EFUSE_CTRL_FSOURCE_EN_PRGM_Pos)    /* (EFUSE_CTRL) FSOURCE pin enable for programming: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for PROGRAM mode.\n         Only set this bit when FSOURCE_EN_READ bit is already 0 to avoid shorting the power pad to ground;\n                  0=FSOURCE switch logic isolates eFUSE FSOURCE pin from power pad. Mask */
#define EFUSE_CTRL_FSOURCE_EN_PRGM(value)     (EFUSE_CTRL_FSOURCE_EN_PRGM_Msk & (_UINT16_(value) << EFUSE_CTRL_FSOURCE_EN_PRGM_Pos)) /* Assigment of value for FSOURCE_EN_PRGM in the EFUSE_CTRL register */
#define EFUSE_CTRL_FSOURCE_EN_READ_Pos        _UINT16_(4)                                          /* (EFUSE_CTRL) FSOURCE pin enable for reading: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for read mode.\n        Only set this bit when FSOURCE_EN_PRGM bit is already 0 to avoid shorting the power pad to ground;\n          0=FSOURCE switch logic isolates eFUSE FSOURCE pin from ground. Position */
#define EFUSE_CTRL_FSOURCE_EN_READ_Msk        (_UINT16_(0x1) << EFUSE_CTRL_FSOURCE_EN_READ_Pos)    /* (EFUSE_CTRL) FSOURCE pin enable for reading: 1=FSOURCE switch logic connects eFUSE FSOURCE pin to a power pad for read mode.\n        Only set this bit when FSOURCE_EN_PRGM bit is already 0 to avoid shorting the power pad to ground;\n          0=FSOURCE switch logic isolates eFUSE FSOURCE pin from ground. Mask */
#define EFUSE_CTRL_FSOURCE_EN_READ(value)     (EFUSE_CTRL_FSOURCE_EN_READ_Msk & (_UINT16_(value) << EFUSE_CTRL_FSOURCE_EN_READ_Pos)) /* Assigment of value for FSOURCE_EN_READ in the EFUSE_CTRL register */
#define EFUSE_CTRL_Msk                        _UINT16_(0x001F)                                     /* (EFUSE_CTRL) Register Mask  */


/* -------- EFUSE_MAN_CTRL : (EFUSE Offset: 0x04) (R/W 16) Manual Control Register -------- */
#define EFUSE_MAN_CTRL_RESETVALUE             _UINT16_(0x00)                                       /*  (EFUSE_MAN_CTRL) Manual Control Register  Reset Value */

#define EFUSE_MAN_CTRL_MAN_ENABLE_Pos         _UINT16_(0)                                          /* (EFUSE_MAN_CTRL) Manual mode enable bit: 1=Manual mode is enabled and this register interfaces to the eFUSE;\n         0=Normal mode, internal controller interfaces to eFUSE IP. This bit only takes affect when REG_CTRL.EXT_PRGM bit is 0. Position */
#define EFUSE_MAN_CTRL_MAN_ENABLE_Msk         (_UINT16_(0x1) << EFUSE_MAN_CTRL_MAN_ENABLE_Pos)     /* (EFUSE_MAN_CTRL) Manual mode enable bit: 1=Manual mode is enabled and this register interfaces to the eFUSE;\n         0=Normal mode, internal controller interfaces to eFUSE IP. This bit only takes affect when REG_CTRL.EXT_PRGM bit is 0. Mask */
#define EFUSE_MAN_CTRL_MAN_ENABLE(value)      (EFUSE_MAN_CTRL_MAN_ENABLE_Msk & (_UINT16_(value) << EFUSE_MAN_CTRL_MAN_ENABLE_Pos)) /* Assigment of value for MAN_ENABLE in the EFUSE_MAN_CTRL register */
#define EFUSE_MAN_CTRL_IP_CS_Pos              _UINT16_(1)                                          /* (EFUSE_MAN_CTRL) eFUSE chip select (CS) pin: 1=eFUSE is enabled for PROGRAM/READ modes; 0=eFUSE is disabled and in low power state. Position */
#define EFUSE_MAN_CTRL_IP_CS_Msk              (_UINT16_(0x1) << EFUSE_MAN_CTRL_IP_CS_Pos)          /* (EFUSE_MAN_CTRL) eFUSE chip select (CS) pin: 1=eFUSE is enabled for PROGRAM/READ modes; 0=eFUSE is disabled and in low power state. Mask */
#define EFUSE_MAN_CTRL_IP_CS(value)           (EFUSE_MAN_CTRL_IP_CS_Msk & (_UINT16_(value) << EFUSE_MAN_CTRL_IP_CS_Pos)) /* Assigment of value for IP_CS in the EFUSE_MAN_CTRL register */
#define EFUSE_MAN_CTRL_IP_PRGM_EN_Pos         _UINT16_(2)                                          /* (EFUSE_MAN_CTRL) eFUSE program enable. Can also be considered the write signal: 1=eFUSE is programming; 0=eFUSE is in read mode. Position */
#define EFUSE_MAN_CTRL_IP_PRGM_EN_Msk         (_UINT16_(0x1) << EFUSE_MAN_CTRL_IP_PRGM_EN_Pos)     /* (EFUSE_MAN_CTRL) eFUSE program enable. Can also be considered the write signal: 1=eFUSE is programming; 0=eFUSE is in read mode. Mask */
#define EFUSE_MAN_CTRL_IP_PRGM_EN(value)      (EFUSE_MAN_CTRL_IP_PRGM_EN_Msk & (_UINT16_(value) << EFUSE_MAN_CTRL_IP_PRGM_EN_Pos)) /* Assigment of value for IP_PRGM_EN in the EFUSE_MAN_CTRL register */
#define EFUSE_MAN_CTRL_IP_PRCHG_Pos           _UINT16_(3)                                          /* (EFUSE_MAN_CTRL) eFUSE precharge: 1=outputs are being precharged; 0=outputs are not precharged. Position */
#define EFUSE_MAN_CTRL_IP_PRCHG_Msk           (_UINT16_(0x1) << EFUSE_MAN_CTRL_IP_PRCHG_Pos)       /* (EFUSE_MAN_CTRL) eFUSE precharge: 1=outputs are being precharged; 0=outputs are not precharged. Mask */
#define EFUSE_MAN_CTRL_IP_PRCHG(value)        (EFUSE_MAN_CTRL_IP_PRCHG_Msk & (_UINT16_(value) << EFUSE_MAN_CTRL_IP_PRCHG_Pos)) /* Assigment of value for IP_PRCHG in the EFUSE_MAN_CTRL register */
#define EFUSE_MAN_CTRL_IP_SENSE_PULSE_Pos     _UINT16_(4)                                          /* (EFUSE_MAN_CTRL) eFUSE sense, outputs are valid on falling edge of this bit. Position */
#define EFUSE_MAN_CTRL_IP_SENSE_PULSE_Msk     (_UINT16_(0x1) << EFUSE_MAN_CTRL_IP_SENSE_PULSE_Pos) /* (EFUSE_MAN_CTRL) eFUSE sense, outputs are valid on falling edge of this bit. Mask */
#define EFUSE_MAN_CTRL_IP_SENSE_PULSE(value)  (EFUSE_MAN_CTRL_IP_SENSE_PULSE_Msk & (_UINT16_(value) << EFUSE_MAN_CTRL_IP_SENSE_PULSE_Pos)) /* Assigment of value for IP_SENSE_PULSE in the EFUSE_MAN_CTRL register */
#define EFUSE_MAN_CTRL_IP_OE_Pos              _UINT16_(5)                                          /* (EFUSE_MAN_CTRL) eFUSE output enable. The IP might tri-state at various times, so this bit isolates the outputs to avoid potential crowbar.\n        1=eFUSE outputs enabled for read; 0=eFUSE outputs isolated Position */
#define EFUSE_MAN_CTRL_IP_OE_Msk              (_UINT16_(0x1) << EFUSE_MAN_CTRL_IP_OE_Pos)          /* (EFUSE_MAN_CTRL) eFUSE output enable. The IP might tri-state at various times, so this bit isolates the outputs to avoid potential crowbar.\n        1=eFUSE outputs enabled for read; 0=eFUSE outputs isolated Mask */
#define EFUSE_MAN_CTRL_IP_OE(value)           (EFUSE_MAN_CTRL_IP_OE_Msk & (_UINT16_(value) << EFUSE_MAN_CTRL_IP_OE_Pos)) /* Assigment of value for IP_OE in the EFUSE_MAN_CTRL register */
#define EFUSE_MAN_CTRL_Msk                    _UINT16_(0x003F)                                     /* (EFUSE_MAN_CTRL) Register Mask  */


/* -------- EFUSE_MAN_MOD_ADDR : (EFUSE Offset: 0x06) (R/W 32) MANUAL MODE ADDRESS REGISTER -------- */
#define EFUSE_MAN_MOD_ADDR_RESETVALUE         _UINT32_(0x00)                                       /*  (EFUSE_MAN_MOD_ADDR) MANUAL MODE ADDRESS REGISTER  Reset Value */

#define EFUSE_MAN_MOD_ADDR_IP_ADDR_LO_Pos     _UINT32_(0)                                          /* (EFUSE_MAN_MOD_ADDR) Manual mode address, selecting the bit address within a 1K bit block. Position */
#define EFUSE_MAN_MOD_ADDR_IP_ADDR_LO_Msk     (_UINT32_(0x3FF) << EFUSE_MAN_MOD_ADDR_IP_ADDR_LO_Pos) /* (EFUSE_MAN_MOD_ADDR) Manual mode address, selecting the bit address within a 1K bit block. Mask */
#define EFUSE_MAN_MOD_ADDR_IP_ADDR_LO(value)  (EFUSE_MAN_MOD_ADDR_IP_ADDR_LO_Msk & (_UINT32_(value) << EFUSE_MAN_MOD_ADDR_IP_ADDR_LO_Pos)) /* Assigment of value for IP_ADDR_LO in the EFUSE_MAN_MOD_ADDR register */
#define EFUSE_MAN_MOD_ADDR_IP_ADDR_HI_Pos     _UINT32_(10)                                         /* (EFUSE_MAN_MOD_ADDR) Manual mode address, selecting a 1K bit block of eFuse data Position */
#define EFUSE_MAN_MOD_ADDR_IP_ADDR_HI_Msk     (_UINT32_(0x3) << EFUSE_MAN_MOD_ADDR_IP_ADDR_HI_Pos) /* (EFUSE_MAN_MOD_ADDR) Manual mode address, selecting a 1K bit block of eFuse data Mask */
#define EFUSE_MAN_MOD_ADDR_IP_ADDR_HI(value)  (EFUSE_MAN_MOD_ADDR_IP_ADDR_HI_Msk & (_UINT32_(value) << EFUSE_MAN_MOD_ADDR_IP_ADDR_HI_Pos)) /* Assigment of value for IP_ADDR_HI in the EFUSE_MAN_MOD_ADDR register */
#define EFUSE_MAN_MOD_ADDR_Msk                _UINT32_(0x00000FFF)                                 /* (EFUSE_MAN_MOD_ADDR) Register Mask  */


/* -------- EFUSE_MAN_MOD_DATA : (EFUSE Offset: 0x0C) (R/W 32) MANUAL MODE DATA REGISTER -------- */
#define EFUSE_MAN_MOD_DATA_RESETVALUE         _UINT32_(0x00)                                       /*  (EFUSE_MAN_MOD_DATA) MANUAL MODE DATA REGISTER  Reset Value */

#define EFUSE_MAN_MOD_DATA_IP_DATA_Pos        _UINT32_(0)                                          /* (EFUSE_MAN_MOD_DATA) Manual mode data: This field connects to the eFUSE data output pins. Position */
#define EFUSE_MAN_MOD_DATA_IP_DATA_Msk        (_UINT32_(0xFFFF) << EFUSE_MAN_MOD_DATA_IP_DATA_Pos) /* (EFUSE_MAN_MOD_DATA) Manual mode data: This field connects to the eFUSE data output pins. Mask */
#define EFUSE_MAN_MOD_DATA_IP_DATA(value)     (EFUSE_MAN_MOD_DATA_IP_DATA_Msk & (_UINT32_(value) << EFUSE_MAN_MOD_DATA_IP_DATA_Pos)) /* Assigment of value for IP_DATA in the EFUSE_MAN_MOD_DATA register */
#define EFUSE_MAN_MOD_DATA_Msk                _UINT32_(0x0000FFFF)                                 /* (EFUSE_MAN_MOD_DATA) Register Mask  */


/* -------- EFUSE_MEM_DW : (EFUSE Offset: 0x10) (R/W 32) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. -------- */
#define EFUSE_MEM_DW_RESETVALUE               _UINT32_(0x00)                                       /*  (EFUSE_MEM_DW) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block.  Reset Value */

#define EFUSE_MEM_DW_Msk                      _UINT32_(0x00000000)                                 /* (EFUSE_MEM_DW) Register Mask  */


/** \brief EFUSE register offsets definitions */
#define EFUSE_CTRL_REG_OFST            _UINT32_(0x00)      /* (EFUSE_CTRL) eFUSE CTRL Register Offset */
#define EFUSE_MAN_CTRL_REG_OFST        _UINT32_(0x04)      /* (EFUSE_MAN_CTRL) Manual Control Register Offset */
#define EFUSE_MAN_MOD_ADDR_REG_OFST    _UINT32_(0x06)      /* (EFUSE_MAN_MOD_ADDR) MANUAL MODE ADDRESS REGISTER Offset */
#define EFUSE_MAN_MOD_DATA_REG_OFST    _UINT32_(0x0C)      /* (EFUSE_MAN_MOD_DATA) MANUAL MODE DATA REGISTER Offset */
#define EFUSE_MEM_DW_REG_OFST          _UINT32_(0x10)      /* (EFUSE_MEM_DW) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW0_REG_OFST         _UINT32_(0x10)      /* (EFUSE_MEM_DW0) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW1_REG_OFST         _UINT32_(0x14)      /* (EFUSE_MEM_DW1) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW2_REG_OFST         _UINT32_(0x18)      /* (EFUSE_MEM_DW2) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW3_REG_OFST         _UINT32_(0x1C)      /* (EFUSE_MEM_DW3) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW4_REG_OFST         _UINT32_(0x20)      /* (EFUSE_MEM_DW4) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW5_REG_OFST         _UINT32_(0x24)      /* (EFUSE_MEM_DW5) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW6_REG_OFST         _UINT32_(0x28)      /* (EFUSE_MEM_DW6) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW7_REG_OFST         _UINT32_(0x2C)      /* (EFUSE_MEM_DW7) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW8_REG_OFST         _UINT32_(0x30)      /* (EFUSE_MEM_DW8) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW9_REG_OFST         _UINT32_(0x34)      /* (EFUSE_MEM_DW9) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW10_REG_OFST        _UINT32_(0x38)      /* (EFUSE_MEM_DW10) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW11_REG_OFST        _UINT32_(0x3C)      /* (EFUSE_MEM_DW11) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW12_REG_OFST        _UINT32_(0x40)      /* (EFUSE_MEM_DW12) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW13_REG_OFST        _UINT32_(0x44)      /* (EFUSE_MEM_DW13) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW14_REG_OFST        _UINT32_(0x48)      /* (EFUSE_MEM_DW14) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW15_REG_OFST        _UINT32_(0x4C)      /* (EFUSE_MEM_DW15) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW16_REG_OFST        _UINT32_(0x50)      /* (EFUSE_MEM_DW16) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW17_REG_OFST        _UINT32_(0x54)      /* (EFUSE_MEM_DW17) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW18_REG_OFST        _UINT32_(0x58)      /* (EFUSE_MEM_DW18) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW19_REG_OFST        _UINT32_(0x5C)      /* (EFUSE_MEM_DW19) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW20_REG_OFST        _UINT32_(0x60)      /* (EFUSE_MEM_DW20) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW21_REG_OFST        _UINT32_(0x64)      /* (EFUSE_MEM_DW21) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW22_REG_OFST        _UINT32_(0x68)      /* (EFUSE_MEM_DW22) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW23_REG_OFST        _UINT32_(0x6C)      /* (EFUSE_MEM_DW23) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW24_REG_OFST        _UINT32_(0x70)      /* (EFUSE_MEM_DW24) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW25_REG_OFST        _UINT32_(0x74)      /* (EFUSE_MEM_DW25) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW26_REG_OFST        _UINT32_(0x78)      /* (EFUSE_MEM_DW26) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW27_REG_OFST        _UINT32_(0x7C)      /* (EFUSE_MEM_DW27) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW28_REG_OFST        _UINT32_(0x80)      /* (EFUSE_MEM_DW28) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW29_REG_OFST        _UINT32_(0x84)      /* (EFUSE_MEM_DW29) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW30_REG_OFST        _UINT32_(0x88)      /* (EFUSE_MEM_DW30) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW31_REG_OFST        _UINT32_(0x8C)      /* (EFUSE_MEM_DW31) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW32_REG_OFST        _UINT32_(0x90)      /* (EFUSE_MEM_DW32) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW33_REG_OFST        _UINT32_(0x94)      /* (EFUSE_MEM_DW33) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW34_REG_OFST        _UINT32_(0x98)      /* (EFUSE_MEM_DW34) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW35_REG_OFST        _UINT32_(0x9C)      /* (EFUSE_MEM_DW35) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW36_REG_OFST        _UINT32_(0xA0)      /* (EFUSE_MEM_DW36) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW37_REG_OFST        _UINT32_(0xA4)      /* (EFUSE_MEM_DW37) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW38_REG_OFST        _UINT32_(0xA8)      /* (EFUSE_MEM_DW38) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW39_REG_OFST        _UINT32_(0xAC)      /* (EFUSE_MEM_DW39) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW40_REG_OFST        _UINT32_(0xB0)      /* (EFUSE_MEM_DW40) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW41_REG_OFST        _UINT32_(0xB4)      /* (EFUSE_MEM_DW41) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW42_REG_OFST        _UINT32_(0xB8)      /* (EFUSE_MEM_DW42) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW43_REG_OFST        _UINT32_(0xBC)      /* (EFUSE_MEM_DW43) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW44_REG_OFST        _UINT32_(0xC0)      /* (EFUSE_MEM_DW44) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW45_REG_OFST        _UINT32_(0xC4)      /* (EFUSE_MEM_DW45) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW46_REG_OFST        _UINT32_(0xC8)      /* (EFUSE_MEM_DW46) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW47_REG_OFST        _UINT32_(0xCC)      /* (EFUSE_MEM_DW47) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW48_REG_OFST        _UINT32_(0xD0)      /* (EFUSE_MEM_DW48) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW49_REG_OFST        _UINT32_(0xD4)      /* (EFUSE_MEM_DW49) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW50_REG_OFST        _UINT32_(0xD8)      /* (EFUSE_MEM_DW50) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW51_REG_OFST        _UINT32_(0xDC)      /* (EFUSE_MEM_DW51) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW52_REG_OFST        _UINT32_(0xE0)      /* (EFUSE_MEM_DW52) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW53_REG_OFST        _UINT32_(0xE4)      /* (EFUSE_MEM_DW53) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW54_REG_OFST        _UINT32_(0xE8)      /* (EFUSE_MEM_DW54) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW55_REG_OFST        _UINT32_(0xEC)      /* (EFUSE_MEM_DW55) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW56_REG_OFST        _UINT32_(0xF0)      /* (EFUSE_MEM_DW56) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW57_REG_OFST        _UINT32_(0xF4)      /* (EFUSE_MEM_DW57) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW58_REG_OFST        _UINT32_(0xF8)      /* (EFUSE_MEM_DW58) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW59_REG_OFST        _UINT32_(0xFC)      /* (EFUSE_MEM_DW59) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW60_REG_OFST        _UINT32_(0x100)     /* (EFUSE_MEM_DW60) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW61_REG_OFST        _UINT32_(0x104)     /* (EFUSE_MEM_DW61) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW62_REG_OFST        _UINT32_(0x108)     /* (EFUSE_MEM_DW62) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW63_REG_OFST        _UINT32_(0x10C)     /* (EFUSE_MEM_DW63) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW64_REG_OFST        _UINT32_(0x110)     /* (EFUSE_MEM_DW64) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW65_REG_OFST        _UINT32_(0x114)     /* (EFUSE_MEM_DW65) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW66_REG_OFST        _UINT32_(0x118)     /* (EFUSE_MEM_DW66) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW67_REG_OFST        _UINT32_(0x11C)     /* (EFUSE_MEM_DW67) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW68_REG_OFST        _UINT32_(0x120)     /* (EFUSE_MEM_DW68) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW69_REG_OFST        _UINT32_(0x124)     /* (EFUSE_MEM_DW69) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW70_REG_OFST        _UINT32_(0x128)     /* (EFUSE_MEM_DW70) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW71_REG_OFST        _UINT32_(0x12C)     /* (EFUSE_MEM_DW71) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW72_REG_OFST        _UINT32_(0x130)     /* (EFUSE_MEM_DW72) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW73_REG_OFST        _UINT32_(0x134)     /* (EFUSE_MEM_DW73) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW74_REG_OFST        _UINT32_(0x138)     /* (EFUSE_MEM_DW74) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW75_REG_OFST        _UINT32_(0x13C)     /* (EFUSE_MEM_DW75) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW76_REG_OFST        _UINT32_(0x140)     /* (EFUSE_MEM_DW76) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW77_REG_OFST        _UINT32_(0x144)     /* (EFUSE_MEM_DW77) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW78_REG_OFST        _UINT32_(0x148)     /* (EFUSE_MEM_DW78) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW79_REG_OFST        _UINT32_(0x14C)     /* (EFUSE_MEM_DW79) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW80_REG_OFST        _UINT32_(0x150)     /* (EFUSE_MEM_DW80) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW81_REG_OFST        _UINT32_(0x154)     /* (EFUSE_MEM_DW81) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW82_REG_OFST        _UINT32_(0x158)     /* (EFUSE_MEM_DW82) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW83_REG_OFST        _UINT32_(0x15C)     /* (EFUSE_MEM_DW83) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW84_REG_OFST        _UINT32_(0x160)     /* (EFUSE_MEM_DW84) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW85_REG_OFST        _UINT32_(0x164)     /* (EFUSE_MEM_DW85) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW86_REG_OFST        _UINT32_(0x168)     /* (EFUSE_MEM_DW86) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW87_REG_OFST        _UINT32_(0x16C)     /* (EFUSE_MEM_DW87) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW88_REG_OFST        _UINT32_(0x170)     /* (EFUSE_MEM_DW88) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW89_REG_OFST        _UINT32_(0x174)     /* (EFUSE_MEM_DW89) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW90_REG_OFST        _UINT32_(0x178)     /* (EFUSE_MEM_DW90) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW91_REG_OFST        _UINT32_(0x17C)     /* (EFUSE_MEM_DW91) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW92_REG_OFST        _UINT32_(0x180)     /* (EFUSE_MEM_DW92) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW93_REG_OFST        _UINT32_(0x184)     /* (EFUSE_MEM_DW93) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW94_REG_OFST        _UINT32_(0x188)     /* (EFUSE_MEM_DW94) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW95_REG_OFST        _UINT32_(0x18C)     /* (EFUSE_MEM_DW95) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW96_REG_OFST        _UINT32_(0x190)     /* (EFUSE_MEM_DW96) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW97_REG_OFST        _UINT32_(0x194)     /* (EFUSE_MEM_DW97) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW98_REG_OFST        _UINT32_(0x198)     /* (EFUSE_MEM_DW98) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW99_REG_OFST        _UINT32_(0x19C)     /* (EFUSE_MEM_DW99) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW100_REG_OFST       _UINT32_(0x1A0)     /* (EFUSE_MEM_DW100) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW101_REG_OFST       _UINT32_(0x1A4)     /* (EFUSE_MEM_DW101) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW102_REG_OFST       _UINT32_(0x1A8)     /* (EFUSE_MEM_DW102) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW103_REG_OFST       _UINT32_(0x1AC)     /* (EFUSE_MEM_DW103) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW104_REG_OFST       _UINT32_(0x1B0)     /* (EFUSE_MEM_DW104) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW105_REG_OFST       _UINT32_(0x1B4)     /* (EFUSE_MEM_DW105) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW106_REG_OFST       _UINT32_(0x1B8)     /* (EFUSE_MEM_DW106) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW107_REG_OFST       _UINT32_(0x1BC)     /* (EFUSE_MEM_DW107) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW108_REG_OFST       _UINT32_(0x1C0)     /* (EFUSE_MEM_DW108) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW109_REG_OFST       _UINT32_(0x1C4)     /* (EFUSE_MEM_DW109) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW110_REG_OFST       _UINT32_(0x1C8)     /* (EFUSE_MEM_DW110) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW111_REG_OFST       _UINT32_(0x1CC)     /* (EFUSE_MEM_DW111) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW112_REG_OFST       _UINT32_(0x1D0)     /* (EFUSE_MEM_DW112) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW113_REG_OFST       _UINT32_(0x1D4)     /* (EFUSE_MEM_DW113) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW114_REG_OFST       _UINT32_(0x1D8)     /* (EFUSE_MEM_DW114) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW115_REG_OFST       _UINT32_(0x1DC)     /* (EFUSE_MEM_DW115) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW116_REG_OFST       _UINT32_(0x1E0)     /* (EFUSE_MEM_DW116) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW117_REG_OFST       _UINT32_(0x1E4)     /* (EFUSE_MEM_DW117) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW118_REG_OFST       _UINT32_(0x1E8)     /* (EFUSE_MEM_DW118) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW119_REG_OFST       _UINT32_(0x1EC)     /* (EFUSE_MEM_DW119) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW120_REG_OFST       _UINT32_(0x1F0)     /* (EFUSE_MEM_DW120) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW121_REG_OFST       _UINT32_(0x1F4)     /* (EFUSE_MEM_DW121) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW122_REG_OFST       _UINT32_(0x1F8)     /* (EFUSE_MEM_DW122) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW123_REG_OFST       _UINT32_(0x1FC)     /* (EFUSE_MEM_DW123) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW124_REG_OFST       _UINT32_(0x200)     /* (EFUSE_MEM_DW124) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW125_REG_OFST       _UINT32_(0x204)     /* (EFUSE_MEM_DW125) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW126_REG_OFST       _UINT32_(0x208)     /* (EFUSE_MEM_DW126) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */
#define EFUSE_MEM_DW127_REG_OFST       _UINT32_(0x20C)     /* (EFUSE_MEM_DW127) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. Offset */

#if !(defined(__ASSEMBLER__) || defined(__IAR_SYSTEMS_ASM__))
/** \brief EFUSE register API structure */
typedef struct
{  /* The eFUSE block provides a means of programming and accessing the eFUSE bits. */
  __IO  uint16_t                       EFUSE_CTRL;         /**< Offset: 0x00 (R/W  16) eFUSE CTRL Register */
  __I   uint8_t                        Reserved1[0x02];
  __IO  uint16_t                       EFUSE_MAN_CTRL;     /**< Offset: 0x04 (R/W  16) Manual Control Register */
  __IO  uint32_t                       EFUSE_MAN_MOD_ADDR; /**< Offset: 0x06 (R/W  32) MANUAL MODE ADDRESS REGISTER */
  __I   uint8_t                        Reserved2[0x02];
  __IO  uint32_t                       EFUSE_MAN_MOD_DATA; /**< Offset: 0x0C (R/W  32) MANUAL MODE DATA REGISTER */
  __IO  uint32_t                       EFUSE_MEM_DW[128];  /**< Offset: 0x10 (R/W  32) 512 Bytes of EFUSE Memory (IP_MEM) Represented in 128 DW chunks:\n       eFUSE memory read-back data. Access to this region depends on the operating mode: NORMAL MODE: Reading any of the bytes\n       starting at this base will automatically start the controller to sequence all eFUSE signals to generate read data. Wait cycles added\n         to the read cycle as appropriate. MANUAL MODE: Refer to the manual mode section for the proper procedure for accessing data in this mode.\n       See REG_MAN_CTRL.MAN_EN and REG_CTRL.EXT_PRGM bits for controlling the operating mode of the block. */
} efuse_registers_t;


#endif /* !(defined(__ASSEMBLER__) || defined(__IAR_SYSTEMS_ASM__)) */
#endif /* _CEC1702Q_EFUSE_COMPONENT_H_ */
