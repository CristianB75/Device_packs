<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<edc:PIC xmlns:atdf="http://crownking/atdf" xmlns:edc="http://crownking/edc" xmlns:ltx="http://crownking/ltx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://crownking/edc edc/PIC.xsd" edc:name="SAM9X75D1G" edc:arch="arm32bit" edc:procid="0x0000" atdf:architecture="ARM926EJ-S" atdf:family="SAM9" edc:hasFreeze="false" edc:atsamname="SAM9X75D1G">
  <edc:Properties>
    <edc:Property edc:propkey="file.registers.are.odd.address.accessible" edc:propvalue="true"/>
  </edc:Properties>
  <edc:Power edc:sharespowersupply="true">
    <edc:VDD edc:minvoltage="1.62" edc:maxvoltage="3.63" edc:nominalvoltage="3.300"/>
  </edc:Power>
  <edc:Programming edc:haslvp2="true"/>
  <edc:ArchDef edc:name="arm32bit" edc:desc="arm32bit">
    <edc:MemTraits edc:addrinc="0x1" edc:locsize="0x1" edc:wordimpl="0xFFFFFFFF" edc:wordinit="0xFFFFFFFF" edc:wordsafe="0xFFFFFFFF" edc:wordsize="0x4"/>
  </edc:ArchDef>
  <edc:InstructionSet edc:instructionsetid="armv5"/>
  <edc:InterruptList>
    <edc:Interrupt edc:irq="0" edc:cname="EXT_FIQ" edc:desc="Advanced Interrupt Controller" ltx:memberofperipheral="AIC"/>
    <edc:Interrupt edc:irq="1" edc:cname="SYSC" edc:desc="Logical-OR interrupt of PMC, WDT, PIT, RSTC, RTT, RTC" ltx:memberofperipheral="PMC WDT PIT RSTC RTT RTC"/>
    <edc:Interrupt edc:irq="2" edc:cname="PIOA" edc:desc="Parallel I/O Controller A" ltx:memberofperipheral="PIOA"/>
    <edc:Interrupt edc:irq="3" edc:cname="PIOB" edc:desc="Parallel I/O Controller B" ltx:memberofperipheral="PIOB"/>
    <edc:Interrupt edc:irq="4" edc:cname="PIOC" edc:desc="Parallel I/O Controller C" ltx:memberofperipheral="PIOC"/>
    <edc:Interrupt edc:irq="5" edc:cname="FLEXCOM0" edc:desc="Flexcom 0" ltx:memberofperipheral="FLEXCOM0"/>
    <edc:Interrupt edc:irq="6" edc:cname="FLEXCOM1" edc:desc="Flexcom 1" ltx:memberofperipheral="FLEXCOM1"/>
    <edc:Interrupt edc:irq="7" edc:cname="FLEXCOM2" edc:desc="Flexcom 2" ltx:memberofperipheral="FLEXCOM2"/>
    <edc:Interrupt edc:irq="8" edc:cname="FLEXCOM3" edc:desc="Flexcom 3" ltx:memberofperipheral="FLEXCOM3"/>
    <edc:Interrupt edc:irq="9" edc:cname="FLEXCOM6" edc:desc="Flexcom 6" ltx:memberofperipheral="FLEXCOM6"/>
    <edc:Interrupt edc:irq="10" edc:cname="FLEXCOM7" edc:desc="Flexcom 7" ltx:memberofperipheral="FLEXCOM7"/>
    <edc:Interrupt edc:irq="11" edc:cname="FLEXCOM8" edc:desc="Flexcom 8" ltx:memberofperipheral="FLEXCOM8"/>
    <edc:Interrupt edc:irq="12" edc:cname="SDMMC0" edc:desc="Secure Data Memory Card Controller 0" ltx:memberofperipheral="SDMMC0"/>
    <edc:Interrupt edc:irq="13" edc:cname="FLEXCOM4" edc:desc="Flexcom 4" ltx:memberofperipheral="FLEXCOM4"/>
    <edc:Interrupt edc:irq="14" edc:cname="FLEXCOM5" edc:desc="Flexcom 5" ltx:memberofperipheral="FLEXCOM5"/>
    <edc:Interrupt edc:irq="15" edc:cname="FLEXCOM9" edc:desc="Flexcom 9" ltx:memberofperipheral="FLEXCOM9"/>
    <edc:Interrupt edc:irq="16" edc:cname="FLEXCOM10" edc:desc="Flexcom 10" ltx:memberofperipheral="FLEXCOM10"/>
    <edc:Interrupt edc:irq="17" edc:cname="TC0" edc:desc="TC 0,1,2" ltx:memberofperipheral="TC0"/>
    <edc:Interrupt edc:irq="18" edc:cname="PWM" edc:desc="Pulse Width Modulation Controller" ltx:memberofperipheral="PWM"/>
    <edc:Interrupt edc:irq="19" edc:cname="ADC" edc:desc="ADC Controller" ltx:memberofperipheral="ADC"/>
    <edc:Interrupt edc:irq="20" edc:cname="XDMAC" edc:desc="Extended DMA Controller" ltx:memberofperipheral="XDMAC"/>
    <edc:Interrupt edc:irq="21" edc:cname="MATRIX" edc:desc="Matrix" ltx:memberofperipheral="MATRIX"/>
    <edc:Interrupt edc:irq="22" edc:cname="UHPHS" edc:desc="USB Host High Speed" ltx:memberofperipheral="UHPHS"/>
    <edc:Interrupt edc:irq="23" edc:cname="UDPHS" edc:desc="USB Device High Speed" ltx:memberofperipheral="UDPHS"/>
    <edc:Interrupt edc:irq="24" edc:cname="GMAC" edc:desc="Gigabit Ethernet MAC" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="25" edc:cname="XLCDC" edc:desc="LCD Controller" ltx:memberofperipheral="XLCDC"/>
    <edc:Interrupt edc:irq="26" edc:cname="SDMMC1" edc:desc="Secure Data Memory Card Controller 1" ltx:memberofperipheral="SDMMC1"/>
    <edc:Interrupt edc:irq="28" edc:cname="SSC" edc:desc="Synchronous Serial Controller" ltx:memberofperipheral="SSC"/>
    <edc:Interrupt edc:irq="29" edc:cname="MCAN0_INT0" edc:desc="Master CAN 0" ltx:memberofperipheral="MCAN0"/>
    <edc:Interrupt edc:irq="30" edc:cname="MCAN1_INT0" edc:desc="Master CAN 1" ltx:memberofperipheral="MCAN1"/>
    <edc:Interrupt edc:irq="31" edc:cname="EXT_IRQ" edc:desc="Advanced Interrupt Controller" ltx:memberofperipheral="AIC"/>
    <edc:Interrupt edc:irq="32" edc:cname="FLEXCOM11" edc:desc="Flexcom 11" ltx:memberofperipheral="FLEXCOM11"/>
    <edc:Interrupt edc:irq="33" edc:cname="FLEXCOM12" edc:desc="Flexcom 12" ltx:memberofperipheral="FLEXCOM12"/>
    <edc:Interrupt edc:irq="34" edc:cname="I2SMCC" edc:desc="I2S Multi Channel Controller" ltx:memberofperipheral="I2SMCC"/>
    <edc:Interrupt edc:irq="35" edc:cname="QSPI" edc:desc="Quad I/O SPI Controller" ltx:memberofperipheral="QSPI"/>
    <edc:Interrupt edc:irq="36" edc:cname="GFX2D" edc:desc="2D Graphic Controller" ltx:memberofperipheral="GFX2D"/>
    <edc:Interrupt edc:irq="37" edc:cname="PIT64B0" edc:desc="64-b Timer 0" ltx:memberofperipheral="PIT64B0"/>
    <edc:Interrupt edc:irq="38" edc:cname="TRNG" edc:desc="True Random Number Generator" ltx:memberofperipheral="TRNG"/>
    <edc:Interrupt edc:irq="39" edc:cname="AES" edc:desc="Advanced Encryption Standard" ltx:memberofperipheral="AES"/>
    <edc:Interrupt edc:irq="40" edc:cname="TDES" edc:desc="Triple Data Encryption Standard" ltx:memberofperipheral="TDES"/>
    <edc:Interrupt edc:irq="41" edc:cname="SHA" edc:desc="Secure Hash Algorithm" ltx:memberofperipheral="SHA"/>
    <edc:Interrupt edc:irq="42" edc:cname="CLASSD" edc:desc="CLASS D Controller" ltx:memberofperipheral="CLASSD"/>
    <edc:Interrupt edc:irq="43" edc:cname="ISC" edc:desc="Camera Interface" ltx:memberofperipheral="ISC"/>
    <edc:Interrupt edc:irq="44" edc:cname="PIOD" edc:desc="Parallel I/O Controller D" ltx:memberofperipheral="PIOD"/>
    <edc:Interrupt edc:irq="45" edc:cname="TC1" edc:desc="TC 3,4,5" ltx:memberofperipheral="TC1"/>
    <edc:Interrupt edc:irq="46" edc:cname="OTPC" edc:desc="OTP Controller" ltx:memberofperipheral="OTPC"/>
    <edc:Interrupt edc:irq="47" edc:cname="DBGU" edc:desc="DBGU" ltx:memberofperipheral="DBGU"/>
    <edc:Interrupt edc:irq="48" edc:cname="ECC" edc:desc="logical-OR interrupt of PMECC and PMERRLOC" ltx:memberofperipheral="PMECC PMERRLOC"/>
    <edc:Interrupt edc:irq="49" edc:cname="MC" edc:desc="logical-OR interrupt of MPDDRC and SMC" ltx:memberofperipheral="MPDDRC SMC"/>
    <edc:Interrupt edc:irq="52" edc:cname="CSI2DC" edc:desc="CSI to Demultiplexer Controller" ltx:memberofperipheral="CSI2DC"/>
    <edc:Interrupt edc:irq="56" edc:cname="LVDSC" edc:desc="Display Serial Interface between XLCDC and LVDS interface" ltx:memberofperipheral="LVDSC"/>
    <edc:Interrupt edc:irq="57" edc:cname="LVDSPHY" edc:desc="LVDS PHY" ltx:memberofperipheral="LVDSPHY"/>
    <edc:Interrupt edc:irq="58" edc:cname="PIT64B1" edc:desc="64-b Timer 1" ltx:memberofperipheral="PIT64B1"/>
    <edc:Interrupt edc:irq="60" edc:cname="GMAC_Q1" edc:desc="GMAC Queue 1 Interrupt signal toggled on a DMA write to the first word of each DMA data buffer associated with queue 1" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="61" edc:cname="GMAC_Q2" edc:desc="GMAC Queue 2 Interrupt signal toggled on a DMA write to the first word of each DMA data buffer associated with queue 2" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="62" edc:cname="GMAC_Q3" edc:desc="GMAC Queue 3 Interrupt signal toggled on a DMA write to the first word of each DMA data buffer associated with queue 3" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="63" edc:cname="GMAC_Q4" edc:desc="GMAC Queue 4 Interrupt signal toggled on a DMA write to the first word of each DMA data buffer associated with queue 4" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="64" edc:cname="GMAC_Q5" edc:desc="GMAC Queue 5 Interrupt signal toggled on a DMA write to the first word of each DMA data buffer associated with queue 5" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="65" edc:cname="GMAC_EMAC" edc:desc="Gigabit Ethernet MAC - Express MAC" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="66" edc:cname="GMAC_MMSL" edc:desc="Gigabit Ethernet MAC - Mac Merge SubLayer" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="67" edc:cname="GMAC_TSU" edc:desc="Gigabit Ethernet MAC - Time Stamp Unit" ltx:memberofperipheral="GMAC"/>
    <edc:Interrupt edc:irq="68" edc:cname="MCAN0_INT1" edc:desc="Master CAN 0 interrupt 1" ltx:memberofperipheral="MCAN0"/>
    <edc:Interrupt edc:irq="69" edc:cname="MCAN1_INT1" edc:desc="Master CAN 1 interrupt 1" ltx:memberofperipheral="MCAN1"/>
  </edc:InterruptList>
  <edc:PeripheralList>
    <edc:Peripheral edc:cname="ADC" edc:desc=""/>
    <edc:Peripheral edc:cname="AES" edc:desc=""/>
    <edc:Peripheral edc:cname="AIC" edc:desc=""/>
    <edc:Peripheral edc:cname="BSC" edc:desc=""/>
    <edc:Peripheral edc:cname="CLASSD" edc:desc=""/>
    <edc:Peripheral edc:cname="CSI" edc:desc=""/>
    <edc:Peripheral edc:cname="CSI2DC" edc:desc=""/>
    <edc:Peripheral edc:cname="DBGU" edc:desc=""/>
    <edc:Peripheral edc:cname="DSI" edc:desc=""/>
    <edc:Peripheral edc:cname="EBI" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM0" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM1" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM2" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM3" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM4" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM5" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM6" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM7" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM8" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM9" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM10" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM11" edc:desc=""/>
    <edc:Peripheral edc:cname="FLEXCOM12" edc:desc=""/>
    <edc:Peripheral edc:cname="GFX2D" edc:desc=""/>
    <edc:Peripheral edc:cname="GMAC" edc:desc=""/>
    <edc:Peripheral edc:cname="GPBR" edc:desc=""/>
    <edc:Peripheral edc:cname="I2SMCC" edc:desc=""/>
    <edc:Peripheral edc:cname="ISC" edc:desc=""/>
    <edc:Peripheral edc:cname="XLCDC" edc:desc=""/>
    <edc:Peripheral edc:cname="LVDSC" edc:desc=""/>
    <edc:Peripheral edc:cname="LVDSPHY" edc:desc=""/>
    <edc:Peripheral edc:cname="MATRIX" edc:desc=""/>
    <edc:Peripheral edc:cname="MCAN0" edc:desc=""/>
    <edc:Peripheral edc:cname="MCAN1" edc:desc=""/>
    <edc:Peripheral edc:cname="MPDDRC" edc:desc=""/>
    <edc:Peripheral edc:cname="OTPC" edc:desc=""/>
    <edc:Peripheral edc:cname="PIOA" edc:desc=""/>
    <edc:Peripheral edc:cname="PIOB" edc:desc=""/>
    <edc:Peripheral edc:cname="PIOC" edc:desc=""/>
    <edc:Peripheral edc:cname="PIOD" edc:desc=""/>
    <edc:Peripheral edc:cname="PIT" edc:desc=""/>
    <edc:Peripheral edc:cname="PIT64B0" edc:desc=""/>
    <edc:Peripheral edc:cname="PIT64B1" edc:desc=""/>
    <edc:Peripheral edc:cname="PMC" edc:desc=""/>
    <edc:Peripheral edc:cname="PMECC" edc:desc=""/>
    <edc:Peripheral edc:cname="PMERRLOC" edc:desc=""/>
    <edc:Peripheral edc:cname="PUF" edc:desc=""/>
    <edc:Peripheral edc:cname="PWM" edc:desc=""/>
    <edc:Peripheral edc:cname="QSPI" edc:desc=""/>
    <edc:Peripheral edc:cname="RSTC" edc:desc=""/>
    <edc:Peripheral edc:cname="RTC" edc:desc=""/>
    <edc:Peripheral edc:cname="RTT" edc:desc=""/>
    <edc:Peripheral edc:cname="SCKC" edc:desc=""/>
    <edc:Peripheral edc:cname="SDMMC0" edc:desc=""/>
    <edc:Peripheral edc:cname="SDMMC1" edc:desc=""/>
    <edc:Peripheral edc:cname="SFR" edc:desc=""/>
    <edc:Peripheral edc:cname="SHA" edc:desc=""/>
    <edc:Peripheral edc:cname="SHDWC" edc:desc=""/>
    <edc:Peripheral edc:cname="SMC" edc:desc=""/>
    <edc:Peripheral edc:cname="SSC" edc:desc=""/>
    <edc:Peripheral edc:cname="SYSCWP" edc:desc=""/>
    <edc:Peripheral edc:cname="TC0" edc:desc=""/>
    <edc:Peripheral edc:cname="TC1" edc:desc=""/>
    <edc:Peripheral edc:cname="TDES" edc:desc=""/>
    <edc:Peripheral edc:cname="TRNG" edc:desc=""/>
    <edc:Peripheral edc:cname="UDPHS" edc:desc=""/>
    <edc:Peripheral edc:cname="UHPHS_OHCI" edc:desc=""/>
    <edc:Peripheral edc:cname="UHPHS" edc:desc=""/>
    <edc:Peripheral edc:cname="UHPHS_EHCI" edc:desc=""/>
    <edc:Peripheral edc:cname="WDT" edc:desc=""/>
    <edc:Peripheral edc:cname="XDMAC" edc:desc=""/>
  </edc:PeripheralList>
  <edc:PhysicalSpace>
    <edc:NMMRPlace edc:regionid="corenmmrs">
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R0" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="0"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R1" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="4"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R2" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="8"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R3" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="12"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R4" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="16"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R5" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="20"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R6" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="24"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R7" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="28"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R8" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="32"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R9" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="36"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R10" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="40"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R11" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="44"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R12" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="48"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R8_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="476"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R9_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="480"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R10_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="484"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R11_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="488"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="R12_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="General-Purpose Register" edc:nmmrid="492"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="52"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP_SVC" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="544"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP_ABT" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="548"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP_UND" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="552"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP_IRQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="556"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SP_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Stack Pointer" edc:nmmrid="560"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="56"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR_SVC" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="568"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR_ABT" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="572"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR_UND" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="576"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR_IRQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="580"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="LR_FIQ" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="11111111111111111111111111111111" edc:mclr="11111111111111111111111111111111" edc:desc="Link Register" edc:nmmrid="584"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="PC" edc:impl="0xFFFFFFFF" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" edc:desc="Program Counter" edc:nmmrid="60"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="CPSR" edc:impl="0xFF0FFFFF" edc:access="nnnnnnnn----nnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Current Program Status Register" edc:nmmrid="496"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SPSR_SVC" edc:impl="0xFF0FFFFF" edc:access="nnnnnnnn----nnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Saved Program Status Register" edc:nmmrid="412"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SPSR_ABT" edc:impl="0xFF0FFFFF" edc:access="nnnnnnnn----nnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Saved Program Status Register" edc:nmmrid="416"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SPSR_UND" edc:impl="0xFF0FFFFF" edc:access="nnnnnnnn----nnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Saved Program Status Register" edc:nmmrid="424"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SPSR_IRQ" edc:impl="0xFF0FFFFF" edc:access="nnnnnnnn----nnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Saved Program Status Register" edc:nmmrid="420"/>
      <edc:SFRDef edc:nzwidth="0x20" edc:cname="SPSR_FIQ" edc:impl="0xFF0FFFFF" edc:access="nnnnnnnn----nnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:desc="Saved Program Status Register" edc:nmmrid="408"/>
    </edc:NMMRPlace>
    <edc:BootConfigSector edc:regionid="ECC_ROM" edc:beginaddr="0x100000" edc:endaddr="0x200000" edc:rw="r"/>
    <edc:GPRDataSector edc:regionid="IRAM0" edc:beginaddr="0x300000" edc:endaddr="0x400000" edc:isexecutable="true" edc:rw="rw"/>
    <edc:GPRDataSector edc:regionid="IRAM1" edc:beginaddr="0x400000" edc:endaddr="0x500000" edc:isexecutable="true" edc:rw="rw"/>
    <edc:GPRDataSector edc:regionid="UDPHS_RAM" edc:beginaddr="0x500000" edc:endaddr="0x600000" edc:isexecutable="true" edc:rw="rw"/>
    <edc:GPRDataSector edc:regionid="UHPHS_OHCI" edc:beginaddr="0x600000" edc:endaddr="0x700000" edc:isexecutable="true" edc:rw="rw">
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRevision" edc:nzwidth="0x20" edc:access="------------------------rrrrrrrr" edc:por="00000000000000000000000000010000" edc:mclr="00000000000000000000000000010000" edc:impl="0xFF" edc:_addr="0x600000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="REV" edc:nzwidth="0x8" edc:desc="OHCI Revision Number">
              <edc:SFRFieldSemantic edc:cname="0x10" edc:desc="This read-only field contains the BCD representation of the version of the HCI specification that is implemented by this HC. For example, a value of 11h corresponds to version 1.1. All of the HC implementations that are compliant with this specification will have a value of 10h." edc:when="(field &amp; 0xFF) == 0x10"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcControl" edc:nzwidth="0x20" edc:access="---------------------nnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x7FF" edc:_addr="0x600004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="CBSR" edc:nzwidth="0x2" edc:desc="Control/Bulk Service Ratio">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="1 control ED per bulk ED." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="0x1" edc:desc="2 control EDs per bulk ED." edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="0x2" edc:desc="3 control EDs per bulk ED." edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="0x3" edc:desc="4 control EDs per bulk ED." edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PLE" edc:nzwidth="0x1" edc:desc="Periodic List Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Periodic ED lists are not processed. Periodic list processing is disabled beginning with the next frame." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables processing of the periodic ED lists. Periodic list processing begins in the next frame." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="IE" edc:nzwidth="0x1" edc:desc="Isochronous Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Isochronous EDs are not processed. The USB1.1 host controller checks this bit every time it finds an isochronous ED in the periodic list." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables processing of isochronous EDs in the next frame, if not in the current frame." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CLE" edc:nzwidth="0x1" edc:desc="ControL List Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The control ED list is not processed in the next 1 ms frame. The host controller driver can modify the control ED list. If the driver removes the ED pointed to by the UHPFS_HcControlCurrentED register from the ED list, it must update the UHPFS_HcControlCurrentED register to point to a current ED before it reenables the control list." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables processing of the control ED list. The UHPFS_HcControlHeadED register must be 0 or point to a valid ED before setting this bit. The UHPFS_HcControlCurrentED register must be 0 or point to a valid ED before setting this bit." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLE" edc:nzwidth="0x1" edc:desc="Bulk List Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The bulk ED list is not processed in the next 1 ms frame. The host controller driver can modify the bulk ED list. If the driver removes the ED pointed to by the UHPFS_HcBulkCurrentED register from the ED list, it must update the UHPFS_HcBulkCurrentED register to point to a current ED before it reenables the bulk list." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables processing of the bulk ED list. The UHPFS_HcBulkHeadED register must be 0 or point to a valid ED before setting this bit. The UHPFS_HcBulkCurrentED register must be 0 or point to a valid ED before setting this bit." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HCFS" edc:nzwidth="0x2" edc:desc="Host Controller Functional State">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="USB reset." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="0x1" edc:desc="USB resume." edc:when="(field &amp; 0x3) == 0x1"/>
              <edc:SFRFieldSemantic edc:cname="0x2" edc:desc="USB operational." edc:when="(field &amp; 0x3) == 0x2"/>
              <edc:SFRFieldSemantic edc:cname="0x3" edc:desc="USB suspend." edc:when="(field &amp; 0x3) == 0x3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="IR" edc:nzwidth="0x1" edc:desc="Interrupt Routing">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The USB1.1 host controller does not provide an SMI interrupt. This bit must be 0 to allow the USB1.1 host controller interrupt to propagate to the MPU level 2 interrupt controller." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RWC" edc:nzwidth="0x1" edc:desc="Remote Wakeup Connected"/>
            <edc:SFRFieldDef edc:cname="RWE" edc:nzwidth="0x1" edc:desc="Remote Wakeup Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcCommandStatus" edc:nzwidth="0x20" edc:access="--------------nn------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3000F" edc:_addr="0x600008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="HCR" edc:nzwidth="0x1" edc:desc="Host Controller Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Initiates a software reset of the USB1.1 host controller. This transitions the USB1.1 host controller to the USB suspend state. This resets most USB1.1 host controller OHCI registers. OHCI register accesses must not be attempted until a read of this bit returns a 0. A write of 1 to this bit does not reset the root hub and does not signal USB reset to downstream USB functions." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CLF" edc:nzwidth="0x1" edc:desc="Control List Filled (read/write)"/>
            <edc:SFRFieldDef edc:cname="BLF" edc:nzwidth="0x1" edc:desc="Bulk List Filled (read/write)"/>
            <edc:SFRFieldDef edc:cname="OCR" edc:nzwidth="0x1" edc:desc="Ownership Change Request (read/write)"/>
            <edc:AdjustPoint edc:offset="0xC"/>
            <edc:SFRFieldDef edc:cname="SOC" edc:nzwidth="0x2" edc:desc="Scheduling Overrun Count (read-only)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcInterruptStatus" edc:nzwidth="0x20" edc:access="-n-----------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x4000007F" edc:_addr="0x60000C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="SO" edc:nzwidth="0x1" edc:desc="Scheduling Overrun (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="A scheduling overrun has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A scheduling overrun has occurred." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WDH" edc:nzwidth="0x1" edc:desc="Write Done Head (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="USB1.1 host controller has not updated the UHPFS_HcDoneHead register." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="USB1.1 host controller has updated the UHPFS_HcDoneHead register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SF" edc:nzwidth="0x1" edc:desc="Start of Frame (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="A SOF has not been issued." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A SOF has been issued." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RD" edc:nzwidth="0x1" edc:desc="Resume Detected (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="A downstream device has not issued a resume request." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A downstream device has issued a resume request." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UE" edc:nzwidth="0x1" edc:desc="Unrecoverable Error (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="An unrecoverable error has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An unrecoverable error has occurred on the OCPI bus, or that an isochronous TD PSW field condition code was not set to Not Accessed when the USB1.1 host controller attempted to perform a transfer using that PSW/offset pair." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FNO" edc:nzwidth="0x1" edc:desc="Frame Number Overflow (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="A frame number overflow has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A frame number overflow has occurred." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RHSC" edc:nzwidth="0x1" edc:desc="Root Hub Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="A root hub status change has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A root hub status change has occurred." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x17"/>
            <edc:SFRFieldDef edc:cname="OC" edc:nzwidth="0x1" edc:desc="Ownership Change (read-only)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcInterruptEnable" edc:nzwidth="0x20" edc:access="nn-----------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xC000007F" edc:_addr="0x600010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="SO" edc:nzwidth="0x1" edc:desc="Scheduling Overrun (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Scheduling overrun interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows scheduling overrun interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WDH" edc:nzwidth="0x1" edc:desc="Write Done Head (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Write done head interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows write done head interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SF" edc:nzwidth="0x1" edc:desc="Start of Frame (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Start of frame interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows start of frame interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RD" edc:nzwidth="0x1" edc:desc="Resume Detected (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Resume detected interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows resume detected interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UE" edc:nzwidth="0x1" edc:desc="Unrecoverable Error (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Unrecoverable error interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows unrecoverable error interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FNO" edc:nzwidth="0x1" edc:desc="Frame Number Overflow (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Frame number overflow interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows frame number overflow interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RHSC" edc:nzwidth="0x1" edc:desc="Root Hub Status Change (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Root hub status change interrupts do not propagate." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="When MIE is 1, allows root hub status change interrupts to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x17"/>
            <edc:SFRFieldDef edc:cname="OC" edc:nzwidth="0x1" edc:desc="Ownership Change (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Ignore." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enable interrupt generation due to Ownership Change." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="MIE" edc:nzwidth="0x1" edc:desc="Master Interrupt Enable (read/write, write '1' to set)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="OHCI interrupt sources are ignored and USB1.1 host controller interrupts are not propagated to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Allows other enabled OHCI interrupt sources to propagate to the level 2 interrupt controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcInterruptDisable" edc:nzwidth="0x20" edc:access="nn-----------------------nnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xC000007F" edc:_addr="0x600014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="SO" edc:nzwidth="0x1" edc:desc="Scheduling Overrun (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the SO bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WDH" edc:nzwidth="0x1" edc:desc="Write Done Head (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the WDH bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SF" edc:nzwidth="0x1" edc:desc="Start of Frame (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the SF bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RD" edc:nzwidth="0x1" edc:desc="Resume Detected (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the RD bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UE" edc:nzwidth="0x1" edc:desc="Unrecoverable Error (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the UE bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FNO" edc:nzwidth="0x1" edc:desc="Frame Number Overflow (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the FNO bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RHSC" edc:nzwidth="0x1" edc:desc="Root Hub Status Change (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the RHSC bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x17"/>
            <edc:SFRFieldDef edc:cname="OC" edc:nzwidth="0x1" edc:desc="Ownership Change (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Ignore." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Disable interrupt generation due to Ownership Change." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="MIE" edc:nzwidth="0x1" edc:desc="Master Interrupt Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the MIE bit in the UHPFS_HcInterruptEnable register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcHCCA" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnn--------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFF00" edc:_addr="0x600018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="HCCA" edc:nzwidth="0x18" edc:desc="Physical Address of the Beginning of the HCCA"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcPeriodCurrentED" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnn----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF0" edc:_addr="0x60001C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="PCED" edc:nzwidth="0x1C" edc:desc="Physical Address of the Current ED on the Periodic ED list"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcControlHeadED" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnn----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF0" edc:_addr="0x600020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="CHED" edc:nzwidth="0x1C" edc:desc="Physical Address of the Head ED on the Control ED list"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcControlCurrentED" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnn----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF0" edc:_addr="0x600024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="CCED" edc:nzwidth="0x1C" edc:desc="Physical Address of the Current ED on the Control ED List"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcBulkHeadED" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnn----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF0" edc:_addr="0x600028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="BHED" edc:nzwidth="0x1C" edc:desc="Physical Address of the Head ED on the Bulk ED List"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcBulkCurrentED" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnn----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF0" edc:_addr="0x60002C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="BCED" edc:nzwidth="0x1C" edc:desc="Physical Address of the Current ED on the Bulk ED List"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcDoneHead" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnn----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFF0" edc:_addr="0x600030">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="DH" edc:nzwidth="0x1C" edc:desc="Physical Address of the Last TD that has added to the done queue"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcFmInterval" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn--nnnnnnnnnnnnnn" edc:por="00000000000000000010111011011111" edc:mclr="00000000000000000010111011011111" edc:impl="0xFFFF3FFF" edc:_addr="0x600034">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="FRAMEINTERVAL" edc:nzwidth="0xE" edc:desc="Frame Interval"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="FSMPS" edc:nzwidth="0xF" edc:desc="Largest Data Packet"/>
            <edc:SFRFieldDef edc:cname="FIT" edc:nzwidth="0x1" edc:desc="Frame Interval Toggle"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcFmRemaining" edc:nzwidth="0x20" edc:access="n-----------------nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x80003FFF" edc:_addr="0x600038">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="FR" edc:nzwidth="0xE" edc:desc="Frame Remaining"/>
            <edc:AdjustPoint edc:offset="0x11"/>
            <edc:SFRFieldDef edc:cname="FRT" edc:nzwidth="0x1" edc:desc="Frame Remaining Toggle"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcFmNumber" edc:nzwidth="0x20" edc:access="----------------nnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0x60003C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="FN" edc:nzwidth="0x10" edc:desc="Frame Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcPeriodicStart" edc:nzwidth="0x20" edc:access="------------------nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3FFF" edc:_addr="0x600040">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="PS" edc:nzwidth="0xE" edc:desc="Periodic Start"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcLSThreshold" edc:nzwidth="0x20" edc:access="------------------nnnnnnnnnnnnnn" edc:por="00000000000000000000011000101000" edc:mclr="00000000000000000000011000101000" edc:impl="0x3FFF" edc:_addr="0x600044">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="LST" edc:nzwidth="0xE" edc:desc="Low-Speed Threshold"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRhDescriptorA" edc:nzwidth="0x20" edc:access="nnnnnnnn-----------nnnnnnnnnnnnn" edc:por="00001010000000000001001000000011" edc:mclr="00001010000000000001001000000011" edc:impl="0xFF001FFF" edc:_addr="0x600048">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="NDP" edc:nzwidth="0x8" edc:desc="Number of Downstream Ports (read-only)"/>
            <edc:SFRFieldDef edc:cname="PSM" edc:nzwidth="0x1" edc:desc="Power Switching Mode (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the device does not provide signals from the USB1.1 host controller to control external VBUS switching, this bit defaults to 0 that indicates that all ports are powered at the same time." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="NPS" edc:nzwidth="0x1" edc:desc="No Power Switching (read/write)">
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Because the device does not provide connections from the USB1.1 host controller to control external VBUS switching, this bit defaults to 1 that indicates that VBUS power switching is not supported and that power is available to all downstream ports when the USB1.1 host controller is powered. This bit has no relationship to the OTG controller register bits that relate to VBUS. System software can update this register to simplify host controller driver and/or OTG driver coding." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DT" edc:nzwidth="0x1" edc:desc="Device Type (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This bit is always 0, which indicates that the USB1.1 host controller implemented is not a compound device." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCPM" edc:nzwidth="0x1" edc:desc="Overcurrent Protection Mode (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the device does not provide host controller overcurrent protection input signals, this bit has no effect. This bit has no relationship to the OTG controller register bits that relate to VBUS." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="NOCP" edc:nzwidth="0x1" edc:desc="No Overcurrent Protection (read/write)">
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Because the device does not provide signals to allow connection of external overcurrent indication signals to the USB1.1 host controller, this bit defaults to 1 that indicates that the USB1.1 host controller does not implement overcurrent protection inputs. This bit has no relationship to the OTG controller register bits that relate to VBUS." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xB"/>
            <edc:SFRFieldDef edc:cname="POTPG" edc:nzwidth="0x8" edc:desc="Power-On to Power-good Time (read/write)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRhDescriptorB" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x60004C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="DR0" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR1" edc:nzwidth="0x1" edc:desc="Device Removable Bit for Downstream Port 1">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Downstream port 1 may have a removable device attached." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Downstream port 1 has a nonremovable device attached." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DR2" edc:nzwidth="0x1" edc:desc="Device Removable Bit for Downstream Port 2">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Downstream port 2 may have a removable device attached." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Downstream port 2 has a nonremovable device attached." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DR3" edc:nzwidth="0x1" edc:desc="Device Removable Bit for Downstream Port 3">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Downstream port 3 may have a removable device attached." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Downstream port 3 has a nonremovable device attached." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DR4" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR5" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR6" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR7" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR8" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR9" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR10" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR11" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR12" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR13" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR14" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="DR15" edc:nzwidth="0x1" edc:desc="Device Removable"/>
            <edc:SFRFieldDef edc:cname="PPCM0" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM1" edc:nzwidth="0x1" edc:desc="Port Power Control Mask for Downstream Port 1">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Global power control is implemented for downstream port 1." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Per-port power control is implemented for downstream port 1." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PPCM2" edc:nzwidth="0x1" edc:desc="Port Power Control Mask for Downstream Port 2">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Global power control is implemented for downstream port 2." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Per-port power control is implemented for downstream port 2." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PPCM3" edc:nzwidth="0x1" edc:desc="Port Power Control Mask for Downstream Port 3">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Global power control is implemented for downstream port 3." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Per-port power control is implemented for downstream port 3." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PPCM4" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM5" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM6" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM7" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM8" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM9" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM10" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM11" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM12" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM13" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM14" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
            <edc:SFRFieldDef edc:cname="PPCM15" edc:nzwidth="0x1" edc:desc="Port Power Control Mask"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRhStatus" edc:nzwidth="0x20" edc:access="n-------------nnn-------------nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x80038003" edc:_addr="0x600050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="LPS" edc:nzwidth="0x1" edc:desc="Local Power Status (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the root hub does not support the local power status feature, this bit defaults to 0 and has no effect. This bit has no relationship to the OTG controller register bits that relate to VBUS. System software can update this register to simplify host controller driver and/or OTG driver coding." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCI" edc:nzwidth="0x1" edc:desc="Overcurrent Indicator (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the device does not provide signals for external hardware to report overcurrent status to the USB1.1 host controller, this bit is always 0. This bit has no relationship to the OTG controller register bits that relate to VBUS." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xD"/>
            <edc:SFRFieldDef edc:cname="DRWE" edc:nzwidth="0x1" edc:desc="Device Remote Wakeup Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="A write of 0 has no effect. Connect status change events do not cause a transition from USB suspend to USB resume state and the resume detected interrupt is not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A write of 1 sets the device remote wakeup enable bit. This bit enables a connect status change event to be treated as a resume event, which causes a transition from USB suspend to USB resume state and sets the resume detected interrupt status bit." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LPSC" edc:nzwidth="0x1" edc:desc="Local Power Status Change (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the root hub does not support the local power status feature, this bit defaults to 0 and has no effect. This bit has no relationship to the OTG controller register bits that relate to VBUS. System software can update this register to simplify host controller driver and/or OTG driver coding." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCIC" edc:nzwidth="0x1" edc:desc="Overcurrent Indication Change (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears this bit." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xD"/>
            <edc:SFRFieldDef edc:cname="CRWE" edc:nzwidth="0x1" edc:desc="Clear Remote Wakeup Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Clears the device remote wakeup enable bit." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRhPortStatus0" edc:nzwidth="0x20" edc:access="-----------nnnnn------nn---nnnnn" edc:por="00000000000000000000000100000000" edc:mclr="00000000000000000000000100000000" edc:impl="0x1F031F" edc:_addr="0x600054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="CPE" edc:nzwidth="0x1" edc:desc="Port Current Connection Status/clear Port Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No USB device is attached to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="USB device is attached to port x." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPE" edc:nzwidth="0x1" edc:desc="Port Enable Status/set Port Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPS" edc:nzwidth="0x1" edc:desc="Port Suspend Status/set Port Suspend (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x is not in the USB suspend state." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is in the USB suspend state or is in the resume sequence." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="POCI" edc:nzwidth="0x1" edc:desc="Port Overcurrent Indicator/clear Suspend Status (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port overcurrent condition has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port overcurrent condition has occurred." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPR" edc:nzwidth="0x1" edc:desc="Port Reset Status/set Port Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="USB reset is not being sent to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is signaling the USB reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="SPP" edc:nzwidth="0x1" edc:desc="Port Power Status/set Port Power (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x power is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x power is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LSDA" edc:nzwidth="0x1" edc:desc="Low-speed Device Attached/clear Port Power (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Full-speed device is attached to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Low-speed device is attached to port x." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="CSC" edc:nzwidth="0x1" edc:desc="Connect Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x current connect status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x current connect status has changed due to a connect or disconnect event. If current connect status is 0 when a set port reset, set port enable, or set port suspend write occurs, then this bit is set." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PESC" edc:nzwidth="0x1" edc:desc="Port Enable Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port enable status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port enable status has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PSSC" edc:nzwidth="0x1" edc:desc="Port Suspend Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port suspend status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port suspend status has changed. Suspend status is considered to have changed only after the resume pulse, low-speed EOP, and 3-ms synchronization delays have been completed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCIC" edc:nzwidth="0x1" edc:desc="Overcurrent Indicator Change (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the device does not provide inputs for signaling external overcurrent indication to the USB1.1 host controller, this bit is always 0. Overcurrent monitoring, if required, must be handled through some other mechanism. This bit has no relationship to the OTG controller register bits that relate to VBUS." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PRSC" edc:nzwidth="0x1" edc:desc="Port Reset Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port reset status bit has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port reset status bit has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRhPortStatus1" edc:nzwidth="0x20" edc:access="-----------nnnnn------nn---nnnnn" edc:por="00000000000000000000000100000000" edc:mclr="00000000000000000000000100000000" edc:impl="0x1F031F" edc:_addr="0x600058">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="CPE" edc:nzwidth="0x1" edc:desc="Port Current Connection Status/clear Port Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No USB device is attached to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="USB device is attached to port x." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPE" edc:nzwidth="0x1" edc:desc="Port Enable Status/set Port Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPS" edc:nzwidth="0x1" edc:desc="Port Suspend Status/set Port Suspend (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x is not in the USB suspend state." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is in the USB suspend state or is in the resume sequence." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="POCI" edc:nzwidth="0x1" edc:desc="Port Overcurrent Indicator/clear Suspend Status (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port overcurrent condition has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port overcurrent condition has occurred." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPR" edc:nzwidth="0x1" edc:desc="Port Reset Status/set Port Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="USB reset is not being sent to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is signaling the USB reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="SPP" edc:nzwidth="0x1" edc:desc="Port Power Status/set Port Power (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x power is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x power is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LSDA" edc:nzwidth="0x1" edc:desc="Low-speed Device Attached/clear Port Power (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Full-speed device is attached to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Low-speed device is attached to port x." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="CSC" edc:nzwidth="0x1" edc:desc="Connect Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x current connect status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x current connect status has changed due to a connect or disconnect event. If current connect status is 0 when a set port reset, set port enable, or set port suspend write occurs, then this bit is set." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PESC" edc:nzwidth="0x1" edc:desc="Port Enable Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port enable status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port enable status has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PSSC" edc:nzwidth="0x1" edc:desc="Port Suspend Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port suspend status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port suspend status has changed. Suspend status is considered to have changed only after the resume pulse, low-speed EOP, and 3-ms synchronization delays have been completed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCIC" edc:nzwidth="0x1" edc:desc="Overcurrent Indicator Change (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the device does not provide inputs for signaling external overcurrent indication to the USB1.1 host controller, this bit is always 0. Overcurrent monitoring, if required, must be handled through some other mechanism. This bit has no relationship to the OTG controller register bits that relate to VBUS." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PRSC" edc:nzwidth="0x1" edc:desc="Port Reset Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port reset status bit has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port reset status bit has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_OHCI" edc:cname="UHPHS_OHCI_HcRhPortStatus2" edc:nzwidth="0x20" edc:access="-----------nnnnn------nn---nnnnn" edc:por="00000000000000000000000100000000" edc:mclr="00000000000000000000000100000000" edc:impl="0x1F031F" edc:_addr="0x60005C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_OHCI">
            <edc:SFRFieldDef edc:cname="CPE" edc:nzwidth="0x1" edc:desc="Port Current Connection Status/clear Port Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No USB device is attached to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="USB device is attached to port x." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPE" edc:nzwidth="0x1" edc:desc="Port Enable Status/set Port Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPS" edc:nzwidth="0x1" edc:desc="Port Suspend Status/set Port Suspend (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x is not in the USB suspend state." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is in the USB suspend state or is in the resume sequence." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="POCI" edc:nzwidth="0x1" edc:desc="Port Overcurrent Indicator/clear Suspend Status (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port overcurrent condition has not occurred." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port overcurrent condition has occurred." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SPR" edc:nzwidth="0x1" edc:desc="Port Reset Status/set Port Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="USB reset is not being sent to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x is signaling the USB reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="SPP" edc:nzwidth="0x1" edc:desc="Port Power Status/set Port Power (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x power is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x power is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LSDA" edc:nzwidth="0x1" edc:desc="Low-speed Device Attached/clear Port Power (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Full-speed device is attached to port x." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Low-speed device is attached to port x." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="CSC" edc:nzwidth="0x1" edc:desc="Connect Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x current connect status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x current connect status has changed due to a connect or disconnect event. If current connect status is 0 when a set port reset, set port enable, or set port suspend write occurs, then this bit is set." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PESC" edc:nzwidth="0x1" edc:desc="Port Enable Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port enable status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port enable status has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PSSC" edc:nzwidth="0x1" edc:desc="Port Suspend Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port suspend status has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port suspend status has changed. Suspend status is considered to have changed only after the resume pulse, low-speed EOP, and 3-ms synchronization delays have been completed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCIC" edc:nzwidth="0x1" edc:desc="Overcurrent Indicator Change (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Because the device does not provide inputs for signaling external overcurrent indication to the USB1.1 host controller, this bit is always 0. Overcurrent monitoring, if required, must be handled through some other mechanism. This bit has no relationship to the OTG controller register bits that relate to VBUS." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PRSC" edc:nzwidth="0x1" edc:desc="Port Reset Status Change (read/write, write '1' to clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port x port reset status bit has not changed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port x port reset status bit has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:GPRDataSector>
    <edc:GPRDataSector edc:regionid="UHPHS_EHCI" edc:beginaddr="0x700000" edc:endaddr="0x800000" edc:isexecutable="true" edc:rw="rw">
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_HCCAPBASE" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrr--------rrrrrrrr" edc:por="00000001000000000000000000010000" edc:mclr="00000001000000000000000000010000" edc:impl="0xFFFF00FF" edc:_addr="0x700000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="CAPLENGTH" edc:nzwidth="0x8" edc:desc="Capability Registers Length"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="HCIVERSION" edc:nzwidth="0x10" edc:desc="Host Controller Interface Version Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_HCSPARAMS" edc:nzwidth="0x20" edc:access="--------rrrr---rrrrrrrrr---rrrrr" edc:por="00000000000000000001001100000011" edc:mclr="00000000000000000001001100000011" edc:impl="0xF1FF1F" edc:_addr="0x700004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="N_PORTS" edc:nzwidth="0x4" edc:desc="Number of Ports"/>
            <edc:SFRFieldDef edc:cname="PPC" edc:nzwidth="0x1" edc:desc="Port Power Control"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="N_PCC" edc:nzwidth="0x4" edc:desc="Number of Ports per Companion Controller"/>
            <edc:SFRFieldDef edc:cname="N_CC" edc:nzwidth="0x4" edc:desc="Number of Companion Controllers"/>
            <edc:SFRFieldDef edc:cname="P_INDICATOR" edc:nzwidth="0x1" edc:desc="Port Indicators"/>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="N_DP" edc:nzwidth="0x4" edc:desc="Debug Port Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_HCCPARAMS" edc:nzwidth="0x20" edc:access="----------------rrrrrrrrrrrr-rrr" edc:por="00000000000000000000000000100110" edc:mclr="00000000000000000000000000100110" edc:impl="0xFFF7" edc:_addr="0x700008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="AC" edc:nzwidth="0x1" edc:desc="64-bit Addressing Capability">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Data structures using 32-bit address memory pointers" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Data structures using 64-bit address memory pointers" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PFLF" edc:nzwidth="0x1" edc:desc="Programmable Frame List Flag">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="System software must use a frame list length of 1024 elements with this host controller. The UHPHS_USBCMD register Frame List Size field is a read-only register and must be set to 0." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="System software can specify and use a smaller frame list and configure the host controller via the UHPHS_USBCMD register Frame List Size field. The frame list must always be aligned on a 4-Kbyte page boundary. This requirement ensures that the frame list is always physically contiguous." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ASPC" edc:nzwidth="0x1" edc:desc="Asynchronous Schedule Park Capability">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Host controller does not supports the park feature for high-speed queue." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Host controller supports the park feature for high-speed queue heads in the Asynchronous Schedule." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="IST" edc:nzwidth="0x4" edc:desc="Isochronous Scheduling Threshold"/>
            <edc:SFRFieldDef edc:cname="EECP" edc:nzwidth="0x8" edc:desc="EHCI Extended Capabilities Pointer"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x70000C"/>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_USBCMD" edc:nzwidth="0x20" edc:access="--------nnnnnnnn----n-nnnnnnnnnn" edc:por="00000000000010000000101100000000" edc:mclr="00000000000010000000101100000000" edc:impl="0xFF0BFF" edc:_addr="0x700010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="RS" edc:nzwidth="0x1" edc:desc="Run/Stop (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Host Controller completes the current and any actively pipelined transactions on the USB and then halts." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Host Controller proceeds with execution of the schedule." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HCRESET" edc:nzwidth="0x1" edc:desc="Host Controller Reset (read/write)"/>
            <edc:SFRFieldDef edc:cname="FLS" edc:nzwidth="0x2" edc:desc="Frame List Size (read/write or read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="1024 elements (4096 bytes)." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="512 elements (2048 bytes)." edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="2" edc:desc="256 elements (1024 bytes), for resource-constrained environments." edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="3" edc:desc="Reserved." edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PSE" edc:nzwidth="0x1" edc:desc="Periodic Schedule Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Do not process the Periodic Schedule." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Use the UHPHS_PERIODICLISTBASE register to access the Periodic Schedule." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ASE" edc:nzwidth="0x1" edc:desc="Asynchronous Schedule Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Do not process the Asynchronous Schedule." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Use the UHPHS_ASYNCLISTADDR register to access the Asynchronous Schedule." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="IAAD" edc:nzwidth="0x1" edc:desc="Interrupt on Async Advance Doorbell (read/write)"/>
            <edc:SFRFieldDef edc:cname="LHCR" edc:nzwidth="0x1" edc:desc="Light Host Controller Reset (optional) (read/write)"/>
            <edc:SFRFieldDef edc:cname="ASPMC" edc:nzwidth="0x2" edc:desc="Asynchronous Schedule Park Mode Count (optional) (read/write or read-only)"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ASPME" edc:nzwidth="0x1" edc:desc="Asynchronous Schedule Park Mode Enable (optional) (read/write or read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Park mode is enabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Park mode is disabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="ITC" edc:nzwidth="0x8" edc:desc="Interrupt Threshold Control (read/write)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_USBSTS" edc:nzwidth="0x20" edc:access="----------------nnnn------nnnnnn" edc:por="00000000000000000001000000000000" edc:mclr="00000000000000000001000000000000" edc:impl="0xF03F" edc:_addr="0x700014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="USBINT" edc:nzwidth="0x1" edc:desc="USB Interrupt (cleared on write)"/>
            <edc:SFRFieldDef edc:cname="USBERRINT" edc:nzwidth="0x1" edc:desc="USB Error Interrupt (cleared on write)"/>
            <edc:SFRFieldDef edc:cname="PCD" edc:nzwidth="0x1" edc:desc="Port Change Detect (cleared on write)"/>
            <edc:SFRFieldDef edc:cname="FLR" edc:nzwidth="0x1" edc:desc="Frame List Rollover (cleared on write)"/>
            <edc:SFRFieldDef edc:cname="HSE" edc:nzwidth="0x1" edc:desc="Host System Error (cleared on write)"/>
            <edc:SFRFieldDef edc:cname="IAA" edc:nzwidth="0x1" edc:desc="Interrupt on Async Advance (cleared on write)"/>
            <edc:AdjustPoint edc:offset="0x6"/>
            <edc:SFRFieldDef edc:cname="HCHLT" edc:nzwidth="0x1" edc:desc="HCHalted (read-only)"/>
            <edc:SFRFieldDef edc:cname="RCM" edc:nzwidth="0x1" edc:desc="Reclamation (read-only)"/>
            <edc:SFRFieldDef edc:cname="PSS" edc:nzwidth="0x1" edc:desc="Periodic Schedule Status (read-only)"/>
            <edc:SFRFieldDef edc:cname="ASS" edc:nzwidth="0x1" edc:desc="Asynchronous Schedule Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Asynchronous Schedule is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Asynchronous Schedule is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_USBINTR" edc:nzwidth="0x20" edc:access="--------------------------nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3F" edc:_addr="0x700018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="USBIE" edc:nzwidth="0x1" edc:desc="USBINT Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="USBEIE" edc:nzwidth="0x1" edc:desc="USBERRINT Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="PCIE" edc:nzwidth="0x1" edc:desc="Port Change Detect Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="FLRE" edc:nzwidth="0x1" edc:desc="Frame List Rollover Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="HSEE" edc:nzwidth="0x1" edc:desc="Host System Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="IAAE" edc:nzwidth="0x1" edc:desc="Interrupt on Async Advance Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_FRINDEX" edc:nzwidth="0x20" edc:access="------------------nnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3FFF" edc:_addr="0x70001C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="FI" edc:nzwidth="0xE" edc:desc="Frame Index"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x700020"/>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_PERIODICLISTBASE" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnn------------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFF000" edc:_addr="0x700024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:AdjustPoint edc:offset="0xC"/>
            <edc:SFRFieldDef edc:cname="BA" edc:nzwidth="0x14" edc:desc="Base Address (Low)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_ASYNCLISTADDR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnn-----" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFE0" edc:_addr="0x700028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="LPL" edc:nzwidth="0x1B" edc:desc="Link Pointer Low"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x24" edc:_addr="0x70002C"/>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_CONFIGFLAG" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x700050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="CF" edc:nzwidth="0x1" edc:desc="Configure Flag (Read/Write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port routing control logic default-routes each port to an implementation-dependent classic host controller (default value)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port routing control logic default-routes all ports to this host controller." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_PORTSC0" edc:nzwidth="0x20" edc:access="---------nnnnnnnnnnnnn-nnnnnnnnn" edc:por="00000000000000000011000000000000" edc:mclr="00000000000000000011000000000000" edc:impl="0x7FFDFF" edc:_addr="0x700054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="CCS" edc:nzwidth="0x1" edc:desc="Current Connect Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No device is present." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Device is present on port." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CSC" edc:nzwidth="0x1" edc:desc="Connect Status Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Change in Current Connect Status." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PED" edc:nzwidth="0x1" edc:desc="Port Enabled/Disabled (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disable." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enable." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PEDC" edc:nzwidth="0x1" edc:desc="Port Enable/Disable Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change in port enabled/disabled status." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port enabled/disabled status has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCA" edc:nzwidth="0x1" edc:desc="Over-current Active (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This port does not have an over-current condition." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="This port currently has an over-current condition." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCC" edc:nzwidth="0x1" edc:desc="Over-current Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change to Over-current Active." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Changes to Over-current Active." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FPR" edc:nzwidth="0x1" edc:desc="Force Port Resume (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No resume (K-state) detected/driven on port." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Resume detected/driven on port." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SUS" edc:nzwidth="0x1" edc:desc="Suspend (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port not in suspend state." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port in suspend state." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PR" edc:nzwidth="0x1" edc:desc="Port Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port is not in Reset." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port is in Reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="LS" edc:nzwidth="0x2" edc:desc="Line Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="SE0" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="K_STATE" edc:desc="Low-speed device, release ownership of port" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="J_STATE" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="UNDEFINED" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PP" edc:nzwidth="0x1" edc:desc="Port Power (read/write or read-only)"/>
            <edc:SFRFieldDef edc:cname="PO" edc:nzwidth="0x1" edc:desc="Port Owner (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This bit unconditionally goes to a 0 when the bit UHPHS_CONFIGFLAG.CF makes a 0 to 1 transition." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="This bit unconditionally goes to 1 whenever the bit UHPHS_CONFIGFLAG.CF=0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PIC" edc:nzwidth="0x2" edc:desc="Port Indicator Control (read/write)"/>
            <edc:SFRFieldDef edc:cname="PTC" edc:nzwidth="0x4" edc:desc="Port Test Control (read/write)"/>
            <edc:SFRFieldDef edc:cname="WKCNNT_E" edc:nzwidth="0x1" edc:desc="Wake on Connect Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to device connects as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to device connects as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WKDSCNNT_E" edc:nzwidth="0x1" edc:desc="Wake on Disconnect Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to device disconnects as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to device disconnects as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WKOC_E" edc:nzwidth="0x1" edc:desc="Wake on Over-current Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to over-current conditions as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to over-current conditions as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_PORTSC1" edc:nzwidth="0x20" edc:access="---------nnnnnnnnnnnnn-nnnnnnnnn" edc:por="00000000000000000011000000000000" edc:mclr="00000000000000000011000000000000" edc:impl="0x7FFDFF" edc:_addr="0x700058">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="CCS" edc:nzwidth="0x1" edc:desc="Current Connect Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No device is present." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Device is present on port." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CSC" edc:nzwidth="0x1" edc:desc="Connect Status Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Change in Current Connect Status." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PED" edc:nzwidth="0x1" edc:desc="Port Enabled/Disabled (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disable." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enable." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PEDC" edc:nzwidth="0x1" edc:desc="Port Enable/Disable Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change in port enabled/disabled status." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port enabled/disabled status has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCA" edc:nzwidth="0x1" edc:desc="Over-current Active (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This port does not have an over-current condition." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="This port currently has an over-current condition." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCC" edc:nzwidth="0x1" edc:desc="Over-current Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change to Over-current Active." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Changes to Over-current Active." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FPR" edc:nzwidth="0x1" edc:desc="Force Port Resume (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No resume (K-state) detected/driven on port." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Resume detected/driven on port." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SUS" edc:nzwidth="0x1" edc:desc="Suspend (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port not in suspend state." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port in suspend state." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PR" edc:nzwidth="0x1" edc:desc="Port Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port is not in Reset." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port is in Reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="LS" edc:nzwidth="0x2" edc:desc="Line Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="SE0" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="K_STATE" edc:desc="Low-speed device, release ownership of port" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="J_STATE" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="UNDEFINED" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PP" edc:nzwidth="0x1" edc:desc="Port Power (read/write or read-only)"/>
            <edc:SFRFieldDef edc:cname="PO" edc:nzwidth="0x1" edc:desc="Port Owner (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This bit unconditionally goes to a 0 when the bit UHPHS_CONFIGFLAG.CF makes a 0 to 1 transition." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="This bit unconditionally goes to 1 whenever the bit UHPHS_CONFIGFLAG.CF=0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PIC" edc:nzwidth="0x2" edc:desc="Port Indicator Control (read/write)"/>
            <edc:SFRFieldDef edc:cname="PTC" edc:nzwidth="0x4" edc:desc="Port Test Control (read/write)"/>
            <edc:SFRFieldDef edc:cname="WKCNNT_E" edc:nzwidth="0x1" edc:desc="Wake on Connect Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to device connects as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to device connects as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WKDSCNNT_E" edc:nzwidth="0x1" edc:desc="Wake on Disconnect Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to device disconnects as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to device disconnects as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WKOC_E" edc:nzwidth="0x1" edc:desc="Wake on Over-current Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to over-current conditions as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to over-current conditions as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_PORTSC2" edc:nzwidth="0x20" edc:access="---------nnnnnnnnnnnnn-nnnnnnnnn" edc:por="00000000000000000011000000000000" edc:mclr="00000000000000000011000000000000" edc:impl="0x7FFDFF" edc:_addr="0x70005C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="CCS" edc:nzwidth="0x1" edc:desc="Current Connect Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No device is present." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Device is present on port." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CSC" edc:nzwidth="0x1" edc:desc="Connect Status Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Change in Current Connect Status." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PED" edc:nzwidth="0x1" edc:desc="Port Enabled/Disabled (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disable." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enable." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PEDC" edc:nzwidth="0x1" edc:desc="Port Enable/Disable Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change in port enabled/disabled status." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port enabled/disabled status has changed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCA" edc:nzwidth="0x1" edc:desc="Over-current Active (read-only)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This port does not have an over-current condition." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="This port currently has an over-current condition." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OCC" edc:nzwidth="0x1" edc:desc="Over-current Change (read/write clear)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No change to Over-current Active." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Changes to Over-current Active." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FPR" edc:nzwidth="0x1" edc:desc="Force Port Resume (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No resume (K-state) detected/driven on port." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Resume detected/driven on port." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SUS" edc:nzwidth="0x1" edc:desc="Suspend (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port not in suspend state." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port in suspend state." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PR" edc:nzwidth="0x1" edc:desc="Port Reset (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Port is not in Reset." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Port is in Reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="LS" edc:nzwidth="0x2" edc:desc="Line Status (read-only)">
              <edc:SFRFieldSemantic edc:cname="SE0" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="K_STATE" edc:desc="Low-speed device, release ownership of port" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="J_STATE" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="UNDEFINED" edc:desc="Not a low-speed device, perform EHCI reset" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PP" edc:nzwidth="0x1" edc:desc="Port Power (read/write or read-only)"/>
            <edc:SFRFieldDef edc:cname="PO" edc:nzwidth="0x1" edc:desc="Port Owner (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="This bit unconditionally goes to a 0 when the bit UHPHS_CONFIGFLAG.CF makes a 0 to 1 transition." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="This bit unconditionally goes to 1 whenever the bit UHPHS_CONFIGFLAG.CF=0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PIC" edc:nzwidth="0x2" edc:desc="Port Indicator Control (read/write)"/>
            <edc:SFRFieldDef edc:cname="PTC" edc:nzwidth="0x4" edc:desc="Port Test Control (read/write)"/>
            <edc:SFRFieldDef edc:cname="WKCNNT_E" edc:nzwidth="0x1" edc:desc="Wake on Connect Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to device connects as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to device connects as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WKDSCNNT_E" edc:nzwidth="0x1" edc:desc="Wake on Disconnect Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to device disconnects as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to device disconnects as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WKOC_E" edc:nzwidth="0x1" edc:desc="Wake on Over-current Enable (read/write)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the port to be sensitive to over-current conditions as wake-up events." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the port to be sensitive to over-current conditions as wake-up events." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x48" edc:_addr="0x700060"/>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_INSNREG06" edc:nzwidth="0x20" edc:access="n-------------------nnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x80000FFF" edc:_addr="0x7000A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="Nb_Success_Burst" edc:nzwidth="0x4" edc:desc="Number of Successful Bursts (Read-only)"/>
            <edc:SFRFieldDef edc:cname="Nb_Burst" edc:nzwidth="0x5" edc:desc="Number of Bursts (Read-only)"/>
            <edc:SFRFieldDef edc:cname="HBURST" edc:nzwidth="0x3" edc:desc="Burst Value (Read-only)"/>
            <edc:AdjustPoint edc:offset="0x13"/>
            <edc:SFRFieldDef edc:cname="AHB_ERR" edc:nzwidth="0x1" edc:desc="AHB Error"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="UHPHS_EHCI" edc:cname="UHPHS_EHCI_INSNREG07" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x7000AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="UHPHS_EHCI">
            <edc:SFRFieldDef edc:cname="AHB_ADDR" edc:nzwidth="0x20" edc:desc="AHB Address (Read Only)"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:GPRDataSector>
    <edc:ExternalSector edc:regionid="EBI_CS0" edc:beginaddr="0x10000000" edc:endaddr="0x20000000" edc:isexecutable="true" edc:rw="rw" edc:type="ram" edc:accessprotocol="ebi"/>
    <edc:ExternalSector edc:regionid="EBI_CS1" edc:beginaddr="0x20000000" edc:endaddr="0x30000000" edc:isexecutable="true" edc:rw="rw" edc:type="ram" edc:accessprotocol="ebi"/>
    <edc:ExternalSector edc:regionid="EBI_MPDDR" edc:beginaddr="0x20000000" edc:endaddr="0x30000000" edc:isexecutable="true" edc:rw="rw" edc:type="ram" edc:accessprotocol="ddr"/>
    <edc:ExternalSector edc:regionid="EBI_CS2" edc:beginaddr="0x30000000" edc:endaddr="0x40000000" edc:isexecutable="true" edc:rw="rw" edc:type="ram" edc:accessprotocol="ebi"/>
    <edc:ExternalSector edc:regionid="EBI_NF" edc:beginaddr="0x30000000" edc:endaddr="0x40000000" edc:isexecutable="true" edc:rw="rw" edc:type="ram" edc:accessprotocol="ebi"/>
    <edc:ExternalSector edc:regionid="QSPI_MEM" edc:beginaddr="0x60000000" edc:endaddr="0x80000000" edc:isexecutable="true" edc:rw="rw" edc:type="ram" edc:accessprotocol="qspi"/>
    <edc:GPRDataSector edc:regionid="SDMMC0" edc:beginaddr="0x80000000" edc:endaddr="0x90000000" edc:isexecutable="true" edc:rw="rw">
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_SSAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x80000000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="ARG2" edc:nzwidth="0x20" edc:desc="Argument 2"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_BSR" edc:nzwidth="0x10" edc:access="-nnn--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x73FF" edc:_addr="0x80000004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="BLKSIZE" edc:nzwidth="0xA" edc:desc="Transfer Block Size"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOUNDARY" edc:nzwidth="0x3" edc:desc="SDMA Buffer Boundary">
              <edc:SFRFieldSemantic edc:cname="4K" edc:desc="4-Kbyte boundary" edc:when="(field &amp; 0x7) == 0"/>
              <edc:SFRFieldSemantic edc:cname="8K" edc:desc="8-Kbyte boundary" edc:when="(field &amp; 0x7) == 1"/>
              <edc:SFRFieldSemantic edc:cname="16K" edc:desc="16-Kbyte boundary" edc:when="(field &amp; 0x7) == 2"/>
              <edc:SFRFieldSemantic edc:cname="32K" edc:desc="32-Kbyte boundary" edc:when="(field &amp; 0x7) == 3"/>
              <edc:SFRFieldSemantic edc:cname="64K" edc:desc="64-Kbyte boundary" edc:when="(field &amp; 0x7) == 4"/>
              <edc:SFRFieldSemantic edc:cname="128K" edc:desc="128-Kbyte boundary" edc:when="(field &amp; 0x7) == 5"/>
              <edc:SFRFieldSemantic edc:cname="256k" edc:desc="256-Kbyte boundary" edc:when="(field &amp; 0x7) == 6"/>
              <edc:SFRFieldSemantic edc:cname="512K" edc:desc="512-Kbyte boundary" edc:when="(field &amp; 0x7) == 7"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_BCR" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:_addr="0x80000006">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="BLKCNT" edc:nzwidth="0x10" edc:desc="Block Count for Current Transfer"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_ARG1R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x80000008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="ARG1" edc:nzwidth="0x20" edc:desc="Argument 1"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_TMR" edc:nzwidth="0x10" edc:access="----------nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3F" edc:_addr="0x8000000C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="DMAEN" edc:nzwidth="0x1" edc:desc="DMA Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="DMA functionality is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="DMA functionality is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BCEN" edc:nzwidth="0x1" edc:desc="Block Count Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Block count is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Block count is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMDEN" edc:nzwidth="0x2" edc:desc="Auto Command Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Auto Command Disabled" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="CMD12" edc:desc="Auto CMD12 Enabled" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="CMD23" edc:desc="Auto CMD23 Enabled" edc:when="(field &amp; 0x3) == 2"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DTDSEL" edc:nzwidth="0x1" edc:desc="Data Transfer Direction Selection">
              <edc:SFRFieldSemantic edc:cname="WRITE" edc:desc="Writes data from the SDMMC to the device." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="READ" edc:desc="Reads data from the device to the SDMMC." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="MSBSEL" edc:nzwidth="0x1" edc:desc="Multi/Single Block Selection"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_CR" edc:nzwidth="0x10" edc:access="--nnnnnnnnnnn-nn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3FFB" edc:_addr="0x8000000E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="RESPTYP" edc:nzwidth="0x2" edc:desc="Response Type">
              <edc:SFRFieldSemantic edc:cname="NORESP" edc:desc="No Response" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="RL136" edc:desc="Response Length 136" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="RL48" edc:desc="Response Length 48" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="RL48BUSY" edc:desc="Response Length 48 with Busy" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CMDCCEN" edc:nzwidth="0x1" edc:desc="Command CRC Check Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="The Command CRC Check is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The Command CRC Check is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDICEN" edc:nzwidth="0x1" edc:desc="Command Index Check Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="The Command Index Check is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The Command Index Check is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DPSEL" edc:nzwidth="0x1" edc:desc="Data Present Select">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No data present" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Data present" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDTYP" edc:nzwidth="0x2" edc:desc="Command Type">
              <edc:SFRFieldSemantic edc:cname="NORMAL" edc:desc="Other commands" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="SUSPEND" edc:desc="CMD52 to write &quot;Bus Suspend&quot; in the Card Common Control Registers (CCCR) (for SDIO only)" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="RESUME" edc:desc="CMD52 to write &quot;Function Select&quot; in the Card Common Control Registers (CCCR) (for SDIO only)" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="ABORT" edc:desc="CMD12, CMD52 to write &quot;I/O Abort&quot; in the Card Common Control Registers (CCCR) (for SDIO only)" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x6" edc:desc="Command Index"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_RR0" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x80000010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_RR1" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x80000014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_RR2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x80000018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_RR3" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x8000001C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_BDPR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0x80000020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="BUFDATA" edc:nzwidth="0x20" edc:desc="Buffer Data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_PSR" edc:nzwidth="0x20" edc:access="-------rrrrr--------rrrr-----rrr" edc:por="00000000111110000000000000000000" edc:mclr="00000000111110000000000000000000" edc:impl="0x1F00F07" edc:_addr="0x80000024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDINHC" edc:nzwidth="0x1" edc:desc="Command Inhibit (CMD)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Can issue a command using only CMD line." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Cannot issue a command." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDINHD" edc:nzwidth="0x1" edc:desc="Command Inhibit (DAT)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Can issue a command which uses the DAT line(s)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Cannot issue a command which uses the DAT line(s)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DLACT" edc:nzwidth="0x1" edc:desc="DAT Line Active">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="DAT line inactive." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="DAT line active." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="WTACT" edc:nzwidth="0x1" edc:desc="Write Transfer Active"/>
            <edc:SFRFieldDef edc:cname="RTACT" edc:nzwidth="0x1" edc:desc="Read Transfer Active"/>
            <edc:SFRFieldDef edc:cname="BUFWREN" edc:nzwidth="0x1" edc:desc="Buffer Write Enable"/>
            <edc:SFRFieldDef edc:cname="BUFRDEN" edc:nzwidth="0x1" edc:desc="Buffer Read Enable"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="DATLL" edc:nzwidth="0x4" edc:desc="DAT[3:0] Line Level"/>
            <edc:SFRFieldDef edc:cname="CMDLL" edc:nzwidth="0x1" edc:desc="CMD Line Level"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_HC1R" edc:nzwidth="0x8" edc:access="--nnnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3F" edc:_addr="0x80000028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="LEDCTRL" edc:nzwidth="0x1" edc:desc="LED Control">
              <edc:SFRFieldSemantic edc:cname="OFF" edc:desc="LED off." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ON" edc:desc="LED on." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DW" edc:nzwidth="0x1" edc:desc="Data Width">
              <edc:SFRFieldSemantic edc:cname="_1_BIT" edc:desc="1-bit mode." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="_4_BIT" edc:desc="4-bit mode." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HSEN" edc:nzwidth="0x1" edc:desc="High Speed Enable"/>
            <edc:SFRFieldDef edc:cname="DMASEL" edc:nzwidth="0x2" edc:desc="DMA Select">
              <edc:SFRFieldSemantic edc:cname="SDMA" edc:desc="SDMA is selected" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="ADMA32" edc:desc="32-bit Address ADMA2 is selected" edc:when="(field &amp; 0x3) == 0x2"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EXTDW" edc:nzwidth="0x1" edc:desc="Extended Data Width"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_PCR" edc:nzwidth="0x8" edc:access="-------n" edc:por="00001110" edc:mclr="00001110" edc:impl="0x1" edc:_addr="0x80000029">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SDBPWR" edc:nzwidth="0x1" edc:desc="SD Bus Power"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_BGCR" edc:nzwidth="0x8" edc:access="----nnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0xF" edc:_addr="0x8000002A">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="STPBGR" edc:nzwidth="0x1" edc:desc="Stop At Block Gap Request">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Transfer" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Stop" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CONTR" edc:nzwidth="0x1" edc:desc="Continue Request">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Restart." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RWCTRL" edc:nzwidth="0x1" edc:desc="Read Wait Control">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables Read Wait control." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables Read Wait control." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INTBG" edc:nzwidth="0x1" edc:desc="Interrupt at Block Gap">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Interrupt detection disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Interrupt detection enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_WCR" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x8000002B">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="WKENCINT" edc:nzwidth="0x1" edc:desc="Wakeup Event Enable on Card Interrupt">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Wakeup Event disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Wakeup Event enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_CCR" edc:nzwidth="0x10" edc:access="nnnnnnnnnnn--nnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFE7" edc:_addr="0x8000002C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="INTCLKEN" edc:nzwidth="0x1" edc:desc="Internal Clock Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The internal clock stops." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The internal clock oscillates." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INTCLKS" edc:nzwidth="0x1" edc:desc="Internal Clock Stable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Internal clock not ready." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Internal clock ready." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SDCLKEN" edc:nzwidth="0x1" edc:desc="SD Clock Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SD Clock disabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SD Clock enabled" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Divided Clock mode (BASECLK is used to generate SDCLK)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Programmable Clock mode (MULTCLK is used to generate SDCLK)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="USDCLKFSEL" edc:nzwidth="0x2" edc:desc="Upper Bits of SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0x8" edc:desc="SDCLK Frequency Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_TCR" edc:nzwidth="0x8" edc:access="----nnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0xF" edc:_addr="0x8000002E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="DTCVAL" edc:nzwidth="0x4" edc:desc="Data Timeout Counter Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_SRR" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x8000002F">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SWRSTALL" edc:nzwidth="0x1" edc:desc="Software reset for All">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Work" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SWRSTCMD" edc:nzwidth="0x1" edc:desc="Software reset for CMD line">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Work" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SWRSTDAT" edc:nzwidth="0x1" edc:desc="Software reset for DAT line">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Work" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_NISTR" edc:nzwidth="0x10" edc:access="nn-----n--nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xC13F" edc:_addr="0x80000030">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDC" edc:nzwidth="0x1" edc:desc="Command Complete"/>
            <edc:SFRFieldDef edc:cname="TRFC" edc:nzwidth="0x1" edc:desc="Transfer Complete">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Command execution is not complete." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Command execution is complete." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLKGE" edc:nzwidth="0x1" edc:desc="Block Gap Event"/>
            <edc:SFRFieldDef edc:cname="DMAINT" edc:nzwidth="0x1" edc:desc="DMA Interrupt"/>
            <edc:SFRFieldDef edc:cname="BWRRDY" edc:nzwidth="0x1" edc:desc="Buffer Write Ready">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Not ready to write buffer." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Ready to write buffer." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BRDRDY" edc:nzwidth="0x1" edc:desc="Buffer Read Ready">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Not ready to read buffer." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Ready to read buffer." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CINT" edc:nzwidth="0x1" edc:desc="Card Interrupt">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No card interrupt." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Card interrupt." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="BOOTAR" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Received">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Boot Acknowledge pattern not received." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Boot Acknowledge pattern received." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ERRINT" edc:nzwidth="0x1" edc:desc="Error Interrupt">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_EISTR" edc:nzwidth="0x10" edc:access="---n--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x13FF" edc:_addr="0x80000032">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Command Timeout Error"/>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Command CRC Error"/>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Command End Bit Error"/>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Command Index Error"/>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Data Timeout error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Data CRC error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Data End Bit Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Current Limit Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Auto CMD Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="ADMA Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_NISTER" edc:nzwidth="0x10" edc:access="-n-----n--nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x413F" edc:_addr="0x80000034">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDC" edc:nzwidth="0x1" edc:desc="Command Complete Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDC status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDC status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="TRFC" edc:nzwidth="0x1" edc:desc="Transfer Complete Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The TRFC status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The TRFC status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLKGE" edc:nzwidth="0x1" edc:desc="Block Gap Event Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BLKGE status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BLKGE status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DMAINT" edc:nzwidth="0x1" edc:desc="DMA Interrupt Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DMAINT status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DMAINT status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BWRRDY" edc:nzwidth="0x1" edc:desc="Buffer Write Ready Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BWRRDY status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BWRRDY status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BRDRDY" edc:nzwidth="0x1" edc:desc="Buffer Read Ready Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BRDRDY status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BRDRDY status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CINT" edc:nzwidth="0x1" edc:desc="Card Interrupt Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CINT status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CINT status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="BOOTAR" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Received Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BOOTAR status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BOOTAR status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_EISTER" edc:nzwidth="0x10" edc:access="---n--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x13FF" edc:_addr="0x80000036">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Command Timeout Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDTEO status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDTEO status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Command CRC Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDCRC status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDCRC status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Command End Bit Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDEND status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDEND status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Command Index Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDIDX status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDIDX status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Data Timeout Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DATTEO status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DATTEO status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Data CRC Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DATCRC status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DATCRC status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Data End Bit Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DATEND status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DATEND status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Current Limit Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CURLIM status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CURLIM status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Auto CMD Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The ACMD status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The ACMD status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="ADMA Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The ADMA status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The ADMA status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BOOTAE status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BOOTAE status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_NISIER" edc:nzwidth="0x10" edc:access="-n-----n--nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x413F" edc:_addr="0x80000038">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDC" edc:nzwidth="0x1" edc:desc="Command Complete Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="TRFC" edc:nzwidth="0x1" edc:desc="Transfer Complete Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the TRFC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the TRFC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLKGE" edc:nzwidth="0x1" edc:desc="Block Gap Event Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BLKGE status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BLKGE status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DMAINT" edc:nzwidth="0x1" edc:desc="DMA Interrupt Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DMAINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DMAINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BWRRDY" edc:nzwidth="0x1" edc:desc="Buffer Write Ready Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BWRRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BWRRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BRDRDY" edc:nzwidth="0x1" edc:desc="Buffer Read Ready Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BRDRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BRDRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CINT" edc:nzwidth="0x1" edc:desc="Card Interrupt Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="BOOTAR" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Received Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BOOTAR status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BOOTAR status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_EISIER" edc:nzwidth="0x10" edc:access="---n--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x13FF" edc:_addr="0x8000003A">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Command Timeout Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Command CRC Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CDMCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Command End Bit Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Command Index Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDIDX status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDIDX status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Data Timeout Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DATTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DATTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Data CRC Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DATCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DATCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Data End Bit Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DATEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DATEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Current Limit Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CURLIM status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CURLIM status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Auto CMD Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the ACMD status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the ACMD status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="ADMA Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the ADMA status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the ADMA status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BOOTAE status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BOOTAE status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_ACESR" edc:nzwidth="0x10" edc:access="--------r--rrrrr" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x9F" edc:_addr="0x8000003C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="ACMD12NE" edc:nzwidth="0x1" edc:desc="Auto CMD12 Not Executed">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMDTEO" edc:nzwidth="0x1" edc:desc="Auto CMD Timeout Error"/>
            <edc:SFRFieldDef edc:cname="ACMDCRC" edc:nzwidth="0x1" edc:desc="Auto CMD CRC Error"/>
            <edc:SFRFieldDef edc:cname="ACMDEND" edc:nzwidth="0x1" edc:desc="Auto CMD End Bit Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMDIDX" edc:nzwidth="0x1" edc:desc="Auto CMD Index Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CMDNI" edc:nzwidth="0x1" edc:desc="Command Not Issued by Auto CMD12 Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_HC2R" edc:nzwidth="0x10" edc:access="nn--------------" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xC000" edc:_addr="0x8000003E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:AdjustPoint edc:offset="0xE"/>
            <edc:SFRFieldDef edc:cname="ASINTEN" edc:nzwidth="0x1" edc:desc="Asynchronous Interrupt Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enabled" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PVALEN" edc:nzwidth="0x1" edc:desc="Preset Value Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDCLK and Driver strength are controlled by the user." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Automatic selection by Preset Value is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_CA0R" edc:nzwidth="0x20" edc:access="nnnn-nnnnnn-nnnnnnnnnnnnn-nnnnnn" edc:por="00100111111010000011001010110010" edc:mclr="00100111111010000011001010110010" edc:impl="0xF7EFFFBF" edc:_addr="0x80000040">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="TEOCLKF" edc:nzwidth="0x6" edc:desc="Timeout Clock Frequency"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TEOCLKU" edc:nzwidth="0x1" edc:desc="Timeout Clock Unit">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="KHz" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="MHz" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BASECLKF" edc:nzwidth="0x8" edc:desc="Base Clock Frequency"/>
            <edc:SFRFieldDef edc:cname="MAXBLKL" edc:nzwidth="0x2" edc:desc="Max Block Length">
              <edc:SFRFieldSemantic edc:cname="512" edc:desc="512 bytes" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1024" edc:desc="1024 bytes" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="2048" edc:desc="2048 bytes" edc:when="(field &amp; 0x3) == 2"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ED8SUP" edc:nzwidth="0x1" edc:desc="8-Bit Support for Embedded Device">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="8-bit bus width not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="8-bit bus width supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA2SUP" edc:nzwidth="0x1" edc:desc="ADMA2 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="ADMA2 not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="ADMA2 supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="HSSUP" edc:nzwidth="0x1" edc:desc="High Speed Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="High Speed not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="High Speed supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SDMASUP" edc:nzwidth="0x1" edc:desc="SDMA Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDMA not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SDMA supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SRSUP" edc:nzwidth="0x1" edc:desc="Suspend/Resume Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Suspend/Resume not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Suspend/Resume supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="V33VSUP" edc:nzwidth="0x1" edc:desc="Voltage Support 3.3V">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="3.3V Voltage supply not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="3.3V Voltage supply supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="V30VSUP" edc:nzwidth="0x1" edc:desc="Voltage Support 3.0V">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="3.0V Voltage supply not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="3.0V Voltage supply supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="V18VSUP" edc:nzwidth="0x1" edc:desc="Voltage Support 1.8V">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="1.8V Voltage supply not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="1.8V Voltage supply supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SB64SUP" edc:nzwidth="0x1" edc:desc="64-Bit System Bus Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="64-bit address bus not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="64-bit address bus supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ASINTSUP" edc:nzwidth="0x1" edc:desc="Asynchronous Interrupt Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Asynchronous interrupt not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Asynchronous interrupt supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SLTYPE" edc:nzwidth="0x2" edc:desc="Slot Type">
              <edc:SFRFieldSemantic edc:cname="REMOVABLECARD" edc:desc="Removable Card Slot" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="EMBEDDED" edc:desc="Embedded Slot for One Device" edc:when="(field &amp; 0x3) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_CA1R" edc:nzwidth="0x20" edc:access="--------nnnnnnnn---------nnn-nnn" edc:por="00100111111010000011001010110010" edc:mclr="00100111111010000011001010110010" edc:impl="0xFF0077" edc:_addr="0x80000044">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SDR50SUP" edc:nzwidth="0x1" edc:desc="SDR50 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDR50 mode is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SDR50 mode is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SDR104SUP" edc:nzwidth="0x1" edc:desc="SDR104 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDR104 mode is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SDR104 mode is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DDR50SUP" edc:nzwidth="0x1" edc:desc="DDR50 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="DDR50 mode is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="DDR50 mode is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DRVASUP" edc:nzwidth="0x1" edc:desc="Driver Type A Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Driver type A is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Driver type A is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DRVCSUP" edc:nzwidth="0x1" edc:desc="Driver Type C Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Driver type C is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Driver type C is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DRVDSUP" edc:nzwidth="0x1" edc:desc="Driver Type D Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Driver type D is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Driver type D is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="CLKMULT" edc:nzwidth="0x8" edc:desc="Clock Multiplier"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_MCCAR" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFF" edc:_addr="0x80000048">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="MAXCUR33V" edc:nzwidth="0x8" edc:desc="Maximum Current for 3.3V"/>
            <edc:SFRFieldDef edc:cname="MAXCUR30V" edc:nzwidth="0x8" edc:desc="Maximum Current for 3.0V"/>
            <edc:SFRFieldDef edc:cname="MAXCUR18V" edc:nzwidth="0x8" edc:desc="Maximum Current for 1.8V"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x8000004C"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_FERACES" edc:nzwidth="0x10" edc:access="--------w--wwwww" edc:impl="0x9F" edc:_addr="0x80000050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="ACMD12NE" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD12 Not Executed"/>
            <edc:SFRFieldDef edc:cname="ACMDTEO" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD Timeout Error"/>
            <edc:SFRFieldDef edc:cname="ACMDCRC" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD CRC Error"/>
            <edc:SFRFieldDef edc:cname="ACMDEND" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD End Bit Error"/>
            <edc:SFRFieldDef edc:cname="ACMDIDX" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD Index Error"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CMDNI" edc:nzwidth="0x1" edc:desc="Force Event for Command Not Issued by Auto CMD12 Error"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_FEREIS" edc:nzwidth="0x10" edc:access="---w--wwwwwwwwww" edc:impl="0x13FF" edc:_addr="0x80000052">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Force Event for Command Timeout Error"/>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Force Event for Command CRC Error"/>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Force Event for Command End Bit Error"/>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Force Event for Command Index Error"/>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Force Event for Data Timeout error"/>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Force Event for Data CRC error"/>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Force Event for Data End Bit Error"/>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Force Event for Current Limit Error"/>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD Error"/>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="Force Event for ADMA Error"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Force Event for Boot Acknowledge Error"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_AESR" edc:nzwidth="0x8" edc:access="-----rrr" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x80000054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="ERRST" edc:nzwidth="0x2" edc:desc="ADMA Error State">
              <edc:SFRFieldSemantic edc:cname="STOP" edc:desc="(Stop DMA) SDMMC_ASAR points to the descriptor following the error descriptor" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="FDS" edc:desc="(Fetch Descriptor) SDMMC_ASAR points to the error descriptor" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="TFR" edc:desc="(Transfer Data) SDMMC_ASAR points to the descriptor following the error descriptor" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LMIS" edc:nzwidth="0x1" edc:desc="ADMA Length Mismatch Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x80000055"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_ASAR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x80000058">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="ADMASA" edc:nzwidth="0x20" edc:desc="ADMA System Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x8000005C"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_PVR0" edc:nzwidth="0x10" edc:access="-----nnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x7FF" edc:_addr="0x80000060">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0xA" edc:desc="SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_PVR1" edc:nzwidth="0x10" edc:access="-----nnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x7FF" edc:_addr="0x80000062">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0xA" edc:desc="SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_PVR2" edc:nzwidth="0x10" edc:access="-----nnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x7FF" edc:_addr="0x80000064">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0xA" edc:desc="SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x96" edc:_addr="0x80000066"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_SISR" edc:nzwidth="0x10" edc:access="--------------rr" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3" edc:_addr="0x800000FC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="INTSSL" edc:nzwidth="0x2" edc:desc="Interrupt Signal for Each Slot"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_HCVR" edc:nzwidth="0x10" edc:access="rrrrrrrrrrrrrrrr" edc:por="0001100000000010" edc:mclr="0001100000000010" edc:_addr="0x800000FE">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SVER" edc:nzwidth="0x8" edc:desc="Specification Version Number"/>
            <edc:SFRFieldDef edc:cname="VVER" edc:nzwidth="0x8" edc:desc="Vendor Version Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x100" edc:_addr="0x80000100"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_APSR" edc:nzwidth="0x20" edc:access="----------------------------rrrr" edc:por="00000000000000000000000000001111" edc:mclr="00000000000000000000000000001111" edc:impl="0xF" edc:_addr="0x80000200">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="HDATLL" edc:nzwidth="0x4" edc:desc="DAT[7:4] High Line Level"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_MC1R" edc:nzwidth="0x8" edc:access="--nnn-nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3B" edc:_addr="0x80000204">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CMDTYP" edc:nzwidth="0x2" edc:desc="e.MMC Command Type">
              <edc:SFRFieldSemantic edc:cname="NORMAL" edc:desc="The command is not an e.MMC specific command." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="WAITIRQ" edc:desc="This bit must be set to 1 when the e.MMC is in Interrupt mode (CMD40). See &quot;Interrupt Mode&quot; in the Embedded MultiMedia Card (e.MMC) Electrical Standard 4.51." edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="STREAM" edc:desc="This bit must be set to 1 in the case of Stream Read(CMD11) or Stream Write (CMD20). Only effective for e.MMC up to revision 4.41." edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="BOOT" edc:desc="Starts a Boot Operation mode at the next write to SDMMC_CR. Boot data are read directly from e.MMC device." edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DDR" edc:nzwidth="0x1" edc:desc="e.MMC HSDDR Mode">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="High Speed DDR is not selected." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="High Speed DDR is selected." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OPD" edc:nzwidth="0x1" edc:desc="e.MMC Open Drain Mode">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The command line is in push-pull." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The command line is in open drain." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BOOTA" edc:nzwidth="0x1" edc:desc="e.MMC Boot Acknowledge Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_MC2R" edc:nzwidth="0x8" edc:access="------ww" edc:impl="0x3" edc:_addr="0x80000205">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="SRESP" edc:nzwidth="0x1" edc:desc="e.MMC Abort Wait IRQ"/>
            <edc:SFRFieldDef edc:cname="ABOOT" edc:nzwidth="0x1" edc:desc="e.MMC Abort Boot"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x80000206"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_ACR" edc:nzwidth="0x20" edc:access="--------------------------nn--nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x33" edc:_addr="0x80000208">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="BMAX" edc:nzwidth="0x2" edc:desc="AHB Maximum Burst">
              <edc:SFRFieldSemantic edc:cname="INCR16" edc:desc="The maximum burst size is INCR16." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="INCR8" edc:desc="The maximum burst size is INCR8." edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="INCR4" edc:desc="The maximum burst size is INCR4." edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="SINGLE" edc:desc="Only SINGLE transfers are performed." edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="HNBRDIS" edc:nzwidth="0x1" edc:desc="HNBREQ Disable"/>
            <edc:SFRFieldDef edc:cname="B1KBDIS" edc:nzwidth="0x1" edc:desc="1kB Boundary Disable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_CC2R" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x8000020C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="FSDCLKD" edc:nzwidth="0x1" edc:desc="Force SDCLK Disabled">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The SDCLK is forced and it cannot be stopped immediately after the transaction." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The SDCLK is not forced and it can be stopped immediately after the transaction." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0x80000210"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_TUNSR" edc:nzwidth="0x20" edc:access="-----------------------r----rrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x10F" edc:_addr="0x80000224">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="DLLPS" edc:nzwidth="0x4" edc:desc="Tuning DLL Phase Status"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="SMPLES" edc:nzwidth="0x1" edc:desc="Tuning Sampling SDCLK Edge Status">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Rising edge" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Falling edge" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x80000228"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_CACR" edc:nzwidth="0x20" edc:access="----------------nnnnnnnn-------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF01" edc:_addr="0x80000230">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="CAPWREN" edc:nzwidth="0x1" edc:desc="Capabilities Write Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Capabilities registers (SDMMC_CA0R, SDMMC_CA1R and SDMMC_MCCAR) cannot be written." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Capabilities registers (SDMMC_CA0R, SDMMC_CA1R and SDMMC_MCCAR) can be written." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x8" edc:desc="Key">
              <edc:SFRFieldSemantic edc:cname="KEY" edc:desc="Writing any other value in this field aborts the write operation of the CAPWREN bit. Always reads as 0." edc:when="(field &amp; 0xFF) == 0x46"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC0" edc:cname="SDMMC0_DBGR" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x80000234">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC0">
            <edc:SFRFieldDef edc:cname="NIDBG" edc:nzwidth="0x1" edc:desc="Nonintrusive Debug">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Reading the SDMMC_BDPR via debugger increments the dual port RAM read pointer." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Reading the SDMMC_BDPR via debugger does not increment the dual port RAM read pointer." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:GPRDataSector>
    <edc:GPRDataSector edc:regionid="SDMMC1" edc:beginaddr="0x90000000" edc:endaddr="0xA0000000" edc:isexecutable="true" edc:rw="rw">
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_SSAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x90000000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="ARG2" edc:nzwidth="0x20" edc:desc="Argument 2"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_BSR" edc:nzwidth="0x10" edc:access="-nnn--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x73FF" edc:_addr="0x90000004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="BLKSIZE" edc:nzwidth="0xA" edc:desc="Transfer Block Size"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOUNDARY" edc:nzwidth="0x3" edc:desc="SDMA Buffer Boundary">
              <edc:SFRFieldSemantic edc:cname="4K" edc:desc="4-Kbyte boundary" edc:when="(field &amp; 0x7) == 0"/>
              <edc:SFRFieldSemantic edc:cname="8K" edc:desc="8-Kbyte boundary" edc:when="(field &amp; 0x7) == 1"/>
              <edc:SFRFieldSemantic edc:cname="16K" edc:desc="16-Kbyte boundary" edc:when="(field &amp; 0x7) == 2"/>
              <edc:SFRFieldSemantic edc:cname="32K" edc:desc="32-Kbyte boundary" edc:when="(field &amp; 0x7) == 3"/>
              <edc:SFRFieldSemantic edc:cname="64K" edc:desc="64-Kbyte boundary" edc:when="(field &amp; 0x7) == 4"/>
              <edc:SFRFieldSemantic edc:cname="128K" edc:desc="128-Kbyte boundary" edc:when="(field &amp; 0x7) == 5"/>
              <edc:SFRFieldSemantic edc:cname="256k" edc:desc="256-Kbyte boundary" edc:when="(field &amp; 0x7) == 6"/>
              <edc:SFRFieldSemantic edc:cname="512K" edc:desc="512-Kbyte boundary" edc:when="(field &amp; 0x7) == 7"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_BCR" edc:nzwidth="0x10" edc:access="nnnnnnnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:_addr="0x90000006">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="BLKCNT" edc:nzwidth="0x10" edc:desc="Block Count for Current Transfer"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_ARG1R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x90000008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="ARG1" edc:nzwidth="0x20" edc:desc="Argument 1"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_TMR" edc:nzwidth="0x10" edc:access="----------nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3F" edc:_addr="0x9000000C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="DMAEN" edc:nzwidth="0x1" edc:desc="DMA Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="DMA functionality is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="DMA functionality is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BCEN" edc:nzwidth="0x1" edc:desc="Block Count Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Block count is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Block count is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMDEN" edc:nzwidth="0x2" edc:desc="Auto Command Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Auto Command Disabled" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="CMD12" edc:desc="Auto CMD12 Enabled" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="CMD23" edc:desc="Auto CMD23 Enabled" edc:when="(field &amp; 0x3) == 2"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DTDSEL" edc:nzwidth="0x1" edc:desc="Data Transfer Direction Selection">
              <edc:SFRFieldSemantic edc:cname="WRITE" edc:desc="Writes data from the SDMMC to the device." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="READ" edc:desc="Reads data from the device to the SDMMC." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="MSBSEL" edc:nzwidth="0x1" edc:desc="Multi/Single Block Selection"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_CR" edc:nzwidth="0x10" edc:access="--nnnnnnnnnnn-nn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3FFB" edc:_addr="0x9000000E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="RESPTYP" edc:nzwidth="0x2" edc:desc="Response Type">
              <edc:SFRFieldSemantic edc:cname="NORESP" edc:desc="No Response" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="RL136" edc:desc="Response Length 136" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="RL48" edc:desc="Response Length 48" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="RL48BUSY" edc:desc="Response Length 48 with Busy" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="CMDCCEN" edc:nzwidth="0x1" edc:desc="Command CRC Check Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="The Command CRC Check is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The Command CRC Check is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDICEN" edc:nzwidth="0x1" edc:desc="Command Index Check Enable">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="The Command Index Check is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The Command Index Check is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DPSEL" edc:nzwidth="0x1" edc:desc="Data Present Select">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No data present" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Data present" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDTYP" edc:nzwidth="0x2" edc:desc="Command Type">
              <edc:SFRFieldSemantic edc:cname="NORMAL" edc:desc="Other commands" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="SUSPEND" edc:desc="CMD52 to write &quot;Bus Suspend&quot; in the Card Common Control Registers (CCCR) (for SDIO only)" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="RESUME" edc:desc="CMD52 to write &quot;Function Select&quot; in the Card Common Control Registers (CCCR) (for SDIO only)" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="ABORT" edc:desc="CMD12, CMD52 to write &quot;I/O Abort&quot; in the Card Common Control Registers (CCCR) (for SDIO only)" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x6" edc:desc="Command Index"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_RR0" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x90000010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_RR1" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x90000014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_RR2" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x90000018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_RR3" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x9000001C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDRESP" edc:nzwidth="0x20" edc:desc="Command Response"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_BDPR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0x90000020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="BUFDATA" edc:nzwidth="0x20" edc:desc="Buffer Data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_PSR" edc:nzwidth="0x20" edc:access="-------rrrrr--------rrrr-----rrr" edc:por="00000000111110000000000000000000" edc:mclr="00000000111110000000000000000000" edc:impl="0x1F00F07" edc:_addr="0x90000024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDINHC" edc:nzwidth="0x1" edc:desc="Command Inhibit (CMD)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Can issue a command using only CMD line." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Cannot issue a command." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDINHD" edc:nzwidth="0x1" edc:desc="Command Inhibit (DAT)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Can issue a command which uses the DAT line(s)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Cannot issue a command which uses the DAT line(s)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DLACT" edc:nzwidth="0x1" edc:desc="DAT Line Active">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="DAT line inactive." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="DAT line active." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="WTACT" edc:nzwidth="0x1" edc:desc="Write Transfer Active"/>
            <edc:SFRFieldDef edc:cname="RTACT" edc:nzwidth="0x1" edc:desc="Read Transfer Active"/>
            <edc:SFRFieldDef edc:cname="BUFWREN" edc:nzwidth="0x1" edc:desc="Buffer Write Enable"/>
            <edc:SFRFieldDef edc:cname="BUFRDEN" edc:nzwidth="0x1" edc:desc="Buffer Read Enable"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="DATLL" edc:nzwidth="0x4" edc:desc="DAT[3:0] Line Level"/>
            <edc:SFRFieldDef edc:cname="CMDLL" edc:nzwidth="0x1" edc:desc="CMD Line Level"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_HC1R" edc:nzwidth="0x8" edc:access="--nnnnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3F" edc:_addr="0x90000028">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="LEDCTRL" edc:nzwidth="0x1" edc:desc="LED Control">
              <edc:SFRFieldSemantic edc:cname="OFF" edc:desc="LED off." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ON" edc:desc="LED on." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DW" edc:nzwidth="0x1" edc:desc="Data Width">
              <edc:SFRFieldSemantic edc:cname="_1_BIT" edc:desc="1-bit mode." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="_4_BIT" edc:desc="4-bit mode." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HSEN" edc:nzwidth="0x1" edc:desc="High Speed Enable"/>
            <edc:SFRFieldDef edc:cname="DMASEL" edc:nzwidth="0x2" edc:desc="DMA Select">
              <edc:SFRFieldSemantic edc:cname="SDMA" edc:desc="SDMA is selected" edc:when="(field &amp; 0x3) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="ADMA32" edc:desc="32-bit Address ADMA2 is selected" edc:when="(field &amp; 0x3) == 0x2"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EXTDW" edc:nzwidth="0x1" edc:desc="Extended Data Width"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_PCR" edc:nzwidth="0x8" edc:access="-------n" edc:por="00001110" edc:mclr="00001110" edc:impl="0x1" edc:_addr="0x90000029">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SDBPWR" edc:nzwidth="0x1" edc:desc="SD Bus Power"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_BGCR" edc:nzwidth="0x8" edc:access="----nnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0xF" edc:_addr="0x9000002A">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="STPBGR" edc:nzwidth="0x1" edc:desc="Stop At Block Gap Request">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Transfer" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Stop" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CONTR" edc:nzwidth="0x1" edc:desc="Continue Request">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Restart." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RWCTRL" edc:nzwidth="0x1" edc:desc="Read Wait Control">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables Read Wait control." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables Read Wait control." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INTBG" edc:nzwidth="0x1" edc:desc="Interrupt at Block Gap">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Interrupt detection disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Interrupt detection enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_WCR" edc:nzwidth="0x8" edc:access="-------n" edc:por="00000000" edc:mclr="00000000" edc:impl="0x1" edc:_addr="0x9000002B">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="WKENCINT" edc:nzwidth="0x1" edc:desc="Wakeup Event Enable on Card Interrupt">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Wakeup Event disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Wakeup Event enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_CCR" edc:nzwidth="0x10" edc:access="nnnnnnnnnnn--nnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xFFE7" edc:_addr="0x9000002C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="INTCLKEN" edc:nzwidth="0x1" edc:desc="Internal Clock Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The internal clock stops." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The internal clock oscillates." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INTCLKS" edc:nzwidth="0x1" edc:desc="Internal Clock Stable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Internal clock not ready." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Internal clock ready." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SDCLKEN" edc:nzwidth="0x1" edc:desc="SD Clock Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SD Clock disabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SD Clock enabled" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Divided Clock mode (BASECLK is used to generate SDCLK)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Programmable Clock mode (MULTCLK is used to generate SDCLK)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="USDCLKFSEL" edc:nzwidth="0x2" edc:desc="Upper Bits of SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0x8" edc:desc="SDCLK Frequency Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_TCR" edc:nzwidth="0x8" edc:access="----nnnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0xF" edc:_addr="0x9000002E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="DTCVAL" edc:nzwidth="0x4" edc:desc="Data Timeout Counter Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_SRR" edc:nzwidth="0x8" edc:access="-----nnn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x9000002F">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SWRSTALL" edc:nzwidth="0x1" edc:desc="Software reset for All">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Work" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SWRSTCMD" edc:nzwidth="0x1" edc:desc="Software reset for CMD line">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Work" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SWRSTDAT" edc:nzwidth="0x1" edc:desc="Software reset for DAT line">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Work" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Reset" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_NISTR" edc:nzwidth="0x10" edc:access="nn-----n--nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xC13F" edc:_addr="0x90000030">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDC" edc:nzwidth="0x1" edc:desc="Command Complete"/>
            <edc:SFRFieldDef edc:cname="TRFC" edc:nzwidth="0x1" edc:desc="Transfer Complete">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Command execution is not complete." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Command execution is complete." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLKGE" edc:nzwidth="0x1" edc:desc="Block Gap Event"/>
            <edc:SFRFieldDef edc:cname="DMAINT" edc:nzwidth="0x1" edc:desc="DMA Interrupt"/>
            <edc:SFRFieldDef edc:cname="BWRRDY" edc:nzwidth="0x1" edc:desc="Buffer Write Ready">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Not ready to write buffer." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Ready to write buffer." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BRDRDY" edc:nzwidth="0x1" edc:desc="Buffer Read Ready">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Not ready to read buffer." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Ready to read buffer." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CINT" edc:nzwidth="0x1" edc:desc="Card Interrupt">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No card interrupt." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Card interrupt." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="BOOTAR" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Received">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Boot Acknowledge pattern not received." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Boot Acknowledge pattern received." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ERRINT" edc:nzwidth="0x1" edc:desc="Error Interrupt">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_EISTR" edc:nzwidth="0x10" edc:access="---n--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x13FF" edc:_addr="0x90000032">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Command Timeout Error"/>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Command CRC Error"/>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Command End Bit Error"/>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Command Index Error"/>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Data Timeout error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Data CRC error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Data End Bit Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Current Limit Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Auto CMD Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="ADMA Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_NISTER" edc:nzwidth="0x10" edc:access="-n-----n--nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x413F" edc:_addr="0x90000034">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDC" edc:nzwidth="0x1" edc:desc="Command Complete Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDC status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDC status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="TRFC" edc:nzwidth="0x1" edc:desc="Transfer Complete Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The TRFC status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The TRFC status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLKGE" edc:nzwidth="0x1" edc:desc="Block Gap Event Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BLKGE status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BLKGE status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DMAINT" edc:nzwidth="0x1" edc:desc="DMA Interrupt Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DMAINT status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DMAINT status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BWRRDY" edc:nzwidth="0x1" edc:desc="Buffer Write Ready Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BWRRDY status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BWRRDY status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BRDRDY" edc:nzwidth="0x1" edc:desc="Buffer Read Ready Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BRDRDY status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BRDRDY status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CINT" edc:nzwidth="0x1" edc:desc="Card Interrupt Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CINT status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CINT status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="BOOTAR" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Received Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BOOTAR status flag in SDMMC_NISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BOOTAR status flag in SDMMC_NISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_EISTER" edc:nzwidth="0x10" edc:access="---n--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x13FF" edc:_addr="0x90000036">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Command Timeout Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDTEO status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDTEO status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Command CRC Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDCRC status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDCRC status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Command End Bit Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDEND status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDEND status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Command Index Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CMDIDX status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CMDIDX status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Data Timeout Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DATTEO status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DATTEO status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Data CRC Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DATCRC status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DATCRC status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Data End Bit Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The DATEND status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The DATEND status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Current Limit Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The CURLIM status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The CURLIM status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Auto CMD Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The ACMD status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The ACMD status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="ADMA Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The ADMA status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The ADMA status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Error Status Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="The BOOTAE status flag in SDMMC_EISTR is masked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="The BOOTAE status flag in SDMMC_EISTR is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_NISIER" edc:nzwidth="0x10" edc:access="-n-----n--nnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x413F" edc:_addr="0x90000038">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDC" edc:nzwidth="0x1" edc:desc="Command Complete Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="TRFC" edc:nzwidth="0x1" edc:desc="Transfer Complete Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the TRFC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the TRFC status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BLKGE" edc:nzwidth="0x1" edc:desc="Block Gap Event Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BLKGE status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BLKGE status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DMAINT" edc:nzwidth="0x1" edc:desc="DMA Interrupt Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DMAINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DMAINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BWRRDY" edc:nzwidth="0x1" edc:desc="Buffer Write Ready Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BWRRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BWRRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BRDRDY" edc:nzwidth="0x1" edc:desc="Buffer Read Ready Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BRDRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BRDRDY status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CINT" edc:nzwidth="0x1" edc:desc="Card Interrupt Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CINT status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="BOOTAR" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Received Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BOOTAR status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BOOTAR status rises in SDMMC_NISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_EISIER" edc:nzwidth="0x10" edc:access="---n--nnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x13FF" edc:_addr="0x9000003A">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Command Timeout Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Command CRC Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CDMCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Command End Bit Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Command Index Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CMDIDX status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CMDIDX status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Data Timeout Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DATTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DATTEO status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Data CRC Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DATCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DATCRC status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Data End Bit Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the DATEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the DATEND status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Current Limit Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the CURLIM status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the CURLIM status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Auto CMD Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the ACMD status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the ACMD status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="ADMA Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the ADMA status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the ADMA status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Boot Acknowledge Error Signal Enable">
              <edc:SFRFieldSemantic edc:cname="MASKED" edc:desc="No interrupt is generated when the BOOTAE status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="An interrupt is generated when the BOOTAE status rises in SDMMC_EISTR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_ACESR" edc:nzwidth="0x10" edc:access="--------r--rrrrr" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x9F" edc:_addr="0x9000003C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="ACMD12NE" edc:nzwidth="0x1" edc:desc="Auto CMD12 Not Executed">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMDTEO" edc:nzwidth="0x1" edc:desc="Auto CMD Timeout Error"/>
            <edc:SFRFieldDef edc:cname="ACMDCRC" edc:nzwidth="0x1" edc:desc="Auto CMD CRC Error"/>
            <edc:SFRFieldDef edc:cname="ACMDEND" edc:nzwidth="0x1" edc:desc="Auto CMD End Bit Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ACMDIDX" edc:nzwidth="0x1" edc:desc="Auto CMD Index Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CMDNI" edc:nzwidth="0x1" edc:desc="Command Not Issued by Auto CMD12 Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_HC2R" edc:nzwidth="0x10" edc:access="nn--------------" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0xC000" edc:_addr="0x9000003E">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:AdjustPoint edc:offset="0xE"/>
            <edc:SFRFieldDef edc:cname="ASINTEN" edc:nzwidth="0x1" edc:desc="Asynchronous Interrupt Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enabled" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PVALEN" edc:nzwidth="0x1" edc:desc="Preset Value Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDCLK and Driver strength are controlled by the user." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Automatic selection by Preset Value is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_CA0R" edc:nzwidth="0x20" edc:access="nnnn-nnnnnn-nnnnnnnnnnnnn-nnnnnn" edc:por="00100111111010000011001010110010" edc:mclr="00100111111010000011001010110010" edc:impl="0xF7EFFFBF" edc:_addr="0x90000040">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="TEOCLKF" edc:nzwidth="0x6" edc:desc="Timeout Clock Frequency"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="TEOCLKU" edc:nzwidth="0x1" edc:desc="Timeout Clock Unit">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="KHz" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="MHz" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BASECLKF" edc:nzwidth="0x8" edc:desc="Base Clock Frequency"/>
            <edc:SFRFieldDef edc:cname="MAXBLKL" edc:nzwidth="0x2" edc:desc="Max Block Length">
              <edc:SFRFieldSemantic edc:cname="512" edc:desc="512 bytes" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1024" edc:desc="1024 bytes" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="2048" edc:desc="2048 bytes" edc:when="(field &amp; 0x3) == 2"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ED8SUP" edc:nzwidth="0x1" edc:desc="8-Bit Support for Embedded Device">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="8-bit bus width not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="8-bit bus width supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADMA2SUP" edc:nzwidth="0x1" edc:desc="ADMA2 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="ADMA2 not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="ADMA2 supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="HSSUP" edc:nzwidth="0x1" edc:desc="High Speed Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="High Speed not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="High Speed supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SDMASUP" edc:nzwidth="0x1" edc:desc="SDMA Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDMA not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SDMA supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SRSUP" edc:nzwidth="0x1" edc:desc="Suspend/Resume Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Suspend/Resume not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Suspend/Resume supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="V33VSUP" edc:nzwidth="0x1" edc:desc="Voltage Support 3.3V">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="3.3V Voltage supply not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="3.3V Voltage supply supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="V30VSUP" edc:nzwidth="0x1" edc:desc="Voltage Support 3.0V">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="3.0V Voltage supply not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="3.0V Voltage supply supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="V18VSUP" edc:nzwidth="0x1" edc:desc="Voltage Support 1.8V">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="1.8V Voltage supply not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="1.8V Voltage supply supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="SB64SUP" edc:nzwidth="0x1" edc:desc="64-Bit System Bus Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="64-bit address bus not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="64-bit address bus supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ASINTSUP" edc:nzwidth="0x1" edc:desc="Asynchronous Interrupt Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Asynchronous interrupt not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Asynchronous interrupt supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SLTYPE" edc:nzwidth="0x2" edc:desc="Slot Type">
              <edc:SFRFieldSemantic edc:cname="REMOVABLECARD" edc:desc="Removable Card Slot" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="EMBEDDED" edc:desc="Embedded Slot for One Device" edc:when="(field &amp; 0x3) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_CA1R" edc:nzwidth="0x20" edc:access="--------nnnnnnnn---------nnn-nnn" edc:por="00100111111010000011001010110010" edc:mclr="00100111111010000011001010110010" edc:impl="0xFF0077" edc:_addr="0x90000044">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SDR50SUP" edc:nzwidth="0x1" edc:desc="SDR50 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDR50 mode is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SDR50 mode is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SDR104SUP" edc:nzwidth="0x1" edc:desc="SDR104 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="SDR104 mode is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="SDR104 mode is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DDR50SUP" edc:nzwidth="0x1" edc:desc="DDR50 Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="DDR50 mode is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="DDR50 mode is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DRVASUP" edc:nzwidth="0x1" edc:desc="Driver Type A Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Driver type A is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Driver type A is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DRVCSUP" edc:nzwidth="0x1" edc:desc="Driver Type C Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Driver type C is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Driver type C is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="DRVDSUP" edc:nzwidth="0x1" edc:desc="Driver Type D Support">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Driver type D is not supported." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Driver type D is supported." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x9"/>
            <edc:SFRFieldDef edc:cname="CLKMULT" edc:nzwidth="0x8" edc:desc="Clock Multiplier"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_MCCAR" edc:nzwidth="0x20" edc:access="--------nnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFF" edc:_addr="0x90000048">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="MAXCUR33V" edc:nzwidth="0x8" edc:desc="Maximum Current for 3.3V"/>
            <edc:SFRFieldDef edc:cname="MAXCUR30V" edc:nzwidth="0x8" edc:desc="Maximum Current for 3.0V"/>
            <edc:SFRFieldDef edc:cname="MAXCUR18V" edc:nzwidth="0x8" edc:desc="Maximum Current for 1.8V"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x9000004C"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_FERACES" edc:nzwidth="0x10" edc:access="--------w--wwwww" edc:impl="0x9F" edc:_addr="0x90000050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="ACMD12NE" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD12 Not Executed"/>
            <edc:SFRFieldDef edc:cname="ACMDTEO" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD Timeout Error"/>
            <edc:SFRFieldDef edc:cname="ACMDCRC" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD CRC Error"/>
            <edc:SFRFieldDef edc:cname="ACMDEND" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD End Bit Error"/>
            <edc:SFRFieldDef edc:cname="ACMDIDX" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD Index Error"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="CMDNI" edc:nzwidth="0x1" edc:desc="Force Event for Command Not Issued by Auto CMD12 Error"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_FEREIS" edc:nzwidth="0x10" edc:access="---w--wwwwwwwwww" edc:impl="0x13FF" edc:_addr="0x90000052">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDTEO" edc:nzwidth="0x1" edc:desc="Force Event for Command Timeout Error"/>
            <edc:SFRFieldDef edc:cname="CMDCRC" edc:nzwidth="0x1" edc:desc="Force Event for Command CRC Error"/>
            <edc:SFRFieldDef edc:cname="CMDEND" edc:nzwidth="0x1" edc:desc="Force Event for Command End Bit Error"/>
            <edc:SFRFieldDef edc:cname="CMDIDX" edc:nzwidth="0x1" edc:desc="Force Event for Command Index Error"/>
            <edc:SFRFieldDef edc:cname="DATTEO" edc:nzwidth="0x1" edc:desc="Force Event for Data Timeout error"/>
            <edc:SFRFieldDef edc:cname="DATCRC" edc:nzwidth="0x1" edc:desc="Force Event for Data CRC error"/>
            <edc:SFRFieldDef edc:cname="DATEND" edc:nzwidth="0x1" edc:desc="Force Event for Data End Bit Error"/>
            <edc:SFRFieldDef edc:cname="CURLIM" edc:nzwidth="0x1" edc:desc="Force Event for Current Limit Error"/>
            <edc:SFRFieldDef edc:cname="ACMD" edc:nzwidth="0x1" edc:desc="Force Event for Auto CMD Error"/>
            <edc:SFRFieldDef edc:cname="ADMA" edc:nzwidth="0x1" edc:desc="Force Event for ADMA Error"/>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="BOOTAE" edc:nzwidth="0x1" edc:desc="Force Event for Boot Acknowledge Error"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_AESR" edc:nzwidth="0x8" edc:access="-----rrr" edc:por="00000000" edc:mclr="00000000" edc:impl="0x7" edc:_addr="0x90000054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="ERRST" edc:nzwidth="0x2" edc:desc="ADMA Error State">
              <edc:SFRFieldSemantic edc:cname="STOP" edc:desc="(Stop DMA) SDMMC_ASAR points to the descriptor following the error descriptor" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="FDS" edc:desc="(Fetch Descriptor) SDMMC_ASAR points to the error descriptor" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="TFR" edc:desc="(Transfer Data) SDMMC_ASAR points to the descriptor following the error descriptor" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LMIS" edc:nzwidth="0x1" edc:desc="ADMA Length Mismatch Error">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Error." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x3" edc:_addr="0x90000055"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_ASAR0" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0x90000058">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="ADMASA" edc:nzwidth="0x20" edc:desc="ADMA System Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0x9000005C"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_PVR0" edc:nzwidth="0x10" edc:access="-----nnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x7FF" edc:_addr="0x90000060">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0xA" edc:desc="SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_PVR1" edc:nzwidth="0x10" edc:access="-----nnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x7FF" edc:_addr="0x90000062">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0xA" edc:desc="SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_PVR2" edc:nzwidth="0x10" edc:access="-----nnnnnnnnnnn" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x7FF" edc:_addr="0x90000064">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SDCLKFSEL" edc:nzwidth="0xA" edc:desc="SDCLK Frequency Select"/>
            <edc:SFRFieldDef edc:cname="CLKGSEL" edc:nzwidth="0x1" edc:desc="Clock Generator Select"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x96" edc:_addr="0x90000066"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_SISR" edc:nzwidth="0x10" edc:access="--------------rr" edc:por="0000000000000000" edc:mclr="0000000000000000" edc:impl="0x3" edc:_addr="0x900000FC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="INTSSL" edc:nzwidth="0x2" edc:desc="Interrupt Signal for Each Slot"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_HCVR" edc:nzwidth="0x10" edc:access="rrrrrrrrrrrrrrrr" edc:por="0001100000000010" edc:mclr="0001100000000010" edc:_addr="0x900000FE">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SVER" edc:nzwidth="0x8" edc:desc="Specification Version Number"/>
            <edc:SFRFieldDef edc:cname="VVER" edc:nzwidth="0x8" edc:desc="Vendor Version Number"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x100" edc:_addr="0x90000100"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_APSR" edc:nzwidth="0x20" edc:access="----------------------------rrrr" edc:por="00000000000000000000000000001111" edc:mclr="00000000000000000000000000001111" edc:impl="0xF" edc:_addr="0x90000200">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="HDATLL" edc:nzwidth="0x4" edc:desc="DAT[7:4] High Line Level"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_MC1R" edc:nzwidth="0x8" edc:access="--nnn-nn" edc:por="00000000" edc:mclr="00000000" edc:impl="0x3B" edc:_addr="0x90000204">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CMDTYP" edc:nzwidth="0x2" edc:desc="e.MMC Command Type">
              <edc:SFRFieldSemantic edc:cname="NORMAL" edc:desc="The command is not an e.MMC specific command." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="WAITIRQ" edc:desc="This bit must be set to 1 when the e.MMC is in Interrupt mode (CMD40). See &quot;Interrupt Mode&quot; in the Embedded MultiMedia Card (e.MMC) Electrical Standard 4.51." edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="STREAM" edc:desc="This bit must be set to 1 in the case of Stream Read(CMD11) or Stream Write (CMD20). Only effective for e.MMC up to revision 4.41." edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="BOOT" edc:desc="Starts a Boot Operation mode at the next write to SDMMC_CR. Boot data are read directly from e.MMC device." edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="DDR" edc:nzwidth="0x1" edc:desc="e.MMC HSDDR Mode">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="High Speed DDR is not selected." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="High Speed DDR is selected." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="OPD" edc:nzwidth="0x1" edc:desc="e.MMC Open Drain Mode">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The command line is in push-pull." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The command line is in open drain." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BOOTA" edc:nzwidth="0x1" edc:desc="e.MMC Boot Acknowledge Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_MC2R" edc:nzwidth="0x8" edc:access="------ww" edc:impl="0x3" edc:_addr="0x90000205">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="SRESP" edc:nzwidth="0x1" edc:desc="e.MMC Abort Wait IRQ"/>
            <edc:SFRFieldDef edc:cname="ABOOT" edc:nzwidth="0x1" edc:desc="e.MMC Abort Boot"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x2" edc:_addr="0x90000206"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_ACR" edc:nzwidth="0x20" edc:access="--------------------------nn--nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x33" edc:_addr="0x90000208">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="BMAX" edc:nzwidth="0x2" edc:desc="AHB Maximum Burst">
              <edc:SFRFieldSemantic edc:cname="INCR16" edc:desc="The maximum burst size is INCR16." edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="INCR8" edc:desc="The maximum burst size is INCR8." edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="INCR4" edc:desc="The maximum burst size is INCR4." edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="SINGLE" edc:desc="Only SINGLE transfers are performed." edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="HNBRDIS" edc:nzwidth="0x1" edc:desc="HNBREQ Disable"/>
            <edc:SFRFieldDef edc:cname="B1KBDIS" edc:nzwidth="0x1" edc:desc="1kB Boundary Disable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_CC2R" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x9000020C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="FSDCLKD" edc:nzwidth="0x1" edc:desc="Force SDCLK Disabled">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The SDCLK is forced and it cannot be stopped immediately after the transaction." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The SDCLK is not forced and it can be stopped immediately after the transaction." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0x90000210"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_TUNSR" edc:nzwidth="0x20" edc:access="-----------------------r----rrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x10F" edc:_addr="0x90000224">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="DLLPS" edc:nzwidth="0x4" edc:desc="Tuning DLL Phase Status"/>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="SMPLES" edc:nzwidth="0x1" edc:desc="Tuning Sampling SDCLK Edge Status">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Rising edge" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Falling edge" edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0x90000228"/>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_CACR" edc:nzwidth="0x20" edc:access="----------------nnnnnnnn-------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF01" edc:_addr="0x90000230">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="CAPWREN" edc:nzwidth="0x1" edc:desc="Capabilities Write Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Capabilities registers (SDMMC_CA0R, SDMMC_CA1R and SDMMC_MCCAR) cannot be written." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Capabilities registers (SDMMC_CA0R, SDMMC_CA1R and SDMMC_MCCAR) can be written." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x8" edc:desc="Key">
              <edc:SFRFieldSemantic edc:cname="KEY" edc:desc="Writing any other value in this field aborts the write operation of the CAPWREN bit. Always reads as 0." edc:when="(field &amp; 0xFF) == 0x46"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="SDMMC1" edc:cname="SDMMC1_DBGR" edc:nzwidth="0x20" edc:access="-------------------------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x1" edc:_addr="0x90000234">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="SDMMC1">
            <edc:SFRFieldDef edc:cname="NIDBG" edc:nzwidth="0x1" edc:desc="Nonintrusive Debug">
              <edc:SFRFieldSemantic edc:cname="DISABLED" edc:desc="Reading the SDMMC_BDPR via debugger increments the dual port RAM read pointer." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ENABLED" edc:desc="Reading the SDMMC_BDPR via debugger does not increment the dual port RAM read pointer." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:GPRDataSector>
    <edc:GPRDataSector edc:regionid="CSI2DC_META" edc:beginaddr="0xD0000000" edc:endaddr="0xD0100000" edc:isexecutable="true" edc:rw="rw"/>
    <edc:GPRDataSector edc:regionid="OTPC" edc:beginaddr="0xEFF00000" edc:endaddr="0xEFF01000" edc:isexecutable="true" edc:rw="rw">
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_CR" edc:nzwidth="0x20" edc:access="wwwwwwwwwwwwwwwww--w--wwww-w-www" edc:impl="0xFFFF93D7" edc:_addr="0xEFF00000">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PGM" edc:nzwidth="0x1" edc:desc="Program Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The selected packet is written." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CKSGEN" edc:nzwidth="0x1" edc:desc="Generate Checksum">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Generates and programs the selected packet checksum. This action also locks the packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INVLD" edc:nzwidth="0x1" edc:desc="Invalidate Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Invalidates the selected packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="HIDE" edc:nzwidth="0x1" edc:desc="Hide Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The selected packet is not readable anymore until the next reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="READ" edc:nzwidth="0x1" edc:desc="Read Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a read sequence of the selected packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FLUSH" edc:nzwidth="0x1" edc:desc="Flush Temporary Registers">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a flush of the temporary registers used to store the payload of the packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="KBSTART" edc:nzwidth="0x1" edc:desc="Key Bus Transfer Start">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a transfer through the Master Key bus." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="KBSTOP" edc:nzwidth="0x1" edc:desc="Key Bus Transfer Stop">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Stops an on-going transfer on the Master Key bus." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="REPAIR" edc:nzwidth="0x1" edc:desc="Live Repair">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts the OTP live repair." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="REFRESH" edc:nzwidth="0x1" edc:desc="Refresh the Area">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a refresh of the area." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x10" edc:desc="Programming Key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_MR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnn--n--nnn--n---n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF9391" edc:_addr="0xEFF00004">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="UHCRRDIS" edc:nzwidth="0x1" edc:desc="User Hardware Configuration Register Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The User Hardware Configuration register can be read through the User Interface." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The User Hardware Configuration register cannot be read through the User Interface." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="NPCKT" edc:nzwidth="0x1" edc:desc="New Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Updates the packet defined at the ADDR address." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Creates a new packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="EMUL" edc:nzwidth="0x1" edc:desc="Emulation Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Emulation mode of the User area is disabled, all accesses are computed in the OTP memory." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Emulation mode of the User area is enabled, all accesses are computed in the Emulation memory." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RDDIS" edc:nzwidth="0x1" edc:desc="Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The read capability of the OTPC_HR and OTPC_DR registers are enabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The read capability of the OTPC_HR and OTPC_DR registers are disabled. In case of read, the returned value is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WRDIS" edc:nzwidth="0x1" edc:desc="Write Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The write capability of the OTPC_DR register is enabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The write capability of the OTPC_DR register is disabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="KBDST" edc:nzwidth="0x1" edc:desc="Key Bus Destination">
              <edc:SFRFieldSemantic edc:cname="TDES" edc:desc="The TDES is the destination of the key transfer." edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="AES" edc:desc="The AES is the destination of the key transfer." edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock Register">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_MR register is unlocked; write access changes its value." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_MR register is locked; write access does not change its value." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ADDR" edc:nzwidth="0x10" edc:desc="Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_AR" edc:nzwidth="0x20" edc:access="---------------n--------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x100FF" edc:_addr="0xEFF00008">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DADDR" edc:nzwidth="0x8" edc:desc="Data Address"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="INCRT" edc:nzwidth="0x1" edc:desc="Increment Type">
              <edc:SFRFieldSemantic edc:cname="AFTER_READ" edc:desc="Increment DADDR after a read of OTPC_DR." edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="AFTER_WRITE" edc:desc="Increment DADDR after a write of OTPC_DR." edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_SR" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrr---rr--rr-rrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFF19BFF" edc:_addr="0xEFF0000C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PGM" edc:nzwidth="0x1" edc:desc="Programming On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No packet programming is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A packet programming is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No packet locking is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A packet locking is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INVLD" edc:nzwidth="0x1" edc:desc="Invalidation On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No packet invalidation is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A packet invalidation is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EMUL" edc:nzwidth="0x1" edc:desc="Emulation Enabled">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The User area Emulation mode is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The User area Emulation mode is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="MKBB" edc:nzwidth="0x1" edc:desc="Master Key Bus Busy">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Master Key bus is not busy." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Master Key bus is busy." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SKBB" edc:nzwidth="0x1" edc:desc="Slave Key Bus Busy">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Slave Key bus is not busy." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Slave Key bus is busy." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="READ" edc:nzwidth="0x1" edc:desc="Read On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No packet read is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A packet read is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FLUSH" edc:nzwidth="0x1" edc:desc="Flush On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The temporary registers are not flushed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The temporary registers are being flushed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HIDE" edc:nzwidth="0x1" edc:desc="Hiding On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No packet hiding is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A packet hiding is on-going." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ONEF" edc:nzwidth="0x1" edc:desc="One Found">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No bit at '1' found during the last packet read." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one '1' has been found during the last packet read." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="UNLOCK" edc:nzwidth="0x1" edc:desc="OTP Registers Unlocked">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_ODCxR and OTPC_OPCxR registers are locked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_ODCxR and OTPC_OPCxR registers are unlocked." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AHIDE" edc:nzwidth="0x1" edc:desc="Hiding On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No engineering packet hiding is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An engineering packet hiding is on-going." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="MNT" edc:nzwidth="0x1" edc:desc="Maintenance On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTP live repair is not running." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTP live repair is running, OTP maintenance is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RPGM" edc:nzwidth="0x1" edc:desc="ROM Programming On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No ROM programming is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A ROM programming is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="PPGM" edc:nzwidth="0x1" edc:desc="Patch Programming On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No patch programming is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A patch programming is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PEMUL" edc:nzwidth="0x1" edc:desc="Patch Emulation Enabled">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Patch area Emulation mode is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Patch area Emulation mode is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PREAD" edc:nzwidth="0x1" edc:desc="Patch Read On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No patch read is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A patch read is on-going." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PREFRESH" edc:nzwidth="0x1" edc:desc="Patch Refresh On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The patches are no being refreshed." edc:when="(field &amp; 0x1) == 0"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="APGM" edc:nzwidth="0x1" edc:desc="Engineering Programming On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No engineering packet programming is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An engineering packet programming is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ALOCK" edc:nzwidth="0x1" edc:desc="Engineering Lock On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No engineering packet locking is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An engineering packet locking is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AINVLD" edc:nzwidth="0x1" edc:desc="Engineering Invalidation On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No engineering packet invalidation is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An engineering packet invalidation is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AEMUL" edc:nzwidth="0x1" edc:desc="Engineering Emulation Enabled">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Engineering area Emulation mode is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Engineering area Emulation mode is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AMKBB" edc:nzwidth="0x1" edc:desc="Engineering Master Key Bus Busy">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Master Key bus is not busy." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Master Key bus is busy." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="ASKBB" edc:nzwidth="0x1" edc:desc="Engineering Slave Key Bus Busy">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The Slave Key bus is not busy." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The Slave Key bus is busy." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AREAD" edc:nzwidth="0x1" edc:desc="Engineering Read On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No engineering packet read is on-going." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An engineering packet read is running." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AFLUSH" edc:nzwidth="0x1" edc:desc="Engineering Flush On-Going">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The temporary registers are not flushed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The temporary registers are being flushed." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_IER" edc:nzwidth="0x20" edc:access="---w-----------w-wwwwwwwwwwwwwww" edc:impl="0x10017FFF" edc:_addr="0xEFF00010">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="EOP" edc:nzwidth="0x1" edc:desc="End Of Programming Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EOL" edc:nzwidth="0x1" edc:desc="End Of Locking Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EOI" edc:nzwidth="0x1" edc:desc="End Of Invalidation Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EOKT" edc:nzwidth="0x1" edc:desc="End Of Key Transfer Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="PGERR" edc:nzwidth="0x1" edc:desc="Programming Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="LKERR" edc:nzwidth="0x1" edc:desc="Locking Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="IVERR" edc:nzwidth="0x1" edc:desc="Invalidation Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="WERR" edc:nzwidth="0x1" edc:desc="Write Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EOR" edc:nzwidth="0x1" edc:desc="End Of Read Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EOF" edc:nzwidth="0x1" edc:desc="End Of Flush Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EOH" edc:nzwidth="0x1" edc:desc="End Of Hide Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="EORF" edc:nzwidth="0x1" edc:desc="End Of Refresh Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="CKERR" edc:nzwidth="0x1" edc:desc="Checksum Check Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="COERR" edc:nzwidth="0x1" edc:desc="Corruption Error Interrupt Enable"/>
            <edc:SFRFieldDef edc:cname="HDERR" edc:nzwidth="0x1" edc:desc="Hide Error Interrupt Enable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="KBERR" edc:nzwidth="0x1" edc:desc="Key Bus Error Interrupt Enable"/>
            <edc:AdjustPoint edc:offset="0xB"/>
            <edc:SFRFieldDef edc:cname="SECE" edc:nzwidth="0x1" edc:desc="Security and/or Safety Event Interrupt Enable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_IDR" edc:nzwidth="0x20" edc:access="---w-----------w-wwwwwwwwwwwwwww" edc:impl="0x10017FFF" edc:_addr="0xEFF00014">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="EOP" edc:nzwidth="0x1" edc:desc="End Of Programming Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EOL" edc:nzwidth="0x1" edc:desc="End Of Locking Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EOI" edc:nzwidth="0x1" edc:desc="End Of Invalidation Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EOKT" edc:nzwidth="0x1" edc:desc="End Of Key Transfer Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="PGERR" edc:nzwidth="0x1" edc:desc="Programming Error Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="LKERR" edc:nzwidth="0x1" edc:desc="Locking Error Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="IVERR" edc:nzwidth="0x1" edc:desc="Invalidation Error Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="WERR" edc:nzwidth="0x1" edc:desc="Write Error Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EOR" edc:nzwidth="0x1" edc:desc="End Of Read Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EOF" edc:nzwidth="0x1" edc:desc="End Of Flush Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EOH" edc:nzwidth="0x1" edc:desc="End Of Hide Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="EORF" edc:nzwidth="0x1" edc:desc="End Of Refresh Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="CKERR" edc:nzwidth="0x1" edc:desc="Checksum Check Error Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="COERR" edc:nzwidth="0x1" edc:desc="Corruption Error Interrupt Disable"/>
            <edc:SFRFieldDef edc:cname="HDERR" edc:nzwidth="0x1" edc:desc="Hide Error Interrupt Disable"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="KBERR" edc:nzwidth="0x1" edc:desc="Key Bus Error Interrupt Disable"/>
            <edc:AdjustPoint edc:offset="0xB"/>
            <edc:SFRFieldDef edc:cname="SECE" edc:nzwidth="0x1" edc:desc="Security and/or Safety Event Interrupt Disable"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_IMR" edc:nzwidth="0x20" edc:access="---r-----------r-rrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x10017FFF" edc:_addr="0xEFF00018">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="EOP" edc:nzwidth="0x1" edc:desc="End Of Programming Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EOL" edc:nzwidth="0x1" edc:desc="End Of Locking Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EOI" edc:nzwidth="0x1" edc:desc="End Of Invalidation Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EOKT" edc:nzwidth="0x1" edc:desc="End Of Key Transfer Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="PGERR" edc:nzwidth="0x1" edc:desc="Programming Error Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="LKERR" edc:nzwidth="0x1" edc:desc="Locking Error Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="IVERR" edc:nzwidth="0x1" edc:desc="Invalidation Error Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="WERR" edc:nzwidth="0x1" edc:desc="Write Error Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EOR" edc:nzwidth="0x1" edc:desc="End Of Read Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EOF" edc:nzwidth="0x1" edc:desc="End Of Flush Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EOH" edc:nzwidth="0x1" edc:desc="End Of Hide Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="EORF" edc:nzwidth="0x1" edc:desc="End Of Refresh Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="CKERR" edc:nzwidth="0x1" edc:desc="Checksum Check Error Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="COERR" edc:nzwidth="0x1" edc:desc="Corruption Error Interrupt Mask"/>
            <edc:SFRFieldDef edc:cname="HDERR" edc:nzwidth="0x1" edc:desc="Hide Error Interrupt Mask"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="KBERR" edc:nzwidth="0x1" edc:desc="Key Bus Error Interrupt Mask"/>
            <edc:AdjustPoint edc:offset="0xB"/>
            <edc:SFRFieldDef edc:cname="SECE" edc:nzwidth="0x1" edc:desc="Security and/or Safety Event Interrupt Mask"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ISR" edc:nzwidth="0x20" edc:access="---r-----------r-rrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x10017FFF" edc:_addr="0xEFF0001C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="EOP" edc:nzwidth="0x1" edc:desc="End Of Programming (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No programming sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one programming sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EOL" edc:nzwidth="0x1" edc:desc="End Of Locking (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No locking sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one locking sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EOI" edc:nzwidth="0x1" edc:desc="End Of Invalidation (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No invalidation sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one invalidation sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EOKT" edc:nzwidth="0x1" edc:desc="End Of Key Transfer (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No key transfer completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one key transfer has been completed on the Master Key bus since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PGERR" edc:nzwidth="0x1" edc:desc="Programming Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No programming failure occurred during last programming sequence since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A programming failure occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LKERR" edc:nzwidth="0x1" edc:desc="Locking Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No locking failure occurred during last locking sequence since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A locking failure occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="IVERR" edc:nzwidth="0x1" edc:desc="Invalidation Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No invalidation failure occurred during last invalidation sequence since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A invalidation failure occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WERR" edc:nzwidth="0x1" edc:desc="Write Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No write error occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A write error occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EOR" edc:nzwidth="0x1" edc:desc="End Of Read (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No reading sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one reading sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EOF" edc:nzwidth="0x1" edc:desc="End Of Flush (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No flush of the temporary registers since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one flush hof the temporary registers has been completed since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EOH" edc:nzwidth="0x1" edc:desc="End Of Hide (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No hiding sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one hiding sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="EORF" edc:nzwidth="0x1" edc:desc="End Of Refresh (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No refresh sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="At least one refresh sequence completion since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CKERR" edc:nzwidth="0x1" edc:desc="Checksum Check Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No checksum check failure occurred during last reading sequence since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A checksum check failure occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="COERR" edc:nzwidth="0x1" edc:desc="Corruption Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No corruption occurred during the last start-up since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A corruption occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HDERR" edc:nzwidth="0x1" edc:desc="Hide Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No hiding error occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A hiding error occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="KBERR" edc:nzwidth="0x1" edc:desc="Key Bus Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No error happened on the Key bus since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="An error happened on the Key bus since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xB"/>
            <edc:SFRFieldDef edc:cname="SECE" edc:nzwidth="0x1" edc:desc="Security and/or Safety Event (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No security or safety event occurred since the last read of OTPC_ISR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="One or more safety or security event occurred since the last read of OTPC_ISR. For details on the event, refer to OTPC_WPSR." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_HR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnn-nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFBF" edc:_addr="0xEFF00020">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PACKET" edc:nzwidth="0x3" edc:desc="Packet Type">
              <edc:SFRFieldSemantic edc:cname="REGULAR" edc:desc="Regular packet accessible through the User Interface" edc:when="(field &amp; 0x7) == 1"/>
              <edc:SFRFieldSemantic edc:cname="KEY" edc:desc="Key packet accessible only through the Key Buses" edc:when="(field &amp; 0x7) == 2"/>
              <edc:SFRFieldSemantic edc:cname="BOOT_CONFIGURATION" edc:desc="Boot Configuration packet" edc:when="(field &amp; 0x7) == 3"/>
              <edc:SFRFieldSemantic edc:cname="SECURE_BOOT_CONFIGURATION" edc:desc="Secure Boot Configuration packet" edc:when="(field &amp; 0x7) == 4"/>
              <edc:SFRFieldSemantic edc:cname="HARDWARE_CONFIGURATION" edc:desc="Hardware Configuration packet" edc:when="(field &amp; 0x7) == 5"/>
              <edc:SFRFieldSemantic edc:cname="CUSTOM" edc:desc="Custom packet" edc:when="(field &amp; 0x7) == 6"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock Status">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The packet is not locked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The packet is locked." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INVLD" edc:nzwidth="0x2" edc:desc="Invalid Status"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ONE" edc:nzwidth="0x1" edc:desc="One"/>
            <edc:SFRFieldDef edc:cname="SIZE" edc:nzwidth="0x8" edc:desc="Packet Size"/>
            <edc:SFRFieldDef edc:cname="CHECKSUM" edc:nzwidth="0x10" edc:desc="Packet Checksum"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_DR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00024">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DATA" edc:nzwidth="0x20" edc:desc="Packet Data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xEFF00028"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_BAR" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00030">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="BCADDR" edc:nzwidth="0x10" edc:desc="Boot Configuration Address"/>
            <edc:SFRFieldDef edc:cname="SBCADDR" edc:nzwidth="0x10" edc:desc="Secure Boot Configuration Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_CAR" edc:nzwidth="0x20" edc:access="----------------rrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF" edc:_addr="0xEFF00034">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="CADDR" edc:nzwidth="0x10" edc:desc="Custom Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xEFF00038"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_LRMR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn-----------n--nn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF0013" edc:_addr="0xEFF00040">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="FREQ" edc:nzwidth="0x2" edc:desc="Automatic Live Repair Frequency">
              <edc:SFRFieldSemantic edc:cname="ONE_DAY" edc:desc="The live repair is started every day" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="FOUR_DAYS" edc:desc="The live repair is started every 4 days" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="EIGHT_DAYS" edc:desc="The live repair is started every 8 days" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="SIXTEEN_DAYS" edc:desc="The live repair is started every 16 days" edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="EN" edc:nzwidth="0x1" edc:desc="Automatic Live Repair Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The automatic start of OTP live repair is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The automatic start of OTP live repair is enabled." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xB"/>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x10" edc:desc="Programming Key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0xEFF00044"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_UHC0R" edc:nzwidth="0x20" edc:access="------------------------rrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFF" edc:_addr="0xEFF00050">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="JTAGDIS" edc:nzwidth="0x8" edc:desc="JTAG Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The JTAG is enabled." edc:when="(field &amp; 0xFF) == 0"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_UHC1R" edc:nzwidth="0x20" edc:access="--------------rrrr---rrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x3C7FF" edc:_addr="0xEFF00054">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="URDDIS" edc:nzwidth="0x1" edc:desc="User Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_CR.READ bit is fully functional." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_CR.READ bit is not functional." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UPGDIS" edc:nzwidth="0x1" edc:desc="User programming Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_CR.PGM bit is fully functional." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_CR.PGM bit is not functional." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UHCINVDIS" edc:nzwidth="0x1" edc:desc="User Hardware Configuration Packet Invalidation Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The invalidation of the User Hardware Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The invalidation of the User Hardware Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UHCLKDIS" edc:nzwidth="0x1" edc:desc="User Hardware Configuration Packet Lock Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The generation of the checksum (lock) of the User Hardware Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The generation of the checksum (lock) of the User Hardware Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="UHCPGDIS" edc:nzwidth="0x1" edc:desc="User Hardware Configuration Packet Program Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The programming of User Hardware Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The programming of User Hardware Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BCINVDIS" edc:nzwidth="0x1" edc:desc="Boot Configuration Packet Invalidation Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The invalidation of the Boot Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The invalidation of the Boot Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BCLKDIS" edc:nzwidth="0x1" edc:desc="Boot Configuration Packet Lock Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The generation of the checksum (lock) of the Boot Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The generation of the checksum (lock) of the Boot Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="BCPGDIS" edc:nzwidth="0x1" edc:desc="Boot Configuration Packet Program Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The programming of Boot Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The programming of Boot Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SBCINVDIS" edc:nzwidth="0x1" edc:desc="Secure Boot Configuration Packet Invalidation Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The invalidation of the Secure Boot Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The invalidation of the Secure Boot Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SBCLKDIS" edc:nzwidth="0x1" edc:desc="Secure Boot Configuration Packet Lock Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The generation of the checksum (lock) of the Secure Boot Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The generation of the checksum (lock) of the Secure Boot Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SBCPGDIS" edc:nzwidth="0x1" edc:desc="Secure Boot Configuration Packet Program Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The programming of Secure Boot Configuration Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The programming of Secure Boot Configuration Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="CINVDIS" edc:nzwidth="0x1" edc:desc="Custom Packet Invalidation Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The invalidation of the Custom Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The invalidation of the Custom Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CLKDIS" edc:nzwidth="0x1" edc:desc="Custom Packet Lock Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The generation of the checksum (lock) of the Custom Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The generation of the checksum (lock) of the Custom Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CPGDIS" edc:nzwidth="0x1" edc:desc="Custom Packet Program Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The programming of Custom Special Packet is allowed." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The programming of Custom Special Packet is forbidden." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="URFDIS" edc:nzwidth="0x1" edc:desc="User Refresh Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_CR.REFRESH bit is fully functional." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_CR.REFRESH bit is only functional in Emulation mode." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xEFF00058"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_UID0R" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xEFF00060">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="UID" edc:nzwidth="0x20" edc:desc="Unique Product ID"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_UID1R" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xEFF00064">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="UID" edc:nzwidth="0x20" edc:desc="Unique Product ID"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_UID2R" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xEFF00068">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="UID" edc:nzwidth="0x20" edc:desc="Unique Product ID"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_UID3R" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xEFF0006C">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="UID" edc:nzwidth="0x20" edc:desc="Unique Product ID"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_HCSR" edc:nzwidth="0x20" edc:access="----------------------------nnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF" edc:_addr="0xEFF00070">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="HCSEL" edc:nzwidth="0x4" edc:desc="Hardware Configuration Selection"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_HCDR" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00074">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="HCFG" edc:nzwidth="0x20" edc:desc="Hardware Configuration Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xEFF00078"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_HS0R" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xEFF00080">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="SCFG" edc:nzwidth="0x20" edc:desc="Security Configuration Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_HS1R" edc:nzwidth="0x20" edc:access="rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" edc:_addr="0xEFF00084">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="SCFG" edc:nzwidth="0x20" edc:desc="Security Configuration Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xEFF00088"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_OMR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnn---------------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF0001" edc:_addr="0xEFF00090">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="CHGRQ" edc:nzwidth="0x1" edc:desc="Change Request">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Cancels the request to change the OTPC_ODCxR and OTPC_OPCxR registers." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Requests a change of the OTPC_ODCxR and OTPC_OPCxR registers." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xF"/>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x10" edc:desc="Key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xC" edc:_addr="0xEFF00094"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ODC0R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000A0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DAPCFG" edc:nzwidth="0x20" edc:desc="DAP Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ODC1R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000A4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DAPCFG" edc:nzwidth="0x20" edc:desc="DAP Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ODC2R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000A8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DAPCFG" edc:nzwidth="0x20" edc:desc="DAP Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ODC3R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000AC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DAPCFG" edc:nzwidth="0x20" edc:desc="DAP Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_OPC0R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000B0">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PMCCFG" edc:nzwidth="0x20" edc:desc="PMC Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_OPC1R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000B4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PMCCFG" edc:nzwidth="0x20" edc:desc="PMC Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_OPC2R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000B8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PMCCFG" edc:nzwidth="0x20" edc:desc="PMC Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_OPC3R" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:_addr="0xEFF000BC">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PMCCFG" edc:nzwidth="0x20" edc:desc="PMC Configuration"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x24" edc:_addr="0xEFF000C0"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_WPMR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnn---n-nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFF17" edc:_addr="0xEFF000E4">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="WPCFEN" edc:nzwidth="0x1" edc:desc="Write Protection Configuration Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the write protection of the configuration if WPKEY matches to 0x4F5450 (OTP in ASCII)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the write protection of the configuration if WPKEY matches to 0x4F5450 (OTP in ASCII)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WPITEN" edc:nzwidth="0x1" edc:desc="Write Protection Interrupt Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the write protection of the interruption configuration if WPKEY matches to 0x4F5450 (OTP in ASCII)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the write protection of the interruption configuration if WPKEY matches to 0x4F5450 (OTP in ASCII)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WPCTEN" edc:nzwidth="0x1" edc:desc="Write Protection Control Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the write protection of the control if WPKEY matches to 0x4F5450 (OTP in ASCII)." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the write protection of the control if WPKEY matches to 0x4F5450 (OTP in ASCII)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="FIRSTE" edc:nzwidth="0x1" edc:desc="First Error Report Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The last write protection violation source is reported in OTPC_WPSR.WPVSRC and the last software control error type is reported in OTPC_WPSR.SWETYP; The OTPC_ISR.SECE flag is set at the first error occurrence within a series." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Only the first write protection violation source is reported in OTPC_WPSR.WPVSRC and only the first software control error type is reported in OTPC_WPSR.SWETYP. The OTPC_ISR.SECE flag is set at the first error occurrence within a series." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="WPKEY" edc:nzwidth="0x18" edc:desc="Write Protection Key">
              <edc:SFRFieldSemantic edc:cname="PASSWD" edc:desc="Writing any other value in this field aborts the write operation. Always reads as 0." edc:when="(field &amp; 0xFFFFFF) == 0x4F5450"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_WPSR" edc:nzwidth="0x20" edc:access="r---rrrrrrrrrrrrrrrrrrrr----rrrr" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x8FFFFF0F" edc:_addr="0xEFF000E8">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="WPVS" edc:nzwidth="0x1" edc:desc="Write Protection Violation Status (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No write protection violation has occurred since the last read of OTPC_WPSR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A write protection violation has occurred since the last read of OTPC_WPSR. If this violation is an unauthorized attempt to write a protected register, the associated violation is reported into WPVSRC." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CGD" edc:nzwidth="0x1" edc:desc="Clock Glitch Detected (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No clock glitch has occurred since the last read of OTPC_WPSR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A clock glitch has occurred since the last read of OTPC_WPSR. This flag can be set under abnormal operating conditions." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SEQE" edc:nzwidth="0x1" edc:desc="Internal Sequencer Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No peripheral internal sequencer error has occurred since the last read of OTPC_WPSR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A peripheral internal sequencer error has occurred since the last read of OTPC_WPSR. This flag can be set under abnormal operating conditions." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SWE" edc:nzwidth="0x1" edc:desc="Software Control Error (cleared on read)">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No software error has occurred since the last read of OTPC_WPSR." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="A software error has occurred since the last read of OTPC_WPSR. The field SWETYP details the type of software error encountered." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x4"/>
            <edc:SFRFieldDef edc:cname="WPVSRC" edc:nzwidth="0x10" edc:desc="Write Protection Violation Source"/>
            <edc:SFRFieldDef edc:cname="SWETYP" edc:nzwidth="0x4" edc:desc="Software Error Type">
              <edc:SFRFieldSemantic edc:cname="READ_WO" edc:desc="A write-only register has been read (warning)." edc:when="(field &amp; 0xF) == 0"/>
              <edc:SFRFieldSemantic edc:cname="WRITE_RO" edc:desc="A write access has been performed on a read-only register (warning)." edc:when="(field &amp; 0xF) == 1"/>
              <edc:SFRFieldSemantic edc:cname="CONF_CHG" edc:desc="A change has been made into the configuration (error)." edc:when="(field &amp; 0xF) == 2"/>
              <edc:SFRFieldSemantic edc:cname="KEY_ERROR" edc:desc="A write has been computed in OTPC_CR, OTPC_ACR, OTPC_RCR, OTPC_PCR, OTPC_OMR or OTPC_WPMR register with a wrong value in the related KEY field (error)." edc:when="(field &amp; 0xF) == 3"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x3"/>
            <edc:SFRFieldDef edc:cname="ECLASS" edc:nzwidth="0x1" edc:desc="Software Error Class">
              <edc:SFRFieldSemantic edc:cname="WARNING" edc:desc="An abnormal access that does not have any impact." edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="ERROR" edc:desc="An abnormal access that may have an impact." edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x14" edc:_addr="0xEFF000EC"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_RCR" edc:nzwidth="0x20" edc:access="wwwwwwwwwwwwwwww---------------w" edc:impl="0xFFFF0001" edc:_addr="0xEFF00100">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PGM" edc:nzwidth="0x1" edc:desc="Program">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC ROM Data Register is written at the address specified in the OTPC ROM Address Register." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0xF"/>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x10" edc:desc="Programming Key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_RMR" edc:nzwidth="0x20" edc:access="--------------nnn-----nn-------n" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x38301" edc:_addr="0xEFF00104">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="FWEN" edc:nzwidth="0x1" edc:desc="Firewall Enable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The firewall is disabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The firewall is enabled, all read and write accesses are denied and an error is returned on the system bus." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="RDDIS" edc:nzwidth="0x1" edc:desc="Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The read capability of the OTPC_RCR, OTPC_RMR, OTPC_RAR and OTPC_RDR registers is enabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The read capability of the OTPC_RCR, OTPC_RMR, OTPC_RAR and OTPC_RDR registers is disabled. In case of read, the returned value is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WRDIS" edc:nzwidth="0x1" edc:desc="Write Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The write capability of the OTPC_RCR, OTPC_RMR, OTPC_RAR and OTPC_RDR registers is enabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The write capability of the OTPC_RCR, OTPC_RMR, OTPC_RAR and OTPC_RDR registers is disabled. Only WRDIS and LOCK bits remain writeable (unless LOCK is set)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock Register">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_RMR register is not locked, any write access can change its content." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_RMR register is locked, write access does not change its value." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PGMODE" edc:nzwidth="0x2" edc:desc="Programming Mode">
              <edc:SFRFieldSemantic edc:cname="ROM_NO_PGM" edc:desc="ROM Code programming is disabled" edc:when="(field &amp; 0x3) == 0"/>
              <edc:SFRFieldSemantic edc:cname="ROM_SBUS_PGM" edc:desc="ROM Code programming through System Bus Slave Interface" edc:when="(field &amp; 0x3) == 1"/>
              <edc:SFRFieldSemantic edc:cname="ROM_UI_ADDR_CONST_PGM" edc:desc="ROM Code programming through User Interface" edc:when="(field &amp; 0x3) == 2"/>
              <edc:SFRFieldSemantic edc:cname="ROM_UI_ADDR_INCR_PGM" edc:desc="ROM Code programming through User Interface with OTPC_RAR incremented after each programming." edc:when="(field &amp; 0x3) == 3"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x8" edc:_addr="0xEFF00108"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_RAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn--" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFFC" edc:_addr="0xEFF00110">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="RADDR" edc:nzwidth="0x1E" edc:desc="ROM Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_RDR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00114">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="RDATA" edc:nzwidth="0x20" edc:desc="ROM Data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xE8" edc:_addr="0xEFF00118"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_PCR" edc:nzwidth="0x20" edc:access="wwwwwwwwwwwwwwww--------ww-----w" edc:impl="0xFFFF00C1" edc:_addr="0xEFF00200">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PGM" edc:nzwidth="0x1" edc:desc="Program">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC Patch Address and OTPC Patch Data registers are written." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="READ" edc:nzwidth="0x1" edc:desc="Read Patch">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The patch specified by PID field of OTPC_PMR is read." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="REFRESH" edc:nzwidth="0x1" edc:desc="Refresh Patches">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Read all patches from OTP and activate them." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x10" edc:desc="Programming Key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_PMR" edc:nzwidth="0x20" edc:access="------------nnnnn-----nnn-------" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xF8380" edc:_addr="0xEFF00204">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:AdjustPoint edc:offset="0x7"/>
            <edc:SFRFieldDef edc:cname="EMUL" edc:nzwidth="0x1" edc:desc="Emulation Mode">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the Emulation mode." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the Emulation mode." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RDDIS" edc:nzwidth="0x1" edc:desc="Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The read capability of the OTPC_PCR, OTPC_PMR, OTPC_PSR, OTPC_PAR and OTPC_PDR registers is enabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The read capability of the OTPC_PCR, OTPC_PMR, OTPC_PSR, OTPC_PAR and OTPC_PDR registers is disabled. In case of read, the returned value is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WRDIS" edc:nzwidth="0x1" edc:desc="Write Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The write capability of the OTPC_PCR, OTPC_PMR, OTPC_PAR and OTPC_PDR registers is enabled" edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The write capability of the OTPC_PCR, OTPC_PMR, OTPC_PAR and OTPC_PDR registers is disabled. Only WRDIS and LOCK bits remain writeable (unless LOCK is set)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock Register">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_PMR register is not locked, any write access can change its content." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_PMR register is locked, write access does not change its value." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="PID" edc:nzwidth="0x4" edc:desc="Patch ID"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_PSR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00208">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="SOFT" edc:nzwidth="0x20" edc:desc="Software Value"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0xEFF0020C"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_PAR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00210">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="VALID0" edc:nzwidth="0x2" edc:desc="Patch Validity"/>
            <edc:SFRFieldDef edc:cname="PADDR" edc:nzwidth="0x1A" edc:desc="Patch Address"/>
            <edc:SFRFieldDef edc:cname="VALID1" edc:nzwidth="0x4" edc:desc="Patch Validity"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_PDR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00214">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PDATA" edc:nzwidth="0x20" edc:desc="Patch Data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0xE8" edc:_addr="0xEFF00218"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ACR" edc:nzwidth="0x20" edc:access="wwwwwwwwwwwwwwwww-----wwww-w-www" edc:impl="0xFFFF83D7" edc:_addr="0xEFF00300">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PGM" edc:nzwidth="0x1" edc:desc="Program Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The selected engineering packet is written." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="CKSGEN" edc:nzwidth="0x1" edc:desc="Generate Checksum">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Generates and programs the selected engineering packet checksum." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INVLD" edc:nzwidth="0x1" edc:desc="Invalidate Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Invalidates the selected engineering packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="HIDE" edc:nzwidth="0x1" edc:desc="Hide Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The selected engineering packet is not readable anymore until the next reset." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="READ" edc:nzwidth="0x1" edc:desc="Read Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a read sequence of the selected packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="FLUSH" edc:nzwidth="0x1" edc:desc="Flush Temporary Registers">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a flush of the temporary registers used to store the payload of the packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="KBSTART" edc:nzwidth="0x1" edc:desc="Key Bus Transfer Start">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a transfer through the Master Key bus." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="KBSTOP" edc:nzwidth="0x1" edc:desc="Key Bus Transfer Stop">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Stops an on-going transfer on the Master Key bus." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x5"/>
            <edc:SFRFieldDef edc:cname="REFRESH" edc:nzwidth="0x1" edc:desc="Refresh the Area">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="No effect." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Starts a refresh of the area in the Emulation mode." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="KEY" edc:nzwidth="0x10" edc:desc="Programming Key"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_AMR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnn--n--nnn--n-nnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFF9397" edc:_addr="0xEFF00304">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="UIDRDDIS" edc:nzwidth="0x1" edc:desc="UID Register Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_UIDR register is readable." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_UIDR register is not readable, value read is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="HCGRDDIS" edc:nzwidth="0x1" edc:desc="Hardware Configuration Register Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_HCR register is readable." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_HCR register is not readable, value read is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="SCGRDDIS" edc:nzwidth="0x1" edc:desc="Security Configuration Register Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_SCR register is readable." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_SCR register is not readable, value read is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="NPCKT" edc:nzwidth="0x1" edc:desc="New Packet">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Updates the packet defined at the ADDR address." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Creates a new packet." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="EMUL" edc:nzwidth="0x1" edc:desc="Emulation Mode">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="Disables the Emulation mode." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="Enables the Emulation mode." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="RDDIS" edc:nzwidth="0x1" edc:desc="Read Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The read capability of the OTPC_ACR, OTPC_AMR, OTPC_AAR, OTPC_AHR and OTPC_ADR registers is enabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The read capability of the OTPC_ACR, OTPC_AMR, OTPC_AAR, OTPC_AHR and OTPC_ADR registers is disabled. In case of read, the returned value is 0." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="WRDIS" edc:nzwidth="0x1" edc:desc="Write Disable">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The write capability of the OTPC_ACR, OTPC_AMR, OTPC_AAR, OTPC_AHR and OTPC_ADR registers is enabled." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The write capability of the OTPC_ACR, OTPC_AMR, OTPC_AAR, OTPC_AHR and OTPC_ADR registers is disabled. Only WRDIS and LOCK bits remain writeable (unless LOCK is set)." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="KBDST" edc:nzwidth="0x1" edc:desc="Key Bus Destination">
              <edc:SFRFieldSemantic edc:cname="TDES" edc:desc="The TDES is the destination of the key transfer." edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="AES" edc:desc="The AES is the destination of the key transfer." edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:SFRFieldDef>
            <edc:AdjustPoint edc:offset="0x2"/>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock Register">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The OTPC_AMR register is not locked; any write access can change its content." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The OTPC_AMR register is locked; write access does not change its value." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="AADDR" edc:nzwidth="0x10" edc:desc="Address"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_AAR" edc:nzwidth="0x20" edc:access="---------------n--------nnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0x100FF" edc:_addr="0xEFF00308">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="DADDR" edc:nzwidth="0x8" edc:desc="Data Address"/>
            <edc:AdjustPoint edc:offset="0x8"/>
            <edc:SFRFieldDef edc:cname="INCRT" edc:nzwidth="0x1" edc:desc="Increment Type">
              <edc:SFRFieldSemantic edc:cname="AFTER_READ" edc:desc="Increment DADDR after a read of OTPC_ADR." edc:when="(field &amp; 0x1) == 0x0"/>
              <edc:SFRFieldSemantic edc:cname="AFTER_WRITE" edc:desc="Increment DADDR after a write of OTPC_ADR." edc:when="(field &amp; 0x1) == 0x1"/>
            </edc:SFRFieldDef>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:AdjustPoint edc:offset="0x4" edc:_addr="0xEFF0030C"/>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_AHR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnn-nnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:impl="0xFFFFFFBF" edc:_addr="0xEFF00310">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="PACKET" edc:nzwidth="0x3" edc:desc="Packet Type">
              <edc:SFRFieldSemantic edc:cname="REGULAR" edc:desc="Regular packet accessible through the User Interface." edc:when="(field &amp; 0x7) == 1"/>
              <edc:SFRFieldSemantic edc:cname="KEY" edc:desc="Key packet accessible only through the Key buses." edc:when="(field &amp; 0x7) == 2"/>
              <edc:SFRFieldSemantic edc:cname="PRODUCT_UID" edc:desc="Product UID packet." edc:when="(field &amp; 0x7) == 4"/>
              <edc:SFRFieldSemantic edc:cname="HARDWARE_CONFIGURATION" edc:desc="Hardware Configuration packet." edc:when="(field &amp; 0x7) == 5"/>
              <edc:SFRFieldSemantic edc:cname="SECURITY_CONFIGURATION" edc:desc="Security Configuration packet." edc:when="(field &amp; 0x7) == 6"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="LOCK" edc:nzwidth="0x1" edc:desc="Lock Status">
              <edc:SFRFieldSemantic edc:cname="0" edc:desc="The packet is not locked." edc:when="(field &amp; 0x1) == 0"/>
              <edc:SFRFieldSemantic edc:cname="1" edc:desc="The packet is locked." edc:when="(field &amp; 0x1) == 1"/>
            </edc:SFRFieldDef>
            <edc:SFRFieldDef edc:cname="INVLD" edc:nzwidth="0x2" edc:desc="Invalid Status"/>
            <edc:AdjustPoint edc:offset="0x1"/>
            <edc:SFRFieldDef edc:cname="ONE" edc:nzwidth="0x1" edc:desc="One"/>
            <edc:SFRFieldDef edc:cname="SIZE" edc:nzwidth="0x8" edc:desc="Packet Size"/>
            <edc:SFRFieldDef edc:cname="CHECKSUM" edc:nzwidth="0x10" edc:desc="Packet Checksum"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
      <edc:SFRDef ltx:memberofperipheral="OTPC" edc:cname="OTPC_ADR" edc:nzwidth="0x20" edc:access="nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" edc:por="00000000000000000000000000000000" edc:mclr="00000000000000000000000000000000" edc:_addr="0xEFF00314">
        <edc:SFRModeList>
          <edc:SFRMode edc:id="DS.0" ltx:memberofperipheral="OTPC">
            <edc:SFRFieldDef edc:cname="ADATA" edc:nzwidth="0x20" edc:desc="Engineering Packet Data"/>
          </edc:SFRMode>
        </edc:SFRModeList>
      </edc:SFRDef>
    </edc:GPRDataSector>
    <edc:DeviceIDSector edc:regionid="devid" edc:beginaddr="0xFFFFF240" edc:endaddr="0xFFFFF244" edc:value="0x89750030" edc:mask="0x80000000"/>
  </edc:PhysicalSpace>
  <edc:PinList edc:ppsflavor="atmel">
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC30"/>
      <edc:VirtualPin edc:name="FLEXCOM3_IO7" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM3"/>
      <edc:VirtualPin edc:name="P94" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC2"/>
      <edc:VirtualPin edc:name="ISC_D2" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TIOA3" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P66" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A0M" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC4"/>
      <edc:VirtualPin edc:name="ISC_D4" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TCLK3" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P68" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A1M" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC6"/>
      <edc:VirtualPin edc:name="ISC_D6" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TIOB4" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P70" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A2M" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC10"/>
      <edc:VirtualPin edc:name="ISC_D10" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="PWM0" edc:ppsfunction="C" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P74" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_CLK1M" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC12"/>
      <edc:VirtualPin edc:name="ISC_PCK" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TIOA5" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P76" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A3M" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB19"/>
      <edc:VirtualPin edc:name="QSCK" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM12_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM12"/>
      <edc:VirtualPin edc:name="P51" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB17"/>
      <edc:VirtualPin edc:name="QIO7" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM12_IO0" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM12"/>
      <edc:VirtualPin edc:name="I2SMCC_DOUT0" edc:ppsfunction="D" ltx:memberofperipheral="I2SMCC"/>
      <edc:VirtualPin edc:name="P49" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB16"/>
      <edc:VirtualPin edc:name="QIO6" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM11_IO1" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM11"/>
      <edc:VirtualPin edc:name="I2SMCC_DIN0" edc:ppsfunction="D" ltx:memberofperipheral="I2SMCC"/>
      <edc:VirtualPin edc:name="P48" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC28"/>
      <edc:VirtualPin edc:name="FLEXCOM1_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM1"/>
      <edc:VirtualPin edc:name="P92" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC3"/>
      <edc:VirtualPin edc:name="ISC_D3" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TIOB3" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P67" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A0P" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC5"/>
      <edc:VirtualPin edc:name="ISC_D5" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TIOA4" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P69" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A1P" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC7"/>
      <edc:VirtualPin edc:name="ISC_D7" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TCLK4" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P71" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A2P" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC11"/>
      <edc:VirtualPin edc:name="ISC_D11" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="PWM1" edc:ppsfunction="C" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P75" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_CLK1P" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC13"/>
      <edc:VirtualPin edc:name="ISC_VSYNC" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TIOB5" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P77" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
      <edc:VirtualPin edc:name="LVDS_A3P" edc:ppsfunction="X1" ltx:memberofperipheral="LVDSPHY"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB21"/>
      <edc:VirtualPin edc:name="QIO0" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM12_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM12"/>
      <edc:VirtualPin edc:name="P53" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB24"/>
      <edc:VirtualPin edc:name="QIO3" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM9_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM9"/>
      <edc:VirtualPin edc:name="P56" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB20"/>
      <edc:VirtualPin edc:name="QCS" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM12_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM12"/>
      <edc:VirtualPin edc:name="P52" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC24"/>
      <edc:VirtualPin edc:name="FLEXCOM3_IO4" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM3"/>
      <edc:VirtualPin edc:name="P88" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC26"/>
      <edc:VirtualPin edc:name="FLEXCOM3_IO2" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM3"/>
      <edc:VirtualPin edc:name="P90" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC25"/>
      <edc:VirtualPin edc:name="FLEXCOM3_IO3" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM3"/>
      <edc:VirtualPin edc:name="P89" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC27"/>
      <edc:VirtualPin edc:name="FLEXCOM1_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM1"/>
      <edc:VirtualPin edc:name="P91" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOP"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB15"/>
      <edc:VirtualPin edc:name="QIO5" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM11_IO0" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM11"/>
      <edc:VirtualPin edc:name="I2SMCC_WS" edc:ppsfunction="D" ltx:memberofperipheral="I2SMCC"/>
      <edc:VirtualPin edc:name="P47" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB23"/>
      <edc:VirtualPin edc:name="QIO2" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM9_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM9"/>
      <edc:VirtualPin edc:name="P55" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB18"/>
      <edc:VirtualPin edc:name="QDQS" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="ADTRG" edc:ppsfunction="B" ltx:memberofperipheral="ADC"/>
      <edc:VirtualPin edc:name="FLEXCOM12_IO1" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM12"/>
      <edc:VirtualPin edc:name="IRQ" edc:ppsfunction="D" ltx:memberofperipheral="AIC"/>
      <edc:VirtualPin edc:name="P50" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB26"/>
      <edc:VirtualPin edc:name="QIO4" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="I2SMCC_CK" edc:ppsfunction="D" ltx:memberofperipheral="I2SMCC"/>
      <edc:VirtualPin edc:name="P58" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDQSPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD5"/>
      <edc:VirtualPin edc:name="NCS0" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="FLEXCOM11_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM11"/>
      <edc:VirtualPin edc:name="P101" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC20"/>
      <edc:VirtualPin edc:name="FLEXCOM10_IO4" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM10"/>
      <edc:VirtualPin edc:name="PWM2" edc:ppsfunction="C" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P84" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC22"/>
      <edc:VirtualPin edc:name="FLEXCOM3_IO0" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM3"/>
      <edc:VirtualPin edc:name="P86" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC21"/>
      <edc:VirtualPin edc:name="PWM3" edc:ppsfunction="C" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P85" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC29"/>
      <edc:VirtualPin edc:name="FLEXCOM1_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM1"/>
      <edc:VirtualPin edc:name="P93" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC31"/>
      <edc:VirtualPin edc:name="FIQ" edc:ppsfunction="A" ltx:memberofperipheral="AIC"/>
      <edc:VirtualPin edc:name="PCK1" edc:ppsfunction="C" ltx:memberofperipheral="PMC"/>
      <edc:VirtualPin edc:name="P95" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB25"/>
      <edc:VirtualPin edc:name="QINT" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="I2SMCC_MCK" edc:ppsfunction="D" ltx:memberofperipheral="I2SMCC"/>
      <edc:VirtualPin edc:name="P57" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDLVDS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB22"/>
      <edc:VirtualPin edc:name="QIO1" edc:ppsfunction="A" ltx:memberofperipheral="QSPI"/>
      <edc:VirtualPin edc:name="FLEXCOM9_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM9"/>
      <edc:VirtualPin edc:name="P54" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="DDR"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD10"/>
      <edc:VirtualPin edc:name="NANDDAT4" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NRD" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P106" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB8"/>
      <edc:VirtualPin edc:name="FLEXCOM6_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM6"/>
      <edc:VirtualPin edc:name="P40" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC16"/>
      <edc:VirtualPin edc:name="ISC_FIELD" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="FLEXCOM10_IO0" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM10"/>
      <edc:VirtualPin edc:name="P80" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC18"/>
      <edc:VirtualPin edc:name="FLEXCOM10_IO2" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM10"/>
      <edc:VirtualPin edc:name="PWM0" edc:ppsfunction="C" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P82" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC15"/>
      <edc:VirtualPin edc:name="ISC_MCK" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="PCK0" edc:ppsfunction="C" ltx:memberofperipheral="PMC"/>
      <edc:VirtualPin edc:name="P79" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC23"/>
      <edc:VirtualPin edc:name="FLEXCOM3_IO1" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM3"/>
      <edc:VirtualPin edc:name="P87" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDOUT"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="DDR"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD14"/>
      <edc:VirtualPin edc:name="NWAIT" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NANDRDY" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P110" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB14"/>
      <edc:VirtualPin edc:name="PWM3" edc:ppsfunction="B" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P46" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC14"/>
      <edc:VirtualPin edc:name="ISC_HSYNC" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="TCLK5" edc:ppsfunction="C" ltx:memberofperipheral="TC1"/>
      <edc:VirtualPin edc:name="P78" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDMIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB6"/>
      <edc:VirtualPin edc:name="FLEXCOM0_IO7" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM0"/>
      <edc:VirtualPin edc:name="P38" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC8"/>
      <edc:VirtualPin edc:name="ISC_D8" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="FLEXCOM9_IO0" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM9"/>
      <edc:VirtualPin edc:name="P72" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC0"/>
      <edc:VirtualPin edc:name="ISC_D0" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="FLEXCOM7_IO0" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM7"/>
      <edc:VirtualPin edc:name="P64" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC19"/>
      <edc:VirtualPin edc:name="FLEXCOM10_IO3" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM10"/>
      <edc:VirtualPin edc:name="PWM1" edc:ppsfunction="C" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P83" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC17"/>
      <edc:VirtualPin edc:name="FLEXCOM1_IO7" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM1"/>
      <edc:VirtualPin edc:name="FLEXCOM10_IO1" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM10"/>
      <edc:VirtualPin edc:name="P81" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VSSQ"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD3"/>
      <edc:VirtualPin edc:name="A22" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NANDCLE" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="FLEXCOM11_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM11"/>
      <edc:VirtualPin edc:name="P99" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB0"/>
      <edc:VirtualPin edc:name="FLEXCOM2_IO4" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM2"/>
      <edc:VirtualPin edc:name="P32" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA8"/>
      <edc:VirtualPin edc:name="FLEXCOM0_IO2" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM0"/>
      <edc:VirtualPin edc:name="SDMMC1_DAT3" edc:ppsfunction="B" ltx:memberofperipheral="SDMMC1"/>
      <edc:VirtualPin edc:name="P8" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC9"/>
      <edc:VirtualPin edc:name="ISC_D9" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="FLEXCOM9_IO1" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM9"/>
      <edc:VirtualPin edc:name="P73" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PC1"/>
      <edc:VirtualPin edc:name="ISC_D1" edc:ppsfunction="B" ltx:memberofperipheral="ISC"/>
      <edc:VirtualPin edc:name="FLEXCOM7_IO1" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM7"/>
      <edc:VirtualPin edc:name="P65" edc:ppsfunction="Default" ltx:memberofperipheral="PIOC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="DDR"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD1"/>
      <edc:VirtualPin edc:name="NANDWE" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="FLEXCOM7_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM7"/>
      <edc:VirtualPin edc:name="P97" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD8"/>
      <edc:VirtualPin edc:name="NANDDAT2" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="A19" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P104" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB2"/>
      <edc:VirtualPin edc:name="FLEXCOM2_IO2" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM2"/>
      <edc:VirtualPin edc:name="P34" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA0"/>
      <edc:VirtualPin edc:name="SDMMC0_DAT0" edc:ppsfunction="A" ltx:memberofperipheral="SDMMC0"/>
      <edc:VirtualPin edc:name="P0" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIN"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GNDIN"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOM"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB4"/>
      <edc:VirtualPin edc:name="FLEXCOM8_IO0" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM8"/>
      <edc:VirtualPin edc:name="P36" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA4"/>
      <edc:VirtualPin edc:name="SDMMC0_DAT2" edc:ppsfunction="A" ltx:memberofperipheral="SDMMC0"/>
      <edc:VirtualPin edc:name="P4" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSRTUNE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOM"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOM"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD12"/>
      <edc:VirtualPin edc:name="NANDDAT6" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="A0" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NBS0" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P108" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB10"/>
      <edc:VirtualPin edc:name="PCK0" edc:ppsfunction="B" ltx:memberofperipheral="PMC"/>
      <edc:VirtualPin edc:name="FLEXCOM8_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM8"/>
      <edc:VirtualPin edc:name="P42" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA2"/>
      <edc:VirtualPin edc:name="SDMMC0_CK" edc:ppsfunction="A" ltx:memberofperipheral="SDMMC0"/>
      <edc:VirtualPin edc:name="P2" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="XIN"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="XOUT"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="MIPI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA29"/>
      <edc:VirtualPin edc:name="FLEXCOM1_IO1" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM1"/>
      <edc:VirtualPin edc:name="CANRX1" edc:ppsfunction="B" ltx:memberofperipheral="MCAN1"/>
      <edc:VirtualPin edc:name="P29" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD5" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA5"/>
      <edc:VirtualPin edc:name="SDMMC0_DAT3" edc:ppsfunction="A" ltx:memberofperipheral="SDMMC0"/>
      <edc:VirtualPin edc:name="P5" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA11"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO2" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="SDMMC1_CK" edc:ppsfunction="B" ltx:memberofperipheral="SDMMC1"/>
      <edc:VirtualPin edc:name="P11" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB1"/>
      <edc:VirtualPin edc:name="FLEXCOM2_IO3" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM2"/>
      <edc:VirtualPin edc:name="P33" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB12"/>
      <edc:VirtualPin edc:name="PWM1" edc:ppsfunction="B" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="FLEXCOM8_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM8"/>
      <edc:VirtualPin edc:name="P44" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA6"/>
      <edc:VirtualPin edc:name="FLEXCOM0_IO4" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM0"/>
      <edc:VirtualPin edc:name="SDMMC1_DAT1" edc:ppsfunction="B" ltx:memberofperipheral="SDMMC1"/>
      <edc:VirtualPin edc:name="P6" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDOUT"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="AUDIO"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDNF"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA10"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO0" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="SDMMC1_CMD" edc:ppsfunction="B" ltx:memberofperipheral="SDMMC1"/>
      <edc:VirtualPin edc:name="P10" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSDPB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSDMB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSDPC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA26"/>
      <edc:VirtualPin edc:name="DRXD" edc:ppsfunction="A" ltx:memberofperipheral="DBGU"/>
      <edc:VirtualPin edc:name="CANRX0" edc:ppsfunction="B" ltx:memberofperipheral="MCAN0"/>
      <edc:VirtualPin edc:name="P26" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD2" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDCORE"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD0"/>
      <edc:VirtualPin edc:name="NANDOE" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="FLEXCOM7_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM7"/>
      <edc:VirtualPin edc:name="P96" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD11"/>
      <edc:VirtualPin edc:name="NANDDAT5" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NWR0" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NWE" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P107" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB5"/>
      <edc:VirtualPin edc:name="FLEXCOM8_IO1" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM8"/>
      <edc:VirtualPin edc:name="P37" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB13"/>
      <edc:VirtualPin edc:name="PWM2" edc:ppsfunction="B" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="P45" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA19"/>
      <edc:VirtualPin edc:name="TCLK1" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="TF" edc:ppsfunction="B" ltx:memberofperipheral="SSC"/>
      <edc:VirtualPin edc:name="CLASSD_L1" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P19" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSDPA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSDMA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="HHSDMC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="NRST"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GNDANA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOM"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD13"/>
      <edc:VirtualPin edc:name="NANDDAT7" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NWR1" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NBS1" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P109" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="TST"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD4"/>
      <edc:VirtualPin edc:name="NCS2" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NANDCS" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="FLEXCOM11_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM11"/>
      <edc:VirtualPin edc:name="P100" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD2"/>
      <edc:VirtualPin edc:name="A21" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="NANDALE" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="FLEXCOM7_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM7"/>
      <edc:VirtualPin edc:name="P98" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD6"/>
      <edc:VirtualPin edc:name="NANDDAT0" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="A1" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P102" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD7"/>
      <edc:VirtualPin edc:name="NANDDAT1" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="A12" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P103" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA3"/>
      <edc:VirtualPin edc:name="SDMMC0_DAT1" edc:ppsfunction="A" ltx:memberofperipheral="SDMMC0"/>
      <edc:VirtualPin edc:name="P3" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA17"/>
      <edc:VirtualPin edc:name="TIOA2" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO2" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="CLASSD_R2" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P17" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA31"/>
      <edc:VirtualPin edc:name="FLEXCOM0_IO1" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM0"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO5" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="P31" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD7" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA25"/>
      <edc:VirtualPin edc:name="FLEXCOM6_IO1" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM6"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO5" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="P25" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD1" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA24"/>
      <edc:VirtualPin edc:name="FLEXCOM6_IO0" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM6"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO6" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="P24" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD0" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA12"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO3" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="P12" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDANA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB3"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO6" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="P35" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOP"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PD9"/>
      <edc:VirtualPin edc:name="NANDDAT3" edc:ppsfunction="A" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="A20" edc:ppsfunction="B" ltx:memberofperipheral="EBI"/>
      <edc:VirtualPin edc:name="P105" edc:ppsfunction="Default" ltx:memberofperipheral="PIOD"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDIOP"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB7"/>
      <edc:VirtualPin edc:name="FLEXCOM6_IO2" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM6"/>
      <edc:VirtualPin edc:name="P39" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB9"/>
      <edc:VirtualPin edc:name="PCK1" edc:ppsfunction="B" ltx:memberofperipheral="PMC"/>
      <edc:VirtualPin edc:name="FLEXCOM6_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM6"/>
      <edc:VirtualPin edc:name="P41" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA21"/>
      <edc:VirtualPin edc:name="TIOB0" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="RD" edc:ppsfunction="B" ltx:memberofperipheral="SSC"/>
      <edc:VirtualPin edc:name="CLASSD_L3" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P21" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA18"/>
      <edc:VirtualPin edc:name="TCLK0" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="TK" edc:ppsfunction="B" ltx:memberofperipheral="SSC"/>
      <edc:VirtualPin edc:name="CLASSD_L0" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P18" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA27"/>
      <edc:VirtualPin edc:name="DTXD" edc:ppsfunction="A" ltx:memberofperipheral="DBGU"/>
      <edc:VirtualPin edc:name="CANTX0" edc:ppsfunction="B" ltx:memberofperipheral="MCAN0"/>
      <edc:VirtualPin edc:name="P27" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD3" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="VDDBU"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA30"/>
      <edc:VirtualPin edc:name="FLEXCOM0_IO0" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM0"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO4" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO4" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="P30" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD6" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA28"/>
      <edc:VirtualPin edc:name="FLEXCOM1_IO0" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM1"/>
      <edc:VirtualPin edc:name="CANTX1" edc:ppsfunction="B" ltx:memberofperipheral="MCAN1"/>
      <edc:VirtualPin edc:name="P28" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
      <edc:VirtualPin edc:name="AD4" edc:ppsfunction="X1" ltx:memberofperipheral="ADC"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA14"/>
      <edc:VirtualPin edc:name="FLEXCOM2_IO1" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM2"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO3" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO5" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="P14" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA7"/>
      <edc:VirtualPin edc:name="FLEXCOM0_IO3" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM0"/>
      <edc:VirtualPin edc:name="SDMMC1_DAT2" edc:ppsfunction="B" ltx:memberofperipheral="SDMMC1"/>
      <edc:VirtualPin edc:name="P7" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PB11"/>
      <edc:VirtualPin edc:name="PWM0" edc:ppsfunction="B" ltx:memberofperipheral="PWM"/>
      <edc:VirtualPin edc:name="FLEXCOM8_IO3" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM8"/>
      <edc:VirtualPin edc:name="P43" edc:ppsfunction="Default" ltx:memberofperipheral="PIOB"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA1"/>
      <edc:VirtualPin edc:name="SDMMC0_CMD" edc:ppsfunction="A" ltx:memberofperipheral="SDMMC0"/>
      <edc:VirtualPin edc:name="P1" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA15"/>
      <edc:VirtualPin edc:name="TIOA0" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO1" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="CLASSD_R0" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P15" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA9"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO1" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="SDMMC1_DAT0" edc:ppsfunction="B" ltx:memberofperipheral="SDMMC1"/>
      <edc:VirtualPin edc:name="P9" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="TDI"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="WKUP0"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="RTCK"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="TDO"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="ADVREFN"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="ADVREFP"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="XOUT32"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="XIN32"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA20"/>
      <edc:VirtualPin edc:name="TCLK2" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="TD" edc:ppsfunction="B" ltx:memberofperipheral="SSC"/>
      <edc:VirtualPin edc:name="CLASSD_L2" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P20" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA16"/>
      <edc:VirtualPin edc:name="TIOA1" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="FLEXCOM5_IO0" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM5"/>
      <edc:VirtualPin edc:name="CLASSD_R1" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P16" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA23"/>
      <edc:VirtualPin edc:name="TIOB2" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="RF" edc:ppsfunction="B" ltx:memberofperipheral="SSC"/>
      <edc:VirtualPin edc:name="FLEXCOM2_IO7" edc:ppsfunction="C" ltx:memberofperipheral="FLEXCOM2"/>
      <edc:VirtualPin edc:name="P23" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA22"/>
      <edc:VirtualPin edc:name="TIOB1" edc:ppsfunction="A" ltx:memberofperipheral="TC0"/>
      <edc:VirtualPin edc:name="RK" edc:ppsfunction="B" ltx:memberofperipheral="SSC"/>
      <edc:VirtualPin edc:name="CLASSD_R3" edc:ppsfunction="C" ltx:memberofperipheral="CLASSD"/>
      <edc:VirtualPin edc:name="P22" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="PA13"/>
      <edc:VirtualPin edc:name="FLEXCOM2_IO0" edc:ppsfunction="A" ltx:memberofperipheral="FLEXCOM2"/>
      <edc:VirtualPin edc:name="FLEXCOM4_IO4" edc:ppsfunction="B" ltx:memberofperipheral="FLEXCOM4"/>
      <edc:VirtualPin edc:name="P13" edc:ppsfunction="Default" ltx:memberofperipheral="PIOA"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="TCK"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="SHDN"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="TMS"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="JTAGSEL"/>
    </edc:Pin>
    <edc:Pin>
      <edc:VirtualPin edc:name="GND"/>
    </edc:Pin>
  </edc:PinList>
</edc:PIC>
