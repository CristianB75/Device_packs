# This file is autogenerated
comm_speed=4000000
comm_iface = True
reset_delay = 0
has_reset = True
show_output = False
log_level = 0

def onShowPropsDFP2(t):
    ide.addBooleanProperty(t,"arm.use_vtor" , "*|programoptions|programoptions.eraseb4program","Set PC and SP to VTOR","After reset, force PC and SP to the entries defined by the VTOR", False)
    ide.addTextProperty(t,"arm.vtor_adr" , "*|programoptions|programoptions.eraseb4program","VTOR table or numerical address", "Enter address of vector table", "exception_table")
    ide.addPropCategory(t,"diagnostics" , "*|programoptions", "Diagnostics")
    ide.addBooleanProperty(t,"script.show_output" , "*|diagnostics|*","Output diagnostic logging","Show diagnostic text in the Output window", False)
    ide.addTextProperty(t,"script.log_level" , "*|diagnostics|*","Diagnostic log level","Set diagnostic level (usually 0 1 or 3)", "1")
    ide.addTextProperty(t,"script.reset_delay" , "*|diagnostics|*","Additional delay after reset","Enter additional RST settling delay in msec", "0")
    ide.addBooleanProperty(t,"script.has_reset" , "*|diagnostics|*","Uncheck if RESET line is not wired","Normally checked. Uncheck if the target does not have RST connected to the debugger", True)

def begin_communication_session():
    global comm_iface, comm_speed,_stealth_runstate, erase_as_needed 
    global log_level,show_output,reset_delay, target_was_reset, has_reset
    log_level  = settings.getNumeric("script.log_level",log_level)
    show_output= settings.getBool("script.show_output",show_output)
    has_reset  = settings.getBool("script.has_reset",has_reset)
    reset_delay= settings.getNumeric("script.reset_delay",reset_delay)
    comm_iface = settings.getString("communication.interface", "swd") == "swd"
    comm_speed = settings.getNumeric("communication.frequency", comm_speed)
    _stealth_runstate = 2
    erase_as_needed = True    
    dev.Connect(comm_iface, comm_speed)
    dev.SetApiLogging(log_level)
    log.setShowOutput(show_output)
    if "RH71" in device:
        initialize_HEFC()

def begin_debug_session():#mplab
    log.info("Debug: Init debug session")
    reset_target()
    
def debug_read(mem_type, start, length, data):#mplab
    log.info("Debug: Reading %d bytes at start address 0x%08x (%s)" % (length, start, mem_type))
    dev.Read(start, data, 0, length)

def debug_write(mem_type, start, length, data):#mplab
    log.info("Debug: Writing %d bytes at start address 0x%08x (%s)" % (length, start, mem_type))
    dev.Write(start, data, 0, length)

def get_pc():  # mplab
    pc = _get_pc()
    log.info("get_pc PC=0x%08x" % pc)
    return pc

def _get_pc():
    return dev.ReadReg64(arm.PC)

def _get_reg(idx):
    return dev.ReadReg64(idx)

def _set_reg(idx,val):
    return dev.WriteReg64(idx,val)

def _mem_read(start, length, data):
    dev.Read(start, data, 0, length)

def _mem_write(start, length, data):
    dev.Write(start, data, 0, length)

def run_target():#mplab
    log.info("Debug: run target")
    _run_target()

def _run_target():
    dev.GoEx(1, 1)

_stealth_runstate = 2
def halt_target():  # mplab
    global _stealth_runstate    
    log.info("Debug: halt target")
    _stealth_runstate = 2  # cancels stealth mode
    _halt_target()

def _halt_target():
    dev.Halt()

def step_target():#mplab
    log.info("Debug: stepping at pc 0x%08x" % get_pc())
    dev.Step()


def set_pc(pc):  # mplab
    log.info("Debug: set pc to 0x%08x" % pc)
    _set_pc(pc)

def _set_pc(pc):
    dev.WriteReg64(arm.PC, pc)

def reset_target(): # mplab
    log.info("Debug: reset")
    reset_and_halt()
    on_after_reset() # call autoload hook

def _reset_target():
    reset_and_halt()

def reset_and_halt():
    dev.Reset()

g_stopped = False

def is_target_running():# mplab
    global _stealth_runstate
    if _stealth_runstate == 2:
        return _is_running()
    return _stealth_runstate != 0

def _is_running():
    global g_stopped

    stopped = dev.IsHalted()
    if stopped != g_stopped:
        log.info("Debug: target has halted" if stopped else "Debug: target is now running")
        g_stopped = stopped
    return 0  == g_stopped

def end_debug_session():  # mplab
    log.info("Debug: End debug session")

def on_after_reset(): 
    if not settings.getBool("arm.use_vtor", False):
        return
    vtor_name  = settings.getString("arm.vtor_adr", "0")

    vtor = -1
    try:
        vtor = int(vtor_name,0)
    except:
        try:
            vtor=deb.GetSymbolAddress(vtor_name)
        except:
            log.error("Debug: failed to compute location of VTOR")
            return
    load_vtor(vtor) 
    pass

def load_vtor(adr):
    try:
        dev.WriteReg64(arm.PC,dev.Read32(adr + 4))
        dev.WriteReg64(arm.SP,dev.Read32(adr))
    except:
        log.error("Debug: failed to set PC and SP to contents of exception_table")

def on_program_done():
    on_after_reset()
def write_config(address, len, data):
    dev.Write(address,data,0,len)

def read_config(address, length, data):
    dev.Read(address, data, 0, length)
def erase(): # mplab
    global erase_as_needed
    log.info("Prog: Erase")
    dev.Halt()
    dev.api.JLINK_EraseChip()
    erase_as_needed = False # tell prog_write not to erase rows prior to write
    dev.Delay(100000)


def prog_write(type_of_mem, address, length, data): # mplab
    global erase_as_needed
    log.info("Writing %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    if str(type_of_mem) == "Cfg":
        write_config(address, length, data)
        return
    elif str(type_of_mem) != "Pgm":
        dev.Write(address, data, 0, length)
        return

    if address == 0x41004000:
        log.error("Setting the security bit is not supported on Segger tools")
    _flash_write(address, length, data, erase_as_needed)
    erase_as_needed = True

def _flash_write(address, length, data, doerase):
    dev.Write(address, data, 0, length)

def prog_read(type_of_mem, address, length, data): # mplab
    log.info("Reading %d bytes from address 0x%0x of %s memory" % (length, address, type_of_mem))
    if str(type_of_mem) == "Cfg":
        read_config(address, length, data)
        return
    dev.Read(address, data, 0, length)


def end_of_operations(): # mplab
    log.info("Prog: End of operations")
    dev.Reset()

def get_sp():
    return dev.ReadReg64(arm.SP)

def set_sp(sp):
    log.info("Debug: Set sp to 0x%0x" % sp)
    dev.WriteReg64(arm.SP, sp)

