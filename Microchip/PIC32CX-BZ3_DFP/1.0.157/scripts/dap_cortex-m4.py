# This file is autogenerated
comm_speed=2000000
erase_as_needed = True  # used in prog_write
reset_delay = 0
has_reset = True
show_output = False
log_level = 0
has_connected = False
comm_iface = True # default to swd

def _begin_debug_session():
    ensure_connect()
    reset_and_halt()
    cache_onDebugStart()

def _begin_communication_session(): 
    global log_level,show_output,reset_delay, target_was_reset, has_reset, _stealth_runstate    , has_connected
    log_level    = settings.getNumeric("script.log_level",log_level)
    show_output  = settings.getBool("script.show_output",show_output)
    has_reset  = settings.getBool("script.has_reset",has_reset)
    reset_delay = settings.getNumeric("script.reset_delay",reset_delay)
    has_connected = False
    target_was_reset = False
    _stealth_runstate = 2
    dev.SetApiLogging(log_level)
    log.setShowOutput(show_output)

    global comm_iface, comm_speed, erase_as_needed
    comm_iface = settings.getString("communication.interface", "swd") == "swd"
    comm_speed = settings.getNumeric("communication.frequency", comm_speed)
    erase_as_needed = True  # used in prog_write

    init_mem_handlers()

def _end_communication_session(): 
    global has_connected
    dev.Disconnect()
    has_connected = False


def onShowPropsDFP2(t):
    ide.addBooleanProperty(t,"arm.use_vtor" , "*|programoptions|programoptions.eraseb4program","Set PC and SP to VTOR","After reset, force PC and SP to the entries defined by the VTOR", False)
    ide.addTextProperty(t,"arm.vtor_adr" , "*|programoptions|programoptions.eraseb4program","VTOR table or numerical address", "Enter address of vector table", "exception_table")
    ide.addPropCategory(t,"diagnostics" , "*|toolpack", "Diagnostics")
    ide.addBooleanProperty(t,"script.show_output" , "*|diagnostics|*","Output diagnostic logging","Show diagnostic text in the Output window", False)
    ide.addTextProperty(t,"script.log_level" , "*|diagnostics|*","Diagnostic log level","Set diagnostic level (usually 0 1 or 3)", "1")
    ide.addTextProperty(t,"script.reset_delay" , "*|diagnostics|*","Additional delay after reset","Enter additional RST settling delay in msec", "0")
    ide.addBooleanProperty(t,"script.has_reset" , "*|diagnostics|*","Uncheck if RESET line is not wired","Normally checked. Uncheck if the target does not have RST connected to the debugger", True)
    ide.addTextProperty(t, "loader.board_file", "*|programoptions|**","Board file path","Set the path of board file", "${ProjectDir}/board.xboard")

def print_dhcsr_v(t, d):
    log.info(t + arm.getDHCSRString(d))

def print_dhcsr(text):
    try:
        d = dev.Read32(arm.DHCSR)
        print_dhcsr_v(text, d)
        return d
    except:
        log.log("DHCSR is unreadable")
        return 0

def _debug_read(mt, start, length, data):
    cache_onDataRead(start, length)
    try:
        dev.Read(start, data, 0, length)
    except:
        for i in range(len(data)):
            try:
                dev.Read(start + i, data, i, 1)
            except:
                data[i] = b'?'
                dev.Delay(reset_delay)
        log.info("Debug: an error occurred while reading address 0x%x length 0x%0x" % (start, length))

def _debug_write(mt, start, length, data):
    if str(mt) == "Pgm":
        cache_invalidateInstrCache()
        try:
            _flash_write(start, length, data, True)
        except:
            for i in range(len(data)):
                try:
                    _flash_write(start + i * 4, 1, data[i], True)
                except:
                    dev.Delay(reset_delay)
            log.info("Debug: an error occurred while writing address 0x%x length 0x%0x" % (start, length))
        return

    cache_onDataWrite(start, length)
    try:
        dev.Write(start, data, 0, length)
    except:
        for i in range(len(data)):
            try:
                dev.Write(start + i, data, i, 1)
            except:
                dev.Delay(reset_delay)
        log.info("Debug: an error occurred while writing address 0x%x length 0x%0x" % (start, length))

def debug_write_supports_flash():
    return 1

def _get_pc():
    try:
        pc = dev.ReadReg64(15)
    except:
        log.error("get_pc returned error")
        return 0
    return pc
    
def _mem_read(start, length, data):
    dev.Read(start, data, 0, length)

def _mem_write(start, length, data):
    dev.Write(start, data, 0, length)

def _run_target():
    cache_onRun()
    wdt_onRun()
    dev.Write32(arm.DHCSR, 0xa05f0001)  # DBGKEY | C_DEBUGEN | C_HALT

def _halt_target():
    dev.Write32(arm.DHCSR, 0xa05f0003)  # DBGKEY | C_DEBUGEN | C_HALT

def _step_target():
    cache_onRun()
    wdt_onRun()
    dev.Write32(arm.DHCSR, 0xa05f000b)  # DBGKEY | C_DEBUGEN | C_HALT | C_MASKINTS
    dev.Write32(arm.DHCSR, 0xa05f000d)  # DBGKEY | C_DEBUGEN | C_STEP | C_MASKINTS
    dev.Write32(arm.DHCSR, 0xa05f0003)  # DBGKEY | C_DEBUGEN | C_HALT
    cache_onStop()
    wdt_onHalt()

def _set_pc(pc):
    dev.WriteReg64(15, pc)

def print_byte_array(text, array, index, size):
    string = text
    for i in range(size):
        string += " %x" % array[i+index]
    log.info(string)

g_is_running = True
def _is_target_running():
    global g_is_running
    dhcsr = dev.Read32(arm.DHCSR)
    state = 0 == (dhcsr & 0x20000)
    if state != g_is_running:
        log.info("Debug: target is now running" if state else "Debug: target has halted")
        g_is_running = state 
    if not g_is_running:
        cache_onStop()
        wdt_onHalt()
    return g_is_running

def _reset_target(): 
    reset_and_halt()

def ensure_connect():
    global has_connected
    if has_connected:
        return
    dev.Connect(comm_iface, comm_speed)
    has_connected = True

def _end_debug_session(): 
    #disable hw bp
    fpb = dev.Read32(0xe0002000)
    if 0 != (fpb & 1):
        dev.Write32(0xe0002000,2|(fpb&0xFFFFfffe))
    run_target()


def set_sw_bp_gen(address, erase_size, instruction, flags):  #mplab
    global erase_as_needed
    log.debug("Debug: set/reset bp at address 0x%0x, store instructions 0x%0x, flags = 0x%0x" % (address, instruction, flags))
    if address >= 0x20000000:
        erase_size = 4 
    else:
        clear_and_report_flash_error()


    erase_page_start = address & ~(erase_size-1)
    address_in_erase_page = address & (erase_size-1)

    data = bytearray(erase_size)
    cache_invalidateInstrCache()
    dev.Read(erase_page_start, data, 0, erase_size)
    return_value = data[address_in_erase_page] | (data[address_in_erase_page+1] << 8)

    # Insert software breakpoint instruction in the data
    data[address_in_erase_page] = instruction & 0xFF
    data[address_in_erase_page+1] = (instruction >> 8) & 0xFF

    if erase_size == 4:
        dev.Write(erase_page_start, data, 0, erase_size)
    else:
        erase_as_needed = True
        prog_write("Pgm", erase_page_start, erase_size, data)
    return return_value

# device specific functions


def dap_Read8(adr):
    return dev.Read8(adr)

def dap_Write8(adr,val):
    return dev.Write8(adr,val)

def dap_Read16(adr):
    return dev.Read16(adr)

def dap_Write16(adr,val):
    return dev.Write16(adr,val)

def dap_Read32(adr):
    return dev.Read32(adr)

def dap_Write32(adr,val):
    return dev.Write32(adr,val)

def dap_Read(adr,b,o,l):
    return dev.Read(adr,b,o,l)

no_device = False

class arm_const:
    DHCSR = 0xE000EDF0
    DEMCR = 0xE000EDFC
    AIRCR = 0xE000ED0C

    def getDHCSRString(self, num):
        return str(num)

def set_globals(dev_copy, utils_copy, settings_copy, device_copy, log_copy):
    global dev, utils, settings, device, log, arm, no_device
    arm = arm_const()
    dev = dev_copy
    utils = utils_copy
    settings = settings_copy
    device = device_copy
    log = log_copy
    no_device = True

def set_globals2(dev_copy, utils_copy, settings_copy, device_copy, log_copy, arch):
    global architecture
    architecture = arch
    set_globals(dev_copy, utils_copy, settings_copy, device_copy, log_copy)

def _hold_in_reset(): 
    global has_reset, has_connected

    if not has_reset:
        alt_hold_in_reset()
        return
    log.info("Prog: Hold in reset")
    dev.Pins(0, dev.RESET, 1000)
    #  The debugger needs to stay connected to actively keep the reset line low.
    has_connected = False # Pins ends debug session, so a reconnect will be neeeded


def alt_hold_in_reset(): 
    # Alternative if RESET pin is not connected to debugger
    log.info("Prog: Hold in reset , no reset line")
    reset_and_halt()

def _release_from_reset():
    global reset_delay
    global has_reset
    if not has_reset:
        log.info("Prog: Release from reset (soft reset)")
        reset_and_halt()
        run_target()
        return
    log.info("Prog: Release from reset (float reset line)")
    dev.Pins(0, dev.RESET, 1000)
    dev.Delay(reset_delay)
    dev.Pins(dev.RESET, dev.RESET, 1000)  # now float reset back
    dev.Delay(reset_delay)

def alt_release_from_reset():
    log.info("Prog: Release from reset, no reset line")
    dev.Write32(dev.AIRCR, 0x05fa0004)  # VECTKEY | SYSRESETREQ

#    MUST do 
# set ERASE_SECTOR_SIZE to size of minimal erase valid on entire flash range. Should be same as erase_size in pic file
# set WRITE_CHUNK_SIZE to the largest size of flash that can be committed in one go. Typically page buffer size
# set CHIPID to the address of the CHIP ID register:

# Values for PFM quicksilver :
#WRITE_CHUNK_SIZE = 1024 #1024 Bytes in a Row
#ERASE_SECTOR_SIZE = 4096
#CHIPID = ?????

#TODO invalidate entire data and instruction cache
#def cache_invalidate():
    # M4 with NVMCTRL :    dap_Write32(nvm.cfgReg + 0x2000 + 0x20,1)
    # G55 M4   :        dev.Write32(0x4003C020,1)
    # other SAM4 with eefc:      dev.Write32(0x4007C020,1)
    # M7  see dap-cortex_m7.py
#   return

def clear_and_report_flash_error():
    return #todo clear and prepare flash controller for writing a soft bp

#def _erase_chip():
#    pass

def _erase_internal():
    log.info("Erasing entire chip")

    _erase_chip() 


# TODO implement writing of a flash range 
#def _write_small_chunk(address, data_offset, data,length):
#    log.info("Writing flash at address 0x%08x data_ofs %d" %  (address,data_offset))

# TODO erase a sector ERASE_SECTOR_SIZE bytes long
#def _erase_flash_sector(adr):
#    log.info("Erasing %d bytes at address 0x%08x " %  (ERASE_SECTOR_SIZE,adr))



# TODO save flash controller state prior to writing a larger flash range
#def _pre_flash_write():
#    log.info("About to write a large block of flash")
 
# TODO restore flash controller state after writing a larger flash range
#def _post_flash_write():
#    log.info("Finished writing a large block of flash")

################### MAYDO's


def _prog_write_internal(type_of_mem, address, length, data):
    global erase_as_needed

    # MAYDO handle virtual security bits if any (placed by convention at a specific address into the hex file)
    # if _handle_security_flags(address,length,data):
    #   return

    # MAYDO handle config bits if needed
    # if str(type_of_mem) == "Cfg":
    #   write_config(address, length, data)
    #   return
    m = str(type_of_mem)
    if m != "Pgm" and m != "BootFlash":
        dev.Write(address, data, 0, length)
        return

    _flash_write_rng(address, length, data, erase_as_needed)
    erase_as_needed = True

def _end_of_operations():
    # MAYDO set security bit if configured
    pass

def _prog_read_internal(type_of_mem, address, length, data):  
    #MAYDO if config bits are implemented, implement and call  read_config
    #if str(type_of_mem) == "Cfg":
    #    # called to read config bits at 'address'
    #    read_config(address, length, data)
    #    return

    # default implementation is to read the data from the bus
    dev.Read(address, data, 0, length)


def cache_onDebugStart():
    cache_invalidate()
def cache_onStop():
    cache_invalidate()

def cache_onRun():
    pass
def cache_onDataRead(adr,size):
    pass #done in onStop
def cache_onDataWrite(adr,size):
    pass #done in onStop
def cache_invalidateInstrCache():
    pass #done in onStop
def wdt_onHalt():
    pass
def wdt_onRun():
    pass

# leave unchanged unless complicated boot procedure
def _begin_programming_operation():
    ensure_connect()
    reset_and_halt()  

def _after_cpu_reset(): # release reset extension
    pass

def reset_and_halt():
    halt_target()
    dev.Write32(arm.DEMCR, 0x01000001) # TRCENA  | VC_CORERESET
    dev.Write32(arm.AIRCR, 0x05fa0004) # VECTKEY | SYSRESETREQ
    n = 0
    retries = 10
    seenReset = False
    while n<retries:
        dhcsr = dev.Read32(arm.DHCSR)
        if (dhcsr & 0x02000000): # wait for S_RESET_ST
            seenReset=True
            dev.Write32(arm.DHCSR, 0xa05f0003) # DBGKEY|C_HALT|C_DEBUGEN
            _after_cpu_reset()
            dhcsr = print_dhcsr("Cleared CRSTEXT")
        hasHalted = 0 != (dhcsr & 0x20000) # S_HALT
        if seenReset:
            if hasHalted: # wait for S_HALT
                break
        dev.Delay(100000)
        n=n+1
    dev.Write32(arm.DEMCR, 0x01000000) # TRCENA
    if n==retries:
        raise Exception("The device did not come out of reset")

def _read_device_id():
    return dev.Read32(CHIPID)

def _write_flash_sector(address, data_offset, data,length):
    current_ofs = 0
    while current_ofs < length:
        _write_small_chunk(address,current_ofs + data_offset,data, min(length-current_ofs,WRITE_CHUNK_SIZE))
        current_ofs += WRITE_CHUNK_SIZE
        address += WRITE_CHUNK_SIZE

def _flash_write_rng(address, length, data, do_erase):
    written = 0
    _pre_flash_write()
    while written < length:
        if do_erase != 0:
            _erase_flash_sector(address)
        _write_flash_sector(address, written, data, min(length-written,ERASE_SECTOR_SIZE))
        written += ERASE_SECTOR_SIZE
        address += ERASE_SECTOR_SIZE
    _post_flash_write()


NVMCTRL = 0x44000600
NVMADDR =    0x44000630
NVMSRCADDR = 0x440006C0
NVMKEY = 0x44000620
NVMCON = 0x44000600
NVMCONCLR = 0x44000604
NVMCONSET = 0x44000608

NVMCONNVMWR = 0x8000

NVMKEY1 = 0xAA996655
NVMKEY2 = 0x556699AA
NVMKEYRESET =  0x00000000

ERASE_SECTOR_SIZE = 4096
WRITE_CHUNK_SIZE = 1024
CHIPID = 0x41000118  # DSU_DID
RAM_BUFFER = 0x20000000

def _nvm_busy(wait_time):
    fcw_status = 1
    loop_cnt = 0
    DELAY_LOOP_CNT = 200
    for loop_cnt in range(wait_time):

        dev.Delay(1000)  #wait 1msec
        # Return when  Flash controller is idle 
        if 0 == (dev.Read32(FCW_STATUS) & 0x00000001):
            return
    raise Exception("Debug: Flash Controller is busy, timeout occured")

dsu_statusa = 0x41000101
NVMLOCK = NVMCTRL + 0xf0

def unlock_sys():
    SYSKEY = 0x44000000 + 0xb0
    dev.Read32(SYSKEY)
    dev.Write32(SYSKEY, NVMKEYRESET)
    dev.Write32(SYSKEY, NVMKEY1)
    dev.Write32(SYSKEY, NVMKEY2)

    dev.Write32(NVMLOCK,0x80000000)  # turn off boot protection
    dev.Read32(NVMLOCK)

def _erase_chip():
    dsu_ctrl = 0x41000100  
    dsu_ce = 0x10
    unlock_sys()

    dev.Write8(dsu_ctrl, dsu_ce) # 0x41000100,0x10
    n = 0
    erase_time_100msecs = 100  # wait 10 sec

    while n < erase_time_100msecs:
        statusa=dev.Read8(dsu_statusa) # 0x41000101
        if statusa & 1: #statusa_done
            if statusa & 0x1c:
                log.error("DSU.STATUSA indicates an error %x"  % statusa)
                raise Exception("Erase error")
            break
        dev.Delay(100000)
        n=n+1


def _erase_flash_sector(address):
    dev.Write32(NVMADDR, address)
    exec_nvm_cmd(4) # page erase

save_ram_buffer = []   
global nvmcon0
cache_flags = 0
def _pre_flash_write():
    global save_ram_buffer,nvmcon0,cache_flags
    save_ram_buffer = bytearray(WRITE_CHUNK_SIZE)
    cache_flags = dev.Read32(0x44012400)
    dev.Write32(0x44012400,7) #autoinvalidate cache
    dev.Read(RAM_BUFFER, save_ram_buffer, 0, WRITE_CHUNK_SIZE) # save RAM
    nvmcon0 = dev.Read32(NVMCON)    # enable WREN and select ROW programming
    

def _post_flash_write():
    dev.Write(RAM_BUFFER, save_ram_buffer, 0, WRITE_CHUNK_SIZE) #restore RAM
    dev.Write32(NVMCON, nvmcon0 ) # restore 
    dev.Write32(0x44012400,cache_flags)

def _write_small_chunk(address, data_offset, data,length):
    dev.Write(RAM_BUFFER, data,  data_offset, length) # fill in page buffer
    dev.Write32(NVMADDR, address)
    dev.Write32(NVMSRCADDR, RAM_BUFFER)
    exec_nvm_cmd(3)

def exec_nvm_cmd(cmd):
    dev.Write32(NVMCON, (nvmcon0 & 0xFFFFFFF0) | 0x4000 | cmd)  # select page erase    
    dev.Write32(NVMKEY, NVMKEYRESET)
    dev.Write32(NVMKEY, NVMKEY1)
    dev.Write32(NVMKEY, NVMKEY2)
    dev.Write32(NVMCONSET,NVMCONNVMWR)  # start the write
    i = 0
    while i < 100:
        status = dev.Read32(NVMCON) & NVMCONNVMWR
        if 0 == status:
            break
        i = i+1
        dev.Delay(1000)
    dev.Write32(NVMCONCLR,0x4000)  # clear NVMWR_EN


def cache_invalidate():
    dap_Write32(0x41002020,1)   #chimera 

def _begin_programming_operation():
    global erase_as_needed,has_reset
    erase_as_needed = True
    
    reset_extension()
    if has_reset:
        statusa = dev.Read8(dsu_statusa) # verify CRSTEXT is set
        if 0 == (statusa & 2): #STATUSA.CRSTEXT
            log.error("Device could not enter reset extension, check cap on RST line")
            raise Exception("Reset error.")
        else:
            log.info("Device entered reset extension")
    try:
        reset_and_halt()  # clear CRSTEXT
    except:
        pass

def reset_extension_1():
    global reset_delay # additional delay for reset line if needed
    global has_reset
    if not has_reset:
        return

    delay=1000  # time to  wait for analog RESET/SWCLK pins to become digitally high/low
    dev.Pins(0,dev.RESET,delay)  # 1 msec with reset high 
    if reset_delay > 0:
        dev.Delay(reset_delay)
    dev.Pins(dev.RESET,dev.RESET,delay) # 1 msec with floating reset 
    if reset_delay > 0:
        dev.Delay(reset_delay)
    dev.Pins(0,dev.RESET | dev.SWCLK,delay); # 1 msec with reset and clock low 
    if reset_delay > 0:
        dev.Delay(reset_delay)
    dev.Pins(dev.RESET,dev.RESET,delay); # now float reset back
    if reset_delay > 0:
        dev.Delay(reset_delay)
    dev.Delay(10000)
    dev.Connect(comm_iface, comm_speed)

def reset_extension():
    reset_extension_1()
    cfgcon = dev.Read32(0x44000010)
    dev.Write32(0x44000010,cfgcon & 0xFFFFBFFF) # Turn off SMCLR
    reset_extension_1()

def _after_cpu_reset(): # release reset extension
    dev.Write8(dsu_statusa, 2) # release the cpu STATUSA.CRSTEXT

def set_sw_bp(address, instruction, flags):#mplab
    return set_sw_bp_gen(address, ERASE_SECTOR_SIZE ,instruction,flags)

target_was_reset = False
debug_session  = True

def begin_communication_session(): #mplab
    log.info("Begin comm session")
    _begin_communication_session()

def end_communication_session(): #mplab
    log.info("End comm session")
    _end_communication_session()

def begin_programming_operation(): #mplab
    global debug_session
    log.info("Begin operations")
    debug_session = False
    _begin_programming_operation()

def erase(): #mplab
    log.info("Erase")
    _erase()

def prog_write(type_of_mem, address, length, data): #mplab
    log.info("Writing %08x bytes to address 0x%08x of %s memory" % (length, address, type_of_mem))
    _prog_write(type_of_mem, address, length, data)

def prog_read(type_of_mem, address, length, data): #mplab
    log.info("Reading %08x bytes from address 0x%08x of %s memory" % (length, address, type_of_mem))
    _prog_read(type_of_mem, address, length, data)

def end_of_operations():#mplab
    log.info("End of operations")
    _end_of_operations()

def begin_debug_session():  #mplab
    log.info("Debug: Init debug session")
    global debug_session
    debug_session = True
    _begin_debug_session()

def debug_read(mt, start, length, data):  #mplab
    log.info("Debug: Reading %08x bytes at start address 0x%08x (%s)" % (length, start, mt))
    _debug_read(mt, start, length, data)

def debug_write(mt, start, length, data):  #mplab
    log.info("Debug: Writing %08x bytes at start address 0x%08x (%s)" % (length, start, mt))
    _debug_write(mt, start, length, data)

def set_pc(pc):  #mplab
    log.info("Debug: set pc to 0x%08x" % pc)
    _set_pc(pc)

def get_pc():  #mplab
    pc = _get_pc()
    log.info("Debug: get_pc PC=0x%08x" % pc)
    return pc

def run_target():#mplab
    log.info("Debug: run target")
    _run_target()

_stealth_runstate = 2
def halt_target():  #mplab
    global _stealth_runstate    
    log.info("Debug: halt target")
    _stealth_runstate = 2  # cancels stealth mode
    _halt_target()

def step_target():  #mplab
    log.info("Debug: stepping at pc 0x%08x" % get_pc())
    _step_target()

def reset_target(): #mplab
    log.info("Debug: reset")
    _reset_target()
    on_after_reset() # call autoload hook

def is_target_running():#mplab
    global _stealth_runstate
    if _stealth_runstate == 2:
        return _is_target_running()
    return _stealth_runstate != 0

def on_after_reset(): 
    if not debug_session:
        return
    if not settings.getBool("arm.use_vtor", False):
        return
    vtor_name  = settings.getString("arm.vtor_adr", "0")

    vtor = -1
    try:
        vtor = int(vtor_name,0)
    except:
        try:
            vtor=deb.GetSymbolAddress(vtor_name)
        except:
            log.error("Debug: failed to compute location of VTOR")
            return
    load_vtor(vtor) 
    pass

def load_vtor(adr):
    try:
        pc = dev.Read32(adr + 4)
        sp = dev.Read32(adr)
        set_pc(pc)
        dev.WriteReg64(arm.SP,sp)
        log.info("Setting pc=%08x and sp=%08x" % (pc, sp))
    except:
        log.error("Debug: failed to set PC and SP to contents of exception_table")

def on_program_done():
    on_after_reset()

def end_debug_session():  #mplab
    log.info("Debug: End debug session")
    _end_debug_session()

def verify_transfer(type_of_mem, address, data, length):  #mplab
    log.info("Verifying %08x bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    _verify_transfer(type_of_mem, address, data, length)

    

def _verify_transfer(type_of_mem, address, data, length):
    if len(data) != length:
        raise Exception("The given data and length mismatch")
    d = bytearray(length)
    prog_read(type_of_mem, address, length, d)
    if str(type_of_mem) == "Cfg":
        verify_config(address, data, d, "verify")
    else:
        for i in range(length):
            if data[i] != d[i]:
                raise Exception("Verify failed for mem type {}, at address 0x{:X}".format(str(type_of_mem), address + i))

global dev_cfg_masks_bytearray
dev_cfg_masks_bytearray = None

def init_masks_as_bytearray():
    global dev_cfg_masks_bytearray
    if dev_cfg_masks_bytearray:
        return
    dev_cfg_masks_bytearray = {}
    for address, val in dev_cfg_masks.items():
        dev_cfg_masks_bytearray[address    ] = int(val      ) & 0xFF
        dev_cfg_masks_bytearray[address + 1] = int(val >> 8 ) & 0xFF
        dev_cfg_masks_bytearray[address + 2] = int(val >> 16) & 0xFF
        dev_cfg_masks_bytearray[address + 3] = int(val >> 24) & 0xFF

def verify_config(address, expected, actual, error_string_prefix):
    try:
        # older versions of MPLAB X (<=v5.45) did not pass dev_cfg_masks
        # so very_config cannot be executed
        dev_cfg_masks 
    except:
        raise Exception("{} config is not implemented".format(error_string_prefix))
    init_masks_as_bytearray()

    for index, actual_val in enumerate(actual):
        current_address = address + index
        if current_address in dev_cfg_masks_bytearray:
            mask = dev_cfg_masks_bytearray[current_address]
            expected_val = expected[index] & mask
            actual_val &= mask
            if actual_val != expected_val:
                error_string = "{} failed at address 0x{:0X}, expected 0x{:0X}, got 0x{:0X}".format(error_string_prefix, current_address, expected_val, actual_val)
                raise Exception(error_string)

def is_memory_blank_all_ffs(type_of_mem):
    return str(type_of_mem) == "Pgm" or str(type_of_mem) == "UserID"
        
def blank_check():  #mplab
    log.info("Blank check")

def blank_check_mem(type_of_mem, address, length):  #mplab
    msg.print("Blank checking %08x bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    _blank_check_mem(type_of_mem, address, length)

def _blank_check_mem(type_of_mem, address, length):
    data = bytearray(length)
    prog_read(type_of_mem, address, length, data)
    if str(type_of_mem) == "Cfg":
        prog_read(type_of_mem, address, length, data)
        verify_config(address, data, data, "blank check")
    elif is_memory_blank_all_ffs(type_of_mem):
        for index, x in enumerate(data):
            if x != 255:
                raise Exception("Blank failed for mem type {}, at address 0x{:X}".format(str(type_of_mem), address + index))
    else:
        log.error("Blank check, ignoring {}".format(str(type_of_mem)))

def hold_in_reset():  #mplab
    log.info("Hold in reset")
    _hold_in_reset()

def release_from_reset():  #mplab
    log.info("Release from reset")
    _release_from_reset()
    
def read_device_id():#mplab
    log.info("Read device ID")
    return _read_device_id()

import os
has_samba = os.path.isfile(os.path.join("samba.py"))
if has_samba:
    import samba
from xml.dom import minidom


class MemHandlers():
    def __init__(self, board_file):
        if has_samba:
            samba.log = log
            samba.msg = msg
            samba.dev = dev
            samba.is_target_running = is_target_running
            samba.run_target = run_target
            samba.architecture = architecture
            samba.arm = arm
        self.parse_board_file(board_file)

    def parse_board_file(self, board_file):
        self.handlers = []
        xmldoc = minidom.parse(board_file)
        rangeNodes = xmldoc.getElementsByTagName("range")
        for rangeNode in rangeNodes:
            start = int(rangeNode.getAttribute("start"), 0)
            end = int(rangeNode.getAttribute("end"), 0)
            type = rangeNode.getAttribute("type")
            config = {}
            for configNode in rangeNode.childNodes:
                if configNode.nodeType == configNode.ELEMENT_NODE:
                    try:
                        config[configNode.tagName] = int(configNode.firstChild.nodeValue, 0)
                    except:
                        config[configNode.tagName] = ide.expandProjectMacros("${ProjectName}", configNode.firstChild.nodeValue).replace("\\", os.path.sep)
            if type == "samba" and has_samba:
                self.handlers.append(samba.Samba(start, end, config))
            elif type == "user":
                self.handlers.append(UserHandler(start, end, config))

    def prog_write(self, type_of_mem, address, length, data):
        log.info("Prog: Writing %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
        global erase_as_needed
        remainings = [[address, address + length]]
        for handler in self.handlers:
            write_start = max(address, handler.range_start)
            write_end = min(address + length, handler.range_end)
            if write_start < write_end:
                # chop the data buffer and pass it to handler and run
                if erase_as_needed:
                    handler.erase(write_start - handler.range_start, write_end - write_start)
                handler.write(write_start - handler.range_start, data[write_start - address: write_end - address])
            new_remainings = []
            for remaining in remainings:
                write_start = max(remaining[0], handler.range_start)
                write_end = min(remaining[1], handler.range_end)
                if remaining[0] < write_start < remaining[1]:
                    new_remainings.append([remaining[0], write_start])
                if remaining[0] < write_end < remaining[1]:
                    new_remainings.append([write_end, remaining[1]])
                elif write_start < write_end < remaining[0] or remaining[1] < write_start < write_end or write_start > write_end:
                    new_remainings.append(remaining)
            remainings = new_remainings
        # now write to memory ranges that are not covered by handlers
        for remaining in remainings:
            _prog_write_internal(type_of_mem, remaining[0], remaining[1] - remaining[0], data[remaining[0] - address: remaining[1] - address])

    def prog_read(self, type_of_mem, address, length, data):
        log.info("Prog: Reading %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
        remainings = [[address, address + length]]
        for handler in self.handlers:
            read_start = max(address, handler.range_start)
            read_end = min(address + length, handler.range_end)
            if read_start < read_end:
                # chop the data buffer and pass it to handler and run
                buffer = bytearray(read_end - read_start)
                handler.read(read_start - handler.range_start, buffer)
                data[read_start - address: read_end - address] = buffer
            new_remainings = []
            for remaining in remainings:
                read_start = max(remaining[0], handler.range_start)
                read_end = min(remaining[1], handler.range_end)
                if remaining[0] < read_start < remaining[1]:
                    new_remainings.append([remaining[0], read_start])
                if remaining[0] < read_end < remaining[1]:
                    new_remainings.append([read_end, remaining[1]])
                elif read_start < read_end < remaining[0] or remaining[1] < read_start < read_end or read_start > read_end:
                    new_remainings.append(remaining)
            remainings = new_remainings
        # now write to memory ranges that are not covered by handlers
        for remaining in remainings:
            _prog_read_internal(type_of_mem, remaining[0], remaining[1] - remaining[0], data[remaining[0] - address: remaining[1] - address])

    def erase(self):
        log.info("Prog: Erasing memory")
        for handler in self.handlers:
            if handler.range_start < handler.range_end:
                handler.erase(0, handler.range_end - handler.range_start)


class UserHandler():
    def __init__(self, range_start, range_end, config):
        self.range_start = range_start
        self.range_end = range_end
        self.config = config

    def call(self, address=0, data=None):
        if "handler_name" in self.config.keys():
            eval(self.config["handler_name"])()
        else:
            log.info("The name of handler function is missing")


def _prog_write(type_of_mem, address, length, data):
    global mem_handlers
    if mem_handlers is None:
        _prog_write_internal(type_of_mem, address, length, data)
    else:
        mem_handlers.prog_write(type_of_mem, address, length, data)


def _prog_read(type_of_mem, address, length, data):
    global mem_handlers
    if mem_handlers is None:
        _prog_read_internal(type_of_mem, address, length, data)
    else:
        mem_handlers.prog_read(type_of_mem, address, length, data)


def _erase():
    global mem_handlers, erase_as_needed
    if mem_handlers is not None:
        mem_handlers.erase()
    _erase_internal()
    erase_as_needed = False  # tell prog_write not to erase rows prior to write


def init_mem_handlers():
    global mem_handlers
    mem_handlers = None
    try:
        board_file = ide.expandProjectMacros("${ProjectName}", settings.getString("loader.board_file", "${ProjectDir}/board.xboard"))
    except:
        board_file = "./board.xboard"
    if os.path.isfile(board_file):
        mem_handlers = MemHandlers(board_file)
